Decision1;Rationale1;Decision2;Rationale2;Relationship;Alpha
trigger wakeup key events;ACPI: button;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.5111292600631714
trigger wakeup key events;ACPI: button;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.681071937084198
trigger wakeup key events;ACPI: button;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5258775949478149
trigger wakeup key events;ACPI: button;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6029117107391357
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;Driver core needs no inform from callee(bus driver) about the result of remove callback;increases separation of concerns;Contradicts;0.565901517868042
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.8645511865615845
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9147369265556335
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.5157364010810852
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.815011739730835
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5263650417327881
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;Remove button->device pointer;button;Contradicts;0.6563263535499573
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.5562366843223572
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;dont want such modular code;definitely;Contradicts;0.5002537965774536
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6530077457427979
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;Driver core needs no inform from callee(bus driver) about the result of remove callback;increases separation of concerns;Contradicts;0.5137696862220764
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;Drop no longer necessary Acer SW5-012 lid_init_state quirk;no longer necessary;Contradicts;0.851567804813385
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;Drop no longer necessary Asus T200TA lid_init_state quirk;no longer necessary;Contradicts;0.6037524342536926
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.8511714339256287
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.9546050429344177
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Contradicts;0.6827619075775146
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;percpu.h modifications were reverted  ;so that it could be applied as a separate patch and serve as bisection point;Contradicts;0.6144375205039978
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5242920517921448
Driver core needs no inform from callee(bus driver) about the result of remove callback;increases separation of concerns;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8569427132606506
Driver core needs no inform from callee(bus driver) about the result of remove callback;increases separation of concerns;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.5082390308380127
Driver core needs no inform from callee(bus driver) about the result of remove callback;increases separation of concerns;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5352092385292053
fix some coding style issues;fix some coding style issues;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6829406023025513
fix some coding style issues;fix some coding style issues;While using KEY event type, there is no such problem;no such problem;Contradicts;0.6978514790534973
fix some coding style issues;fix some coding style issues;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5429549813270569
fix some coding style issues;fix some coding style issues;"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;Contradicts;0.5336428880691528
fix some coding style issues;fix some coding style issues;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.6287462711334229
fix some coding style issues;fix some coding style issues;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5421580076217651
Fix some coding style issues reported by checkpatch.pl;including the following types;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.5152801871299744
Fix some coding style issues reported by checkpatch.pl;including the following types;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.7923252582550049
Fix some coding style issues reported by checkpatch.pl;including the following types;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7720438241958618
Fix some coding style issues reported by checkpatch.pl;including the following types;"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;Contradicts;0.7140394449234009
Fix some coding style issues reported by checkpatch.pl;including the following types;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.7155750393867493
code indent should use tabs where possible;to maintain consistency and follow coding standards;Drop no longer necessary Acer SW5-012 lid_init_state quirk;no longer necessary;Contradicts;0.7187292575836182
code indent should use tabs where possible;to maintain consistency and follow coding standards;Drop no longer necessary Asus T200TA lid_init_state quirk;no longer necessary;Contradicts;0.667939305305481
code indent should use tabs where possible;to maintain consistency and follow coding standards;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.630553126335144
code indent should use tabs where possible;to maintain consistency and follow coding standards;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7217661738395691
Clean up printing messages;ACPI button;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.711371123790741
Clean up printing messages;ACPI button;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5553654432296753
Clean up printing messages;ACPI button;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.5098245143890381
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Turn lid_blacklst DMI table into a generic quirk table;ACPI: button;Contradicts;0.5302530527114868
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.7320807576179504
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.5630317330360413
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.7275182604789734
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);Contradicts;0.5436387062072754
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.6198940873146057
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7243737578392029
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;dont try to use a non-existent lid device;non-existent;Contradicts;0.5096672773361206
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Remove button->device pointer;button;Contradicts;0.6339717507362366
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.7702106237411499
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Remove unneeded acpi_handle from driver;unneeded;Contradicts;0.5724430084228516
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.506248414516449
replace the direct printk() invocations with pr_info() and drop the unneeded PREFIX symbol definition from battery.c;changes the excessive log level for some of them too;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.710270881652832
"Remove the "" MD60198"" part from the E2215T quirk";the MD60### part of the model number differs per country/batch while all of the E2215T and E2228T models have this issue;This commit adds a quirk for this;as no lid-switch function is better then the interrupt storm;Contradicts;0.8323667645454407
"Remove the "" MD60198"" part from the E2215T quirk";the MD60### part of the model number differs per country/batch while all of the E2215T and E2228T models have this issue;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5444344878196716
"Remove the "" MD60198"" part from the E2215T quirk";the MD60### part of the model number differs per country/batch while all of the E2215T and E2228T models have this issue;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8411511778831482
Drop no longer necessary Acer SW5-012 lid_init_state quirk;no longer necessary;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.575776219367981
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";Contradicts;0.8618293404579163
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Contradicts;0.5768948197364807
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.8578787446022034
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.647047221660614
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Contradicts;0.562140941619873
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;percpu.h modifications were reverted  ;so that it could be applied as a separate patch and serve as bisection point;Contradicts;0.7066382169723511
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8366401195526123
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.6888614296913147
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;get rid of input BIT* duplicate defines;duplicate;Contradicts;0.617366373538971
we no longer need to disable the lid functionality on the Acer SW5-012;Now that this workaround is in place;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9657790660858154
we no longer need to disable the lid functionality on the Acer SW5-012;Now that this workaround is in place;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7430228590965271
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;Turn lid_blacklst DMI table into a generic quirk table;ACPI: button;Contradicts;0.5779522657394409
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.5491528511047363
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.6944081783294678
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.7667028903961182
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;have a separate patch to make lid_init_state=method deprecated  ;lid_init_state=method is buggy;Contradicts;0.695054829120636
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.872973620891571
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;this patch stops sending the initial lid state to the userspace;to avoid sending the wrong lid state to the userspace to trigger such kind of wrong suspending;Contradicts;0.8448073267936707
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.6215338706970215
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7264577746391296
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5660305023193359
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;dont want such modular code;definitely;Contradicts;0.5001574754714966
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.844693660736084
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.9415662884712219
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.8992103338241577
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6123496890068054
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];percpu.h modifications were reverted  ;so that it could be applied as a separate patch and serve as bisection point;Contradicts;0.6230225563049316
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6671604514122009
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5354910492897034
Delete unused proc filename macros;unused;re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.5456905364990234
Delete unused proc filename macros;unused;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.5718994736671448
Drop no longer necessary Asus T200TA lid_init_state quirk;no longer necessary;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.5339242815971375
drop the quirk  ;the lid_init_state=ACPI_BUTTON_LID_INIT_OPEN quirk for the Asus T200TA is no longer necessary, the lid now works properly without it;This commit adds a quirk for this;as no lid-switch function is better then the interrupt storm;Contradicts;0.5571145415306091
drop the quirk  ;the lid_init_state=ACPI_BUTTON_LID_INIT_OPEN quirk for the Asus T200TA is no longer necessary, the lid now works properly without it;Turn lid_blacklst DMI table into a generic quirk table;ACPI: button;Contradicts;0.5719671845436096
"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.6702036261558533
"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.700800895690918
"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6332405805587769
"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.618156373500824
"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6736486554145813
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;Contradicts;0.611726701259613
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;Contradicts;0.611726701259613
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.5184349417686462
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.8881378173828125
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";Im fairly confident about the coverage of this conversion patch  ;Given the fact that I had only a couple of failures from tests on step 6;Contradicts;0.9643394947052002
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6911677122116089
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.6203684210777283
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.7044978737831116
adds the BYT_TRIG_LVL flag to this;so now it is turned into a level interrupt which fires both when low and high, iow it simply always fires leading to an interrupt storm, the tablet immediately waking up from suspend again, etc;re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.5531418323516846
adds the BYT_TRIG_LVL flag to this;so now it is turned into a level interrupt which fires both when low and high, iow it simply always fires leading to an interrupt storm, the tablet immediately waking up from suspend again, etc;libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;Contradicts;0.6170806288719177
adds the BYT_TRIG_LVL flag to this;so now it is turned into a level interrupt which fires both when low and high, iow it simply always fires leading to an interrupt storm, the tablet immediately waking up from suspend again, etc;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.7578133940696716
adds the BYT_TRIG_LVL flag to this;so now it is turned into a level interrupt which fires both when low and high, iow it simply always fires leading to an interrupt storm, the tablet immediately waking up from suspend again, etc;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5958526134490967
adds the BYT_TRIG_LVL flag to this;so now it is turned into a level interrupt which fires both when low and high, iow it simply always fires leading to an interrupt storm, the tablet immediately waking up from suspend again, etc;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6561757326126099
This commit adds a quirk for this;as no lid-switch function is better then the interrupt storm;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5970603227615356
Remove unused acpi_lid_notifier_[un]register() functions;unused;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.6215724349021912
Remove unused acpi_lid_notifier_[un]register() functions;unused;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.6147326231002808
Remove unused acpi_lid_notifier_[un]register() functions;unused;Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Contradicts;0.5104817748069763
Remove unused acpi_lid_notifier_[un]register() functions;unused;Remove unused ACPI button procfs interface;unused;Contradicts;0.5968493223190308
Remove unused acpi_lid_notifier_[un]register() functions;unused;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.6047009229660034
Remove unused acpi_lid_notifier_[un]register() functions;unused;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7245230674743652
Remove unused acpi_lid_notifier_[un]register() functions;unused;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.519135594367981
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;Contradicts;0.5550646185874939
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.9343755841255188
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.5011790990829468
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;Contradicts;0.8596915602684021
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);Contradicts;0.793846607208252
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;<acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> should not be included directly from any files that are built for CONFIG_ACPI unset;because that generally leads to build warnings about undefined symbols in !CONFIG_ACPI builds;Contradicts;0.6027757525444031
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.6037721037864685
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6132407784461975
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;Contradicts;0.7124063968658447
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.6137564182281494
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.9090687036514282
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;only trigger acpi_pm_wakeup_event() in the acpi_button_notify() path and dont do that in the acpi_lid_initialize_state() path;To avoid the confusion;Contradicts;0.732337236404419
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9227952361106873
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;"the ""open"" choice is worse";"the ""method"" operation mode implementation can be buggy on some platforms";Contradicts;0.5372995734214783
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.7292149066925049
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5139456391334534
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.5530309677124023
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.5232023000717163
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7444307208061218
Turn lid_blacklst DMI table into a generic quirk table;ACPI: button;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.5280389189720154
Turn lid_blacklst DMI table into a generic quirk table;ACPI: button;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5892412662506104
Turn lid_blacklst DMI table into a generic quirk table;ACPI: button;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.5261881947517395
"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Contradicts;0.7690134644508362
"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;making the ACPI button driver loadable as a module even if not booted in ACPI mode;to fix the asymmetry and provide the acpi_lid_open() symbol;Contradicts;0.5958079695701599
"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.809007465839386
"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Contradicts;0.7469255924224854
"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5478664040565491
[ an action or a change that has been made, including a description of the patch behaviour ];[ the reason for a decision or value judgment ];While using KEY event type, there is no such problem;no such problem;Contradicts;0.5018157362937927
[ an action or a change that has been made, including a description of the patch behaviour ];[ the reason for a decision or value judgment ];"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5693426728248596
[ an action or a change that has been made, including a description of the patch behaviour ];[ the reason for a decision or value judgment ];un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7828320264816284
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;only trigger acpi_pm_wakeup_event() in the acpi_button_notify() path and dont do that in the acpi_lid_initialize_state() path;To avoid the confusion;Contradicts;0.9652805924415588
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.7976793050765991
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);Contradicts;0.6488412022590637
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6729013919830322
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Contradicts;0.8344817161560059
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.7688733339309692
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;this patch stops sending the initial lid state to the userspace;to avoid sending the wrong lid state to the userspace to trigger such kind of wrong suspending;Contradicts;0.9669692516326904
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.7163429856300354
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;only the necessary includes are there;necessary;Contradicts;0.7191224098205566
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5892200469970703
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Remove button->device pointer;button;Contradicts;0.7335673570632935
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.9026492238044739
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6845303773880005
Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);Contradicts;0.5339236855506897
Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.5536026358604431
Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8075802326202393
Fix a build warning in the ACPI button driver when CONFIG_PROC_FS is not enabled by marking the unused function as __maybe_unused;not enabled, unused;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9645082354545593
Fix a build warning in the ACPI button driver when CONFIG_PROC_FS is not enabled by marking the unused function as __maybe_unused;not enabled, unused;Fix unused function warnings for CONFIG_PM_SLEEP;unused function warnings;Contradicts;0.7871647477149963
Fix a build warning in the ACPI button driver when CONFIG_PROC_FS is not enabled by marking the unused function as __maybe_unused;not enabled, unused;Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Contradicts;0.585749626159668
Fix a build warning in the ACPI button driver when CONFIG_PROC_FS is not enabled by marking the unused function as __maybe_unused;not enabled, unused;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6571962237358093
Fix a build warning in the ACPI button driver when CONFIG_PROC_FS is not enabled by marking the unused function as __maybe_unused;not enabled, unused;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5180545449256897
Increment wakeup count only when notified;-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5598258376121521
Increment wakeup count only when notified;-;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5108926892280579
only trigger acpi_pm_wakeup_event() in the acpi_button_notify() path and dont do that in the acpi_lid_initialize_state() path;To avoid the confusion;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5346936583518982
only trigger acpi_pm_wakeup_event() in the acpi_button_notify() path and dont do that in the acpi_lid_initialize_state() path;To avoid the confusion;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6857666373252869
only trigger acpi_pm_wakeup_event() in the acpi_button_notify() path and dont do that in the acpi_lid_initialize_state() path;To avoid the confusion;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6003605723381042
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);Contradicts;0.5133824348449707
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.5289962887763977
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8896327614784241
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.5749815702438354
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;Change the argument to take a pointer to an acpi_integer;support 64-bit integers on all platforms;Contradicts;0.6038927435874939
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;Also remove includes of input.h from non-input sources only for BIT macro definition;non-input sources, BIT macro definition;Contradicts;0.5068488121032715
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.5827615261077881
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7215312719345093
making the ACPI button driver loadable as a module even if not booted in ACPI mode;to fix the asymmetry and provide the acpi_lid_open() symbol;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.7671921849250793
making the ACPI button driver loadable as a module even if not booted in ACPI mode;to fix the asymmetry and provide the acpi_lid_open() symbol;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.7160195112228394
making the ACPI button driver loadable as a module even if not booted in ACPI mode;to fix the asymmetry and provide the acpi_lid_open() symbol;"The second argument of ACPI driver .remove() operation is only used by the ACPI processor driver
";the value passed to that driver through it is always available from the given struct acpi_device objects removal_type field;Contradicts;0.70038902759552
making the ACPI button driver loadable as a module even if not booted in ACPI mode;to fix the asymmetry and provide the acpi_lid_open() symbol;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6126500368118286
making the ACPI button driver loadable as a module even if not booted in ACPI mode;to fix the asymmetry and provide the acpi_lid_open() symbol;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7580773234367371
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;adds an acpi_handle_debug call  ;to help debugging this;Contradicts;0.6032112836837769
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;Contradicts;0.5858190059661865
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;Contradicts;0.5858190059661865
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Contradicts;0.9552225470542908
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Add ACPI Button event via netlink routine;-;Contradicts;0.5685564279556274
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;add ACPI Button event back via netlink routine;Now ACPI events are sent to userspace via netlink;Contradicts;0.539610743522644
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Contradicts;0.6574010252952576
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Use GPE reference counting to support shared GPEs  ;the wakeup enable mask bits of GPEs are set as soon as the GPEs are enabled to wake up the system;Contradicts;0.5038667917251587
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.922550618648529
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Im fairly confident about the coverage of this conversion patch  ;Given the fact that I had only a couple of failures from tests on step 6;Contradicts;0.9304666519165039
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;Contradicts;0.52631676197052
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Contradicts;0.6609838604927063
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;Contradicts;0.5425845980644226
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;whitespace fix  ;This does not change any actual console output;Contradicts;0.5471939444541931
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.7639837861061096
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;leave ->owner as easy-manipulative field;somebody will forget to unpin previous/pin current module when switching ->owner;Contradicts;0.7976706624031067
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;dont want such modular code;definitely;Contradicts;0.6898743510246277
evemu-record after noticing a spurious suspend is too late to detect;a LID closed event is the (probable) cause of this;While using KEY event type, there is no such problem;no such problem;Contradicts;0.6576566100120544
evemu-record after noticing a spurious suspend is too late to detect;a LID closed event is the (probable) cause of this;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5780016779899597
adds an acpi_handle_debug call  ;to help debugging this;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.886807918548584
adds an acpi_handle_debug call  ;to help debugging this;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.5289319753646851
adds an acpi_handle_debug call  ;to help debugging this;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6301801800727844
adds an acpi_handle_debug call  ;to help debugging this;Remove unneeded acpi_handle from driver;unneeded;Contradicts;0.6949425935745239
Fix function prototypes for module_param_call();-;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6388698816299438
Fix function prototypes for module_param_call();-;While using KEY event type, there is no such problem;no such problem;Contradicts;0.590203046798706
Fix function prototypes for module_param_call();-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6610884666442871
fix whitespace in pr_fmt() to align log entries;align log entries;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6005964279174805
fix whitespace in pr_fmt() to align log entries;align log entries;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5512595772743225
fix whitespace in pr_fmt() to align log entries;align log entries;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6508988738059998
fix whitespace in pr_fmt() to align log entries;align log entries;"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;Contradicts;0.6351128220558167
fix whitespace in pr_fmt() to align log entries;align log entries;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5699059963226318
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6101716756820679
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;percpu.h modifications were reverted  ;so that it could be applied as a separate patch and serve as bisection point;Contradicts;0.5380921959877014
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7265521883964539
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5873116850852966
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;While using KEY event type, there is no such problem;no such problem;Contradicts;0.721520185470581
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.8459145426750183
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;only the necessary includes are there;necessary;Contradicts;0.7093050479888916
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;failures were fixed;Build tests were done on the following configurations;Contradicts;0.8032366037368774
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.8519871830940247
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.509850025177002
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5916290879249573
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.9260413646697998
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.830618143081665
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;CONFIG_GCOV_KERNEL was turned off for all tests and a few more options had to be turned off depending on archs to make things build;my distributed build env didnt work with gcov compiles, like ipr on powerpc/64 which failed due to missing writeq;Contradicts;0.5231216549873352
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7108982801437378
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.756912112236023
assume the user will use the internal keyboard before this timeout expires;logind only checks the lid switch value after a timeout;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6380757093429565
assume the user will use the internal keyboard before this timeout expires;logind only checks the lid switch value after a timeout;We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.502798855304718
assume the user will use the internal keyboard before this timeout expires;logind only checks the lid switch value after a timeout;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5713346600532532
"userspace requires to see ""close"" event after the system is resumed";so that it can determine whether the internal display should remain dark and the external display should be lit on;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.5105665326118469
"userspace requires to see ""close"" event after the system is resumed";so that it can determine whether the internal display should remain dark and the external display should be lit on;this patch stops sending the initial lid state to the userspace;to avoid sending the wrong lid state to the userspace to trigger such kind of wrong suspending;Contradicts;0.5486745834350586
"userspace requires to see ""close"" event after the system is resumed";so that it can determine whether the internal display should remain dark and the external display should be lit on;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7408079504966736
"userspace requires to see ""close"" event after the system is resumed";so that it can determine whether the internal display should remain dark and the external display should be lit on;We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.6246978044509888
"userspace requires to see ""close"" event after the system is resumed";so that it can determine whether the internal display should remain dark and the external display should be lit on;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5285205841064453
Reversion of button.lid_init_state=method;doing so can enter a regression loop, but facilitates users to work the reported regressions around with;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5165059566497803
Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Contradicts;0.5640896558761597
Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Contradicts;0.6149165034294128
Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);not all ACPI drivers use/want it;they should not have to #undef PREFIX to define their own;Contradicts;0.7870277762413025
Remove lid_init_state=method mode;Fixes: ecb10b694b72 (ACPI / button: Remove lid_init_state=method mode);un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5166075825691223
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.6101716756820679
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;percpu.h modifications were reverted  ;so that it could be applied as a separate patch and serve as bisection point;Contradicts;0.5380921959877014
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7265521883964539
The ->sync hook allows all of the relevant event queues to be flushed;to prevent events from being missed due to race conditions;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5873116850852966
This patch makes it deprecated;lid_init__state=open is more useful than this mode;While using KEY event type, there is no such problem;no such problem;Contradicts;0.5355420708656311
have a separate patch to make lid_init_state=method deprecated  ;lid_init_state=method is buggy;This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Contradicts;0.6309941411018372
have a separate patch to make lid_init_state=method deprecated  ;lid_init_state=method is buggy;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.5419777035713196
have a separate patch to make lid_init_state=method deprecated  ;lid_init_state=method is buggy;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.6281877160072327
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Contradicts;0.8293910026550293
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Remove pointer to old lid_sysfs on unbind;ACPI / button;Contradicts;0.5028573274612427
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.8720148205757141
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Contradicts;0.8385393619537354
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.7161503434181213
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8162992000579834
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;Contradicts;0.6776241660118103
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;dont try to use a non-existent lid device;non-existent;Contradicts;0.5228011608123779
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Remove button->device pointer;button;Contradicts;0.8892360925674438
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.6978293657302856
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.8817843198776245
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.5182851552963257
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6406183838844299
it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.5481804609298706
it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Add ACPI Button event via netlink routine;-;Contradicts;0.5882682800292969
it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7295135855674744
it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5247042179107666
implements this mechanism  ;only;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5698152184486389
Use key event type to implement ACPI lid events;Another approach;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5348804593086243
Use key event type to implement ACPI lid events;Another approach;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6626445055007935
While using KEY event type, there is no such problem;no such problem;prints out an error message indicating which .h file needs to be added to the file;the file doesnt have fitting include block;Contradicts;0.5813952088356018
While using KEY event type, there is no such problem;no such problem;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7675278186798096
While using KEY event type, there is no such problem;no such problem;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5848653316497803
When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8243234157562256
When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.5166808366775513
Correct a wrong macro usage;This patch simplies the code by merging some redundant code;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.647926390171051
this patch stops sending the initial lid state to the userspace;to avoid sending the wrong lid state to the userspace to trigger such kind of wrong suspending;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5098077654838562
There is no need to carry potentially outdated Free Software Foundation mailing address in file headers;since the COPYING file includes it;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6453864574432373
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Contradicts;0.7976068258285522
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.5403246879577637
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Contradicts;0.604333758354187
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8611810803413391
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;dont try to use a non-existent lid device;non-existent;Contradicts;0.6919754147529602
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;Remove button->device pointer;button;Contradicts;0.6091476082801819
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.5566408634185791
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7821044921875
Add ACPI Button event via netlink routine;-;removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Contradicts;0.9874193072319031
Add ACPI Button event via netlink routine;-;add ACPI Button event back via netlink routine;Now ACPI events are sent to userspace via netlink;Contradicts;0.6402150988578796
Add ACPI Button event via netlink routine;-;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.5337446928024292
Add ACPI Button event via netlink routine;-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7191907167434692
Add ACPI Button event via netlink routine;-;Remove button->device pointer;button;Contradicts;0.9239407777786255
removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8578506112098694
This caused ACPI shutdown regression on gentoo;VirtualBox;Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Contradicts;0.5432829856872559
This caused ACPI shutdown regression on gentoo;VirtualBox;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7307009100914001
This caused ACPI shutdown regression on gentoo;VirtualBox;We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.551220715045929
This caused ACPI shutdown regression on gentoo;VirtualBox;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.7079441547393799
add ACPI Button event back via netlink routine;Now ACPI events are sent to userspace via netlink;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6946383714675903
add ACPI Button event back via netlink routine;Now ACPI events are sent to userspace via netlink;Remove button->device pointer;button;Contradicts;0.8712674975395203
fix button driver compile error when CONFIG_PM_SLEEP is undefined;CONFIG_PM_SLEEP is undefined;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.5028511881828308
fix button driver compile error when CONFIG_PM_SLEEP is undefined;CONFIG_PM_SLEEP is undefined;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7081820964813232
fix button driver compile error when CONFIG_PM_SLEEP is undefined;CONFIG_PM_SLEEP is undefined;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5665770173072815
compile error;CONFIG_PM_SLEEP is undefined;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5030245184898376
Fix enabling button GPEs twice;Fix;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8709266781806946
Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.700051486492157
Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8994452953338623
Replace direct inclusions of <acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> with <linux/acpi.h> inclusions and remove some inclusions of those files that arent necessary;incorrect, not necessary;<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;Contradicts;0.7327617406845093
Replace direct inclusions of <acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> with <linux/acpi.h> inclusions and remove some inclusions of those files that arent necessary;incorrect, not necessary;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6285613179206848
Replace direct inclusions of <acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> with <linux/acpi.h> inclusions and remove some inclusions of those files that arent necessary;incorrect, not necessary;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.7577327489852905
Replace direct inclusions of <acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> with <linux/acpi.h> inclusions and remove some inclusions of those files that arent necessary;incorrect, not necessary;Move all the component definitions for drivers to a single shared place, include/acpi/acpi_drivers.h  ;to have a single shared place;Contradicts;0.5468448996543884
<acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> should not be included directly from any files that are built for CONFIG_ACPI unset;because that generally leads to build warnings about undefined symbols in !CONFIG_ACPI builds;<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;Contradicts;0.5422389507293701
<acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> should not be included directly from any files that are built for CONFIG_ACPI unset;because that generally leads to build warnings about undefined symbols in !CONFIG_ACPI builds;Im fairly confident about the coverage of this conversion patch  ;Given the fact that I had only a couple of failures from tests on step 6;Contradicts;0.5108616948127747
<acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> should not be included directly from any files that are built for CONFIG_ACPI unset;because that generally leads to build warnings about undefined symbols in !CONFIG_ACPI builds;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6397019624710083
<acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> should not be included directly from any files that are built for CONFIG_ACPI unset;because that generally leads to build warnings about undefined symbols in !CONFIG_ACPI builds;Move all the component definitions for drivers to a single shared place, include/acpi/acpi_drivers.h  ;to have a single shared place;Contradicts;0.568082332611084
<acpi/acpi.h>, <acpi/acpi_bus.h> and <acpi/acpi_drivers.h> should not be included directly from any files that are built for CONFIG_ACPI unset;because that generally leads to build warnings about undefined symbols in !CONFIG_ACPI builds;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5461583733558655
<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;Update gfp.h and slab.h includes  ;prepare for breaking implicit slab.h inclusion from percpu.h;Contradicts;0.5082129240036011
<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5167182087898254
<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.5048791170120239
<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.6893982291221619
<acpi/acpi_bus.h> be included prior to <acpi/acpi_drivers.h>;so that the acpi_pci_root declarations the latter depends on are always there;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.623755693435669
Use the patch to replace the origin code;provide a better solution;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5035493969917297
Remove useless type argument of driver .remove() operation;useless;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6855998635292053
"The second argument of ACPI driver .remove() operation is only used by the ACPI processor driver
";the value passed to that driver through it is always available from the given struct acpi_device objects removal_type field;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.6934651136398315
"The second argument of ACPI driver .remove() operation is only used by the ACPI processor driver
";the value passed to that driver through it is always available from the given struct acpi_device objects removal_type field;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.8106938004493713
"The second argument of ACPI driver .remove() operation is only used by the ACPI processor driver
";the value passed to that driver through it is always available from the given struct acpi_device objects removal_type field;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5331690907478333
Fix unused function warnings for CONFIG_PM_SLEEP;unused function warnings;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.654670774936676
add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.7064987421035767
add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;CONFIG_GCOV_KERNEL was turned off for all tests and a few more options had to be turned off depending on archs to make things build;my distributed build env didnt work with gcov compiles, like ipr on powerpc/64 which failed due to missing writeq;Contradicts;0.6225244998931885
add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5672277212142944
add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;Contradicts;0.6386982798576355
remove unused procfs I/F;unused;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.5868306159973145
remove unused procfs I/F;unused;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.6263371706008911
Remove unused ACPI button procfs interface;unused;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7043861746788025
Remove unused ACPI button procfs interface;unused;not all ACPI drivers use/want it;they should not have to #undef PREFIX to define their own;Contradicts;0.5392483472824097
Avoid disabling wakeup unnecessarily on remove;-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8012880682945251
Avoid disabling wakeup unnecessarily on remove;-;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.5246842503547668
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;Contradicts;0.9453654885292053
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.5342188477516174
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Contradicts;0.5733252763748169
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7252323627471924
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.6429959535598755
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.5473476648330688
use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7197338342666626
use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.6227280497550964
use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.8795613646507263
use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7308357357978821
Use GPE reference counting to support shared GPEs  ;the wakeup enable mask bits of GPEs are set as soon as the GPEs are enabled to wake up the system;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.6819917559623718
Use GPE reference counting to support shared GPEs  ;the wakeup enable mask bits of GPEs are set as soon as the GPEs are enabled to wake up the system;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.9210445880889893
Use GPE reference counting to support shared GPEs  ;the wakeup enable mask bits of GPEs are set as soon as the GPEs are enabled to wake up the system;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5286849141120911
it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.930239200592041
it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";dont try to use a non-existent lid device;non-existent;Contradicts;0.5821100473403931
it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.576430082321167
it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";dont want such modular code;definitely;Contradicts;0.574056088924408
it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6912830471992493
This will allow us to simplify the GPE handling code quite a bit;that change is too intrusive for 2.6.35;Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Contradicts;0.7825433611869812
This will allow us to simplify the GPE handling code quite a bit;that change is too intrusive for 2.6.35;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6689444184303284
This will allow us to simplify the GPE handling code quite a bit;that change is too intrusive for 2.6.35;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.6739820241928101
This will allow us to simplify the GPE handling code quite a bit;that change is too intrusive for 2.6.35;dont want such modular code;definitely;Contradicts;0.7239538431167603
Update gfp.h and slab.h includes  ;prepare for breaking implicit slab.h inclusion from percpu.h;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.646449625492096
Update gfp.h and slab.h includes  ;prepare for breaking implicit slab.h inclusion from percpu.h;dont want such modular code;definitely;Contradicts;0.5521615147590637
Update gfp.h and slab.h includes  ;prepare for breaking implicit slab.h inclusion from percpu.h;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5377153754234314
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Contradicts;0.665366530418396
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7486816644668579
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.8031954765319824
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.6437935829162598
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.5589122176170349
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5206508636474609
the following script is used as the basis of conversion;As this conversion needs to touch a large number of source files;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5174696445465088
only the necessary includes are there;necessary;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6542844772338867
only the necessary includes are there;necessary;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6780954003334045
put the new include  ;its order conforms to its surrounding;Also remove includes of input.h from non-input sources only for BIT macro definition;non-input sources, BIT macro definition;Contradicts;0.6135749816894531
put the new include  ;its order conforms to its surrounding;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5064347982406616
prints out an error message indicating which .h file needs to be added to the file;the file doesnt have fitting include block;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7366595268249512
prints out an error message indicating which .h file needs to be added to the file;the file doesnt have fitting include block;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6441718339920044
Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Im fairly confident about the coverage of this conversion patch  ;Given the fact that I had only a couple of failures from tests on step 6;Contradicts;0.7878379821777344
Most gfp.h inclusion directives were ignored  ;stuff from gfp.h was usually wildly available and often used in preprocessor macros;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6483570337295532
failures were fixed;Build tests were done on the following configurations;"Invoke with ; as leaving it off confuses Lindent  ";gcc doesnt care;Contradicts;0.5012141466140747
CONFIG_GCOV_KERNEL was turned off for all tests and a few more options had to be turned off depending on archs to make things build;my distributed build env didnt work with gcov compiles, like ipr on powerpc/64 which failed due to missing writeq;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.7512317895889282
CONFIG_GCOV_KERNEL was turned off for all tests and a few more options had to be turned off depending on archs to make things build;my distributed build env didnt work with gcov compiles, like ipr on powerpc/64 which failed due to missing writeq;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5611998438835144
Add more run-time wake-up fields;Add more;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6284760236740112
Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.6649673581123352
Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;Remove button->device pointer;button;Contradicts;0.5898991823196411
Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;leave ->owner as easy-manipulative field;somebody will forget to unpin previous/pin current module when switching ->owner;Contradicts;0.5005738139152527
Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5080415606498718
Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.543700635433197
Introduce a new wake-up flag, always_enabled, for marking devices that should be permanently enabled to generate run-time events  ;devices that should be permanently enabled to generate run-time events;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6689152121543884
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8221305012702942
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Remove button->device pointer;button;Contradicts;0.8266857266426086
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.7968257665634155
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;dont want such modular code;definitely;Contradicts;0.6011377573013306
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.7259440422058105
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.525436520576477
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.8760104775428772
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8899784088134766
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5420217514038086
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;dont want such modular code;definitely;Contradicts;0.5356519222259521
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.5420905947685242
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.6159211993217468
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.7267931699752808
Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;start using GPE from userspace;GPE is already disabled in interrupt context;Contradicts;0.6630831360816956
Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;"Invoke with ; as leaving it off confuses Lindent  ";gcc doesnt care;Contradicts;0.6026275157928467
complain the following warning message;"will

";"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;Contradicts;0.5094721913337708
"This patch is to eliminate the above warning message
";Device PNP0C0D:00 failed to resume: error 1;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5087936520576477
return -ENODEV;theres no lid device present;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6524273157119751
Some drivers need to know when a lid event occurs and get the current status;-;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.7356205582618713
Some drivers need to know when a lid event occurs and get the current status;-;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.5327678918838501
Some drivers need to know when a lid event occurs and get the current status;-;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6478748917579651
we could install either a fixed event handler or a notify handler, but the Linux/ACPI code now handles that for us;We previously needed that so we dont need to worry about it;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.6616414189338684
we could install either a fixed event handler or a notify handler, but the Linux/ACPI code now handles that for us;We previously needed that so we dont need to worry about it;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5910887718200684
Remove button->device pointer;button;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6220230460166931
This patch adds temporaries to cache the acpi_device_hid(), acpi_device_name(), and acpi_device_class() pointers;so we dont have to clutter the code with so many uses of those interfaces;"proc_fops is declared as ""const""";should give some thoughts;Contradicts;0.6047133207321167
This patch adds temporaries to cache the acpi_device_hid(), acpi_device_name(), and acpi_device_class() pointers;so we dont have to clutter the code with so many uses of those interfaces;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.8349640369415283
This patch adds temporaries to cache the acpi_device_hid(), acpi_device_name(), and acpi_device_class() pointers;so we dont have to clutter the code with so many uses of those interfaces;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.5413896441459656
This patch adds temporaries to cache the acpi_device_hid(), acpi_device_name(), and acpi_device_class() pointers;so we dont have to clutter the code with so many uses of those interfaces;Remove unneeded acpi_handle from driver;unneeded;Contradicts;0.517850399017334
This patch adds temporaries to cache the acpi_device_hid(), acpi_device_name(), and acpi_device_class() pointers;so we dont have to clutter the code with so many uses of those interfaces;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.702793538570404
Setting ->owner as done currently (pde->owner = THIS_MODULE) is racy;as correctly noted at bug #12454;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.8064483404159546
leave ->owner as easy-manipulative field;somebody will forget to unpin previous/pin current module when switching ->owner;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.593200147151947
"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;"Create a separate ""historical"" git archive";about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated;Contradicts;0.527715802192688
dont want such modular code;definitely;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5851499438285828
start using GPE from userspace;GPE is already disabled in interrupt context;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5181595683097839
Move all the component definitions for drivers to a single shared place, include/acpi/acpi_drivers.h  ;to have a single shared place;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.5826000571250916
Move all the component definitions for drivers to a single shared place, include/acpi/acpi_drivers.h  ;to have a single shared place;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.8271269202232361
Move all the component definitions for drivers to a single shared place, include/acpi/acpi_drivers.h  ;to have a single shared place;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6931242942810059
"verify by using ""input-events"" from input-utils and just closing and opening the lid";easy;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6864086985588074
use non-racy method for proc entries creation;reduce race conditions in proc entries creation;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.5388475656509399
Use proc_create()/proc_create_data() to make sure that ->proc_fops and ->data be setup;before gluing PDE to main tree;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.843336820602417
Add correct ->owner to proc_fops to fix reading/module unloading race  ;fix reading/module unloading race;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.8556905388832092
Add correct ->owner to proc_fops to fix reading/module unloading race  ;fix reading/module unloading race;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.6318983435630798
Add correct ->owner to proc_fops to fix reading/module unloading race  ;fix reading/module unloading race;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.8102622628211975
Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.5592790246009827
Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6045134663581848
Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5307039022445679
ls bus/acpi/drivers  ;Display the list of ACPI drivers.;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.6758315563201904
ls bus/acpi/drivers  ;Display the list of ACPI drivers.;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6195628643035889
"Invoke with ; as leaving it off confuses Lindent  ";gcc doesnt care;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.6444593667984009
remove unnecessary casts and variable initializations, clean up formatting;unnecessary;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.5384094715118408
Use acpi_devices handle instead of drivers  ;-;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.664434552192688
