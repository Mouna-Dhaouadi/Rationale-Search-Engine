Decision1;Rationale1;Decision2;Rationale2;Relationship;Alpha;similarity_rationales
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.8645511865615845;0.36508381366729736
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9147369265556335;0.27220314741134644
Use different notify handlers for lid and buttons  ;differentiate between lid and buttons;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.815011739730835;0.3686802089214325
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;Drop no longer necessary Acer SW5-012 lid_init_state quirk;no longer necessary;Contradicts;0.851567804813385;0.3214991092681885
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.8511714339256287;0.33490997552871704
Introduce acpi_lid_notify();lid handling in acpi_button_notify() is special;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.9546050429344176;0.5875755548477173
Driver core needs no inform from callee(bus driver) about the result of remove callback;increases separation of concerns;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8569427132606506;0.4625479280948639
"Remove the "" MD60198"" part from the E2215T quirk";the MD60### part of the model number differs per country/batch while all of the E2215T and E2228T models have this issue;This commit adds a quirk for this;as no lid-switch function is better then the interrupt storm;Contradicts;0.8323667645454407;0.423761248588562
"Remove the "" MD60198"" part from the E2215T quirk";the MD60### part of the model number differs per country/batch while all of the E2215T and E2228T models have this issue;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8411511778831482;0.5245858430862427
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;"Fixes: 17e5888e4e18 (""x86: Select HARDIRQS_SW_RESEND on x86"")";"(""x86: Select HARDIRQS_SW_RESEND on x86"")";Contradicts;0.8618293404579163;0.5882037878036499
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.8578787446022034;0.35351884365081787
"Commit 78a5b53e9fb4 (""Input: soc_button_array - work around DSDTs which modify the irqflags"") adds a workaround for DSDTs with a _LID method which play tricks with the irqflags";assuming that the OS is using an irq-type of IRQ_TYPE_LEVEL_LOW;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8366401195526123;0.6626706719398499
we no longer need to disable the lid functionality on the Acer SW5-012;Now that this workaround is in place;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9657790660858154;0.20240527391433716
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.872973620891571;0.5560500621795654
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;this patch stops sending the initial lid state to the userspace;to avoid sending the wrong lid state to the userspace to trigger such kind of wrong suspending;Contradicts;0.8448073267936707;0.4802822768688202
Lets ensure that state updates happen even if userspace closed (or in the future inhibited) input device;state updates happen even if userspace closed (or in the future inhibited) input device;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.844693660736084;0.5042665004730225
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];re-using the existing option;keeps things simple and it will make it much easier to add DMI quirks which can either disable the LID completely or set another non-default lid_init_state value, both of which are necessary on some devices;Contradicts;0.941566288471222;0.08189212530851364
Replace the existing /* fall through */ comments and its variants with the new pseudo-keyword macro fallthrough;[1];"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.8992103338241577;0.16930988430976868
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.8881378173828125;0.3304371237754822
"
The problem here is the accesses to the PBCG and HMCG
";"
these are the pinconf0 registers for the power";Im fairly confident about the coverage of this conversion patch  ;Given the fact that I had only a couple of failures from tests on step 6;Contradicts;0.9643394947052002;0.2460852563381195
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.9343755841255188;0.5504752397537231
Setting lid_init_state to ACPI_BUTTON_LID_INIT_OPEN on the T200TA  ;fixes the unwanted behavior, adds a DMI based quirk;libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;Contradicts;0.8596915602684021;0.6872481107711792
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Contradicts;0.9090687036514282;0.45750662684440613
 the lid_init_state selection needs to be set to ACPI_BUTTON_LID_INIT_OPEN  ;In order for the Linux LID code to work properly with this implementation;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9227952361106871;0.3172403872013092
"Add a new ""disabled"" value for the lid_init_state module option";can be used to disable LID support on devices where it is completely broken;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.809007465839386;0.4983609616756439
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;only trigger acpi_pm_wakeup_event() in the acpi_button_notify() path and dont do that in the acpi_lid_initialize_state() path;To avoid the confusion;Contradicts;0.9652805924415588;0.4969711899757385
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Contradicts;0.8344817161560059;0.5901334881782532
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;this patch stops sending the initial lid state to the userspace;to avoid sending the wrong lid state to the userspace to trigger such kind of wrong suspending;Contradicts;0.9669692516326904;0.3994065523147583
update Lid state unconditionally in the button driver .resume() callback  ;overlooked the resume case;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.902649223804474;0.3775092661380768
Fix an issue in button.lid_init_state=ignore mode;Reported-and-tested-by: Zhao Lijian <lijian.zhao@intel.com>;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8075802326202393;0.3236753046512604
Fix a build warning in the ACPI button driver when CONFIG_PROC_FS is not enabled by marking the unused function as __maybe_unused;not enabled, unused;"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Contradicts;0.9645082354545592;0.5512829422950745
Variants of proc_create{,_data} that directly take a seq_file show callback;drastically reduces the boilerplate code in the callers;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8896327614784241;0.6685274839401245
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Contradicts;0.9552225470542908;0.30347970128059387
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.922550618648529;0.5053271055221558
"The only solution is to add a DMI based blacklist and ignore the LID device on these tablets.
";There is nothing the ACPI button driver (or the gpio code) can do to fix this.;Im fairly confident about the coverage of this conversion patch  ;Given the fact that I had only a couple of failures from tests on step 6;Contradicts;0.930466651916504;0.37117546796798706
adds an acpi_handle_debug call  ;to help debugging this;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.886807918548584;0.45579275488853455
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Contradicts;0.8459145426750183;0.5604110956192017
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;failures were fixed;Build tests were done on the following configurations;Contradicts;0.8032366037368774;0.307424396276474
It breaks docking stations basically;there is no way to have a user-space hwdb to fix that;We no longer need a pointer from struct acpi_button back to the struct acpi_device;no longer need;Contradicts;0.8519871830940247;0.6529994606971741
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;This patch makes it deprecated;lid_init__state=open is more useful than this mode;Contradicts;0.9260413646697998;0.475563108921051
libinput (1.7.0+) can fix the state of the lid switch for us: you need to set the udev property LIBINPUT_ATTR_LID_SWITCH_RELIABILITY to write_open;can fix the state of the lid switch for us;add #ifdefs to prevent them from being built in that case  ;several suspend/resume functions in ACPI drivers are not used for CONFIG_PM_SLEEP unset;Contradicts;0.830618143081665;0.3920445740222931
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;it should not send the complement switch event for the unreliable initial lid state notification;However this mechanism is not suitable for lid_init_state=open/method;Contradicts;0.8293910026550293;0.22357800602912903
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Contradicts;0.8720148205757141;0.26495325565338135
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Contradicts;0.8385393619537354;0.24697843194007874
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8162992000579834;0.299862802028656
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Remove button->device pointer;button;Contradicts;0.8892360925674438;0.34747591614723206
This patch adds a mechanism to insert lid events as a compensation for the platform triggered ones to form a complete event switches  ;in order to make sure that the platform triggered events can always be reliably delivered to the userspace;Add CONFIG_ACPI_PROC_EVENT to allow removal of /proc/acpi/event;to allow removal of /proc/acpi/event;Contradicts;0.8817843198776245;0.28261545300483704
When we removed the procfs dir on error or if the driver is unbound;the two variables acpi_lid_dir and acpi_button_dir were not reset;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8243234157562256;0.5572176575660706
"Mark ACPI buttons (other than the lid) as ""suspended"" during system suspend and report wakeup events on button events";To prevent propagating those events up the stack;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8611810803413391;0.6335421800613403
Add ACPI Button event via netlink routine;-;removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Contradicts;0.9874193072319032;0.45984962582588196
Add ACPI Button event via netlink routine;-;Remove button->device pointer;button;Contradicts;0.9239407777786256;0.790786862373352
removed ACPI Button event which originally was sent to userspace via /proc/acpi/event;Remove the old /proc/acpi/event interface;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8578506112098694;0.6366584300994873
add ACPI Button event back via netlink routine;Now ACPI events are sent to userspace via netlink;Remove button->device pointer;button;Contradicts;0.8712674975395203;0.47369930148124695
Fix enabling button GPEs twice;Fix;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8709266781806946;0.5397182703018188
Button GPEs have been enabled in the acpi_wake_device_init() during boot;the button driver enables them for the second time;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8994452953338623;0.4350598156452179
"The second argument of ACPI driver .remove() operation is only used by the ACPI processor driver
";the value passed to that driver through it is always available from the given struct acpi_device objects removal_type field;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.8106938004493713;0.30271270871162415
Avoid disabling wakeup unnecessarily on remove;-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8012880682945251;0.46850788593292236
Use device wakeup flags for handling ACPI wakeup devices;for handling ACPI wakeup devices;use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;Contradicts;0.9453654885292052;0.5590667128562927
use standard device wakeup flags instead of the special ACPI flags for handling those devices;address this problem;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.8795613646507263;0.7650917172431946
Use GPE reference counting to support shared GPEs  ;the wakeup enable mask bits of GPEs are set as soon as the GPEs are enabled to wake up the system;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.9210445880889891;0.30265146493911743
it is sufficient to set/unset the wakeup mask bits for them during system sleep transitions;"this means that the reference counting of ""wakeup"" GPEs doesnt really make sense";Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.930239200592041;0.6579524278640747
Prepare for this change by updating users of gfp and slab facilities;include those headers directly instead of assuming availability;Better to oops and learn about a bug;than to silently cover it up;Contradicts;0.8031954765319824;0.6415814161300659
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8221305012702942;0.46850788593292236
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;Remove button->device pointer;button;Contradicts;0.8266857266426086;0.790786862373352
Introduce a reference counter for run-wake devices and a function that will initialize all of the run-time wake-up fields for given device.;-;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.8760104775428772;0.5748636722564697
Add an API to allow devices to indicate whether or not they want their devices GPE to be enabled for both runtime and wakeup events;to allow devices to indicate whether or not they want their devices GPE to be enabled;Remove the old GPE type handling entirely  ;Gets rid of various quirks, like the implicit disabling with GPE type setting;Contradicts;0.8899784088134766;0.45003795623779297
This patch adds temporaries to cache the acpi_device_hid(), acpi_device_name(), and acpi_device_class() pointers;so we dont have to clutter the code with so many uses of those interfaces;"rmmoded directories will be empty and return ""."" and "".."" -- no harm";no harm;Contradicts;0.8349640369415283;0.48951345682144165
Setting ->owner as done currently (pde->owner = THIS_MODULE) is racy;as correctly noted at bug #12454;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.8064483404159546;0.5274195671081543
Move all the component definitions for drivers to a single shared place, include/acpi/acpi_drivers.h  ;to have a single shared place;Use acpi_devices handle instead of drivers  ;-;Contradicts;0.8271269202232361;0.6452577710151672
Use proc_create()/proc_create_data() to make sure that ->proc_fops and ->data be setup;before gluing PDE to main tree;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.843336820602417;0.5376063585281372
Add correct ->owner to proc_fops to fix reading/module unloading race  ;fix reading/module unloading race;Re-name acpi_bus_generate_event() to acpi_bus_generate_proc_event()  ;to make sure there is no confusion that it is for /proc/acpi/event only;Contradicts;0.8556905388832092;0.41882967948913574
Add correct ->owner to proc_fops to fix reading/module unloading race  ;fix reading/module unloading race;un-export ACPI_ERROR() -- use printk(KERN_ERR...);use printk(KERN_ERR...);Contradicts;0.8102622628211975;0.5148836970329285
