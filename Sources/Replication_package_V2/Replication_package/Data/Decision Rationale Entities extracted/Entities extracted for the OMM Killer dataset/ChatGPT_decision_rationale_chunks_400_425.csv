Decision;Rationale
fix race when specifying a thread as the oom origin;None
Introduce a new oom_flags_t member in struct signal_struct;To fix this, and will be used for per-thread oom killer flags
None;KSM and swapoff can now use a bit in this member to specify that threads should be killed first in oom conditions without playing around with oom_score_adj
None;None
The range can be represented by the signed short type;This range can be represented by the signed short type with no functional change
The extra space this frees up in struct signal_struct will be used for per-thread oom kill flags in the next patch.;None
Instead of special casing all the possible situations between PF_EXITING getting set and a thread detaching its mm where it may allocate memory, the solution is to give all exiting threads access to memory reserves if they call the oom killer;which probably wouldn't get updated when a change is made to the exit path
allocate, detach its mm, and free the memory it represents;quickly
Instead of only deferring for PF_EXITING and !task->robust_list, give them access to memory reserves;To prevent a potential livelock and avoid the same problem caused by future faults in the exit path
remove deprecated oom_adj;deprecated
The deprecated /proc/<pid>/oom_adj is scheduled for removal this month.;None
By globally defining check_panic_on_oom(), the memcg oom handler can be moved entirely to mm/memcontrol.c;None
Removes the ugly #ifdef in the oom killer and cleans up the code;None
reduce dependency on tasklist_lock;reduce dependency
try to reduce the amount of time the readside is held for oom kills;Since exiting tasks require write_lock_irq(&tasklist_lock) several times
Introduces a separate oom handler for memcgs;So that they do not require tasklist_lock for as much time
significantly reduces the amount of time that it is held;isn't a complete solution to tasklist_lock starvation
introduce helper function to process threads during scan;to process threads during scan
Introduce a helper function to process each thread during the iteration over the tasklist;None
A new return type, enum oom_scan_t, is defined;to determine the future behavior of the iteration
None;None
fix potential killing of thread that is disabled from oom killing;potential killing of thread that is disabled from oom killing
This patch avoids killing current in such a condition and simply falls back to the tasklist scan.;memory still needs to be freed
fix kernel-doc warnings;None
Fix kernel-doc warnings such as;No description found for parameter 'id', Excess function parameter 'mem' description in 'swap_cgroup_record'
