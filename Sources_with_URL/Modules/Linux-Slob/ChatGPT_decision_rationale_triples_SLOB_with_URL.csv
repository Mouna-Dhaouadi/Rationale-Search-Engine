index;Decision;Rationale;URL;url
2;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
3;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
4;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
5;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
6;kmalloc(size) might give us more room than requested;might give us more room than requested;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
7;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
8;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
9;This mismatch between the compiler's view of the buffer length and the code's intention about how much it is going to actually use has already caused problems;caused problems;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
10;"reordering the use of the ""actual size"" information";fix this;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
11;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
12;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://api.github.com/repos/torvalds/linux/git/commits/05a940656e1eb2026d9ee31019d5b47e9545124d;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d
13;Remove export symbol and move declaration to mm/slab.h  ;we don't want to grow its callers;https://api.github.com/repos/torvalds/linux/git/commits/8dfa9d554061873f96335730fb1d403698b2b1b4;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4
14;unify NUMA and UMA version of tracepoints;mm/slab_common;https://api.github.com/repos/torvalds/linux/git/commits/11e9734bcb6a7361943f993eba4e97f5812120d8;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8
16;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://api.github.com/repos/torvalds/linux/git/commits/c45248db04f8e3aca4798d67a394fb9cc2168118;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118
17;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://api.github.com/repos/torvalds/linux/git/commits/f78a03f6e28be0283f73d3c18b54837b638a8ccf;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf
18;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://api.github.com/repos/torvalds/linux/git/commits/b347aa7b57477f71c740e2bbc6d1078a7109ba23;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23
19;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://api.github.com/repos/torvalds/linux/git/commits/d949a8155d139aa890795b802004a196b7f00598;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598
20;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://api.github.com/repos/torvalds/linux/git/commits/d949a8155d139aa890795b802004a196b7f00598;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598
21;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://api.github.com/repos/torvalds/linux/git/commits/d949a8155d139aa890795b802004a196b7f00598;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598
22;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://api.github.com/repos/torvalds/linux/git/commits/88f2ef73fd66491a2f9a82373d22ca6540f23c62;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62
23;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://api.github.com/repos/torvalds/linux/git/commits/88f2ef73fd66491a2f9a82373d22ca6540f23c62;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62
24;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/b01af5c0b0414f96e6c3891e704d1c40faa18813;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813
25;Use unused field for units;instead;https://api.github.com/repos/torvalds/linux/git/commits/b01af5c0b0414f96e6c3891e704d1c40faa18813;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813
26;use struct folio instead of struct page;Where non-slab page can appear;https://api.github.com/repos/torvalds/linux/git/commits/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62
27;don't introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://api.github.com/repos/torvalds/linux/git/commits/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62
28;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://api.github.com/repos/torvalds/linux/git/commits/7213230af5e1e83ff010b3448260b9d3f95dd036;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036
30;Don't build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://api.github.com/repos/torvalds/linux/git/commits/5bb1bb353cfe343fc3c84faf06f72ba309fde541;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541
31;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://api.github.com/repos/torvalds/linux/git/commits/5bb1bb353cfe343fc3c84faf06f72ba309fde541;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541
32;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://api.github.com/repos/torvalds/linux/git/commits/3544de8ee6e4817278b15fe08658de49abf58954;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954
33;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://api.github.com/repos/torvalds/linux/git/commits/3544de8ee6e4817278b15fe08658de49abf58954;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954
34;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
35;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
36;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
37;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
38;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
39;The information printed can depend on kernel configuration;depend on kernel configuration;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
40;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
41;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
42;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://api.github.com/repos/torvalds/linux/git/commits/8e7f37f2aaa56b723a24f6872817cf9c6410b613;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613
44;have some use eventually for annotations in drivers/gpu;I might;https://api.github.com/repos/torvalds/linux/git/commits/95d6c701f4ca7c44dc148d664f604541266a2333;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333
45;Updates gfpflags_allow_blocking();There's a ton of callers all over the place for that already.;https://api.github.com/repos/torvalds/linux/git/commits/95d6c701f4ca7c44dc148d664f604541266a2333;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333
46;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://api.github.com/repos/torvalds/linux/git/commits/d42f3245c7e299e017213fa028c319316bcdb7f4;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4
47;The size of slab memory shouldn't exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://api.github.com/repos/torvalds/linux/git/commits/d42f3245c7e299e017213fa028c319316bcdb7f4;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4
48;I want to use this in a memory allocation tracker in drm for stuff that's tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://api.github.com/repos/torvalds/linux/git/commits/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e
49;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://api.github.com/repos/torvalds/linux/git/commits/59bb47985c1db229ccff8c5deebecd54fc77d2a9;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9
50;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://api.github.com/repos/torvalds/linux/git/commits/59bb47985c1db229ccff8c5deebecd54fc77d2a9;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9
51;patch ensures alignment on all arches and cache sizes;Still;https://api.github.com/repos/torvalds/linux/git/commits/59bb47985c1db229ccff8c5deebecd54fc77d2a9;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9
53;improve memory accounting;improve;https://api.github.com/repos/torvalds/linux/git/commits/6a486c0ad4dcdee3946842c64884d2978bfe2602;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602
54;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://api.github.com/repos/torvalds/linux/git/commits/6a486c0ad4dcdee3946842c64884d2978bfe2602;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602
55;it might look like a memory leak  ;As they also don't appear in /proc/slabinfo;https://api.github.com/repos/torvalds/linux/git/commits/6a486c0ad4dcdee3946842c64884d2978bfe2602;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602
56;"SLAB doesn't actually use page allocator directly
";no change there;https://api.github.com/repos/torvalds/linux/git/commits/6a486c0ad4dcdee3946842c64884d2978bfe2602;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602
58;add three helpers, convert the appropriate places;these three patches;https://api.github.com/repos/torvalds/linux/git/commits/a50b854e073cd3335bbbada8dcff83a857297dd7;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7
59;to find out the size of a potentially huge page;It's unnecessarily hard;https://api.github.com/repos/torvalds/linux/git/commits/a50b854e073cd3335bbbada8dcff83a857297dd7;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7
60;union of slab_list and lru;slab_list and lru are the same bits;https://api.github.com/repos/torvalds/linux/git/commits/adab7b68189d14504e9f690ee7eb7e98af68301b;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b
61;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://api.github.com/repos/torvalds/linux/git/commits/adab7b68189d14504e9f690ee7eb7e98af68301b;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b
62;configure and build (select SLOB allocator);SLOB allocator;https://api.github.com/repos/torvalds/linux/git/commits/adab7b68189d14504e9f690ee7eb7e98af68301b;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b
64;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://api.github.com/repos/torvalds/linux/git/commits/adab7b68189d14504e9f690ee7eb7e98af68301b;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b
65;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://api.github.com/repos/torvalds/linux/git/commits/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a
66;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://api.github.com/repos/torvalds/linux/git/commits/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a
67;remove an unnecessary check for __GFP_ZERO;unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9
68;Remove the unnecessary NULL pointer check;unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9
69;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
71;to be applied to the file;a file by file comparison of the scanner;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
72;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
73;All documentation files were explicitly excluded;explicitly excluded;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
74;the top level COPYING file license applied;both scanners couldn't find any license traces, file was considered to have no license information;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
75;For non */uapi/* files;that summary was;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
76;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
77;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
78;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://api.github.com/repos/torvalds/linux/git/commits/b24413180f5600bcb3bb70fbed5cf186b60864bd;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd
80;reducing the 'irq' states;allows reducing the 'irq' states and will reduce the amount of __bfs() lookups we do;https://api.github.com/repos/torvalds/linux/git/commits/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6
81;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://api.github.com/repos/torvalds/linux/git/commits/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6
82;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://api.github.com/repos/torvalds/linux/git/commits/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac
83;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://api.github.com/repos/torvalds/linux/git/commits/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac
84;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://api.github.com/repos/torvalds/linux/git/commits/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac
85;call synchronize_sched() just once;it's enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://api.github.com/repos/torvalds/linux/git/commits/89e364db71fb5e7fc8d93228152abfa67daf35fa;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa
86;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://api.github.com/repos/torvalds/linux/git/commits/89e364db71fb5e7fc8d93228152abfa67daf35fa;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa
87;Adjust API to return type 'int' instead of previously type 'bool';previously type 'bool';https://api.github.com/repos/torvalds/linux/git/commits/865762a8119e74b5f0e236d2d8eaaf8be9292a06;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06
88;allow future extension of the bulk alloc API;is done to;https://api.github.com/repos/torvalds/linux/git/commits/865762a8119e74b5f0e236d2d8eaaf8be9292a06;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06
89;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://api.github.com/repos/torvalds/linux/git/commits/865762a8119e74b5f0e236d2d8eaaf8be9292a06;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06
90;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://api.github.com/repos/torvalds/linux/git/commits/865762a8119e74b5f0e236d2d8eaaf8be9292a06;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06
92;hiding potentially buggy callers;except temporarily;https://api.github.com/repos/torvalds/linux/git/commits/96db800f5d73cd5c49461253d45766e094f0f8c2;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2
93;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://api.github.com/repos/torvalds/linux/git/commits/484748f0b65a1950b2b93f444a2287e8dd2cedd6;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6
94;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://api.github.com/repos/torvalds/linux/git/commits/484748f0b65a1950b2b93f444a2287e8dd2cedd6;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6
96;Make dead caches discard free slabs immediately;slub;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
97;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
98;resurrects approach first proposed in [1];To fix this issue;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
99;setting kmem_cache's cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
100;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
101;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
103;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
104;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
105;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://api.github.com/repos/torvalds/linux/git/commits/d6e0b7fa11862433773d986b5f995ffdf47ce672;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672
106;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://api.github.com/repos/torvalds/linux/git/commits/61f47105a2c9c60e950ca808b7560f776f9bfa31;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31
107;it's okay to change this situation;default slab allocator, SLUB, doesn't use this technique;https://api.github.com/repos/torvalds/linux/git/commits/61f47105a2c9c60e950ca808b7560f776f9bfa31;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31
108;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated '#if' defintion;After this change, simplify the process and reduce complexity;https://api.github.com/repos/torvalds/linux/git/commits/61f47105a2c9c60e950ca808b7560f776f9bfa31;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31
110;slab_mutex for kmem_cache_shrink is removed;after it's applied, there is no need in taking the slab_mutex;https://api.github.com/repos/torvalds/linux/git/commits/03afc0e25f7fc03537014a770f4c54ebbe63a24c;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c
111;unioned together;Conveniently;https://api.github.com/repos/torvalds/linux/git/commits/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867
112;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://api.github.com/repos/torvalds/linux/git/commits/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867
113;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://api.github.com/repos/torvalds/linux/git/commits/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867
114;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://api.github.com/repos/torvalds/linux/git/commits/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867
115;function naming changes;requires some;https://api.github.com/repos/torvalds/linux/git/commits/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b
116;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://api.github.com/repos/torvalds/linux/git/commits/c1e854e924f354657ea2ad08fd7b38aac81c59b1;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1
118;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://api.github.com/repos/torvalds/linux/git/commits/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1
119;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://api.github.com/repos/torvalds/linux/git/commits/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1
120;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://api.github.com/repos/torvalds/linux/git/commits/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1
121;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://api.github.com/repos/torvalds/linux/git/commits/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34
122;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://api.github.com/repos/torvalds/linux/git/commits/789306e5ad6b3051c263ac2478875efa8bc07462;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462
123;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://api.github.com/repos/torvalds/linux/git/commits/789306e5ad6b3051c263ac2478875efa8bc07462;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462
124;this patch also drops the EXPORT_SYMBOL tag;Since now it's static, inline, header-defined function;https://api.github.com/repos/torvalds/linux/git/commits/242860a47a75b933a79a30f6a40bf4858f4a3ecc;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc
125;Improve trace accuracy;by correctly tracing reported size;https://api.github.com/repos/torvalds/linux/git/commits/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e
127;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://api.github.com/repos/torvalds/linux/git/commits/999d8795d438d396936811b185428d70b7b7de6d;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d
129;Add the function `__kmalloc_track_caller()`  ;This breaks Pekka's slab/next tree;https://api.github.com/repos/torvalds/linux/git/commits/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84
130;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://api.github.com/repos/torvalds/linux/git/commits/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84
132;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://api.github.com/repos/torvalds/linux/git/commits/f3f741019595f1e73564d985f5fe8abcbb98c769;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769
133;This will allow us to push more processing into common code later;improve readability;https://api.github.com/repos/torvalds/linux/git/commits/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce
134;can be done in __kmem_cache_shutdown;What is done there;https://api.github.com/repos/torvalds/linux/git/commits/12c3667fb780e20360ad0bde32dfb3591ef609ad;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad
135;This affects RCU handling;somewhat;https://api.github.com/repos/torvalds/linux/git/commits/12c3667fb780e20360ad0bde32dfb3591ef609ad;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad
136;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://api.github.com/repos/torvalds/linux/git/commits/7c9adf5a5471647f392169ef19d3e81dcfa76045;https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045
137;Fix early boot kernel crash;Slob;https://api.github.com/repos/torvalds/linux/git/commits/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255
138;Remove various small accessors;various small;https://api.github.com/repos/torvalds/linux/git/commits/b5568280c9b9162b384be9d447013b74d682d4b3;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3
139;They are no longer needed;They have become so simple;https://api.github.com/repos/torvalds/linux/git/commits/b5568280c9b9162b384be9d447013b74d682d4b3;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3
140;No need to zero mapping since it is no longer in use;it is no longer in use;https://api.github.com/repos/torvalds/linux/git/commits/690d5777392180fdc05a82c0c7979e50e8d93de8;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8
141;This cleans up numerous of typecasts in slob.c and makes readers aware of slob's use of page struct fields;makes readers aware of slob's use of page struct fields;https://api.github.com/repos/torvalds/linux/git/commits/b8c24c4aef94b1f0daafb450363fef13a1163780;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780
142;cleans up some bitrot in slob.c;Also;https://api.github.com/repos/torvalds/linux/git/commits/b8c24c4aef94b1f0daafb450363fef13a1163780;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780
144;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://api.github.com/repos/torvalds/linux/git/commits/60063497a95e716c9a689af3be2687d261f115b4;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4
145;Fix gfp flags passed to lockdep;lockdep;https://api.github.com/repos/torvalds/linux/git/commits/bd50cfa89153a67429935a15e577a5eb5f10dd1b;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b
146;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://api.github.com/repos/torvalds/linux/git/commits/bd50cfa89153a67429935a15e577a5eb5f10dd1b;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b
147;Adding this mask;fixes the bug;https://api.github.com/repos/torvalds/linux/git/commits/bd50cfa89153a67429935a15e577a5eb5f10dd1b;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b
149;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://api.github.com/repos/torvalds/linux/git/commits/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0
150;The bit should be passed to trace_kmalloc_node()  ;as well;https://api.github.com/repos/torvalds/linux/git/commits/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0
152;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://api.github.com/repos/torvalds/linux/git/commits/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a
155;we don't care about the RCU head state before passing it to call_rcu();anyway;https://api.github.com/repos/torvalds/linux/git/commits/875352c94224c88f5aa28cb77206f993bd31b7a2;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2
156;Remove kmemtrace ftrace plugin;tracing;https://api.github.com/repos/torvalds/linux/git/commits/039ca4e74a1cf60bd7487324a564ecf5c981f254;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254
157;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://api.github.com/repos/torvalds/linux/git/commits/039ca4e74a1cf60bd7487324a564ecf5c981f254;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254
158;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://api.github.com/repos/torvalds/linux/git/commits/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5
159;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://api.github.com/repos/torvalds/linux/git/commits/6484eb3e2a81807722c5f28efef94d8338b7b996;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996
161;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://api.github.com/repos/torvalds/linux/git/commits/1f0532eb617d28f65c93593a1491f662f14f7eac;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac
162;refactor code for future changes;Impact;https://api.github.com/repos/torvalds/linux/git/commits/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b
163;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://api.github.com/repos/torvalds/linux/git/commits/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b
164;use tracepoints;kmemtrace;https://api.github.com/repos/torvalds/linux/git/commits/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87
166;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://api.github.com/repos/torvalds/linux/git/commits/19cefdffbfe0f7e280f21e80875937e8700e99e2;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2
167;fix typo in mm/slob.c;build fix;https://api.github.com/repos/torvalds/linux/git/commits/19cefdffbfe0f7e280f21e80875937e8700e99e2;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2
168;fix lockup in slob_free()  ;lockup;https://api.github.com/repos/torvalds/linux/git/commits/6fb8f424393025674fde7869b59f485d1e352182;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182
169;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://api.github.com/repos/torvalds/linux/git/commits/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57
171;have some improvement  ;the concept is no less complete than discovery of a lock's interrupt contexts;https://api.github.com/repos/torvalds/linux/git/commits/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57
173;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://api.github.com/repos/torvalds/linux/git/commits/b1aabecd55931ee754f6a913969516b26a0e682e;https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e
175;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://api.github.com/repos/torvalds/linux/git/commits/36994e58a48fb8f9651c7dc845a6de298aba5bfc;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc
176;enable and use this tracer;To enable and use this tracer;https://api.github.com/repos/torvalds/linux/git/commits/36994e58a48fb8f9651c7dc845a6de298aba5bfc;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc
177;I find it more readable  ;personal opinion;https://api.github.com/repos/torvalds/linux/git/commits/36994e58a48fb8f9651c7dc845a6de298aba5bfc;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc
178;Drop it  ;if you want;https://api.github.com/repos/torvalds/linux/git/commits/36994e58a48fb8f9651c7dc845a6de298aba5bfc;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc
179;fix bogus ksize calculation fix  ;SLOB;https://api.github.com/repos/torvalds/linux/git/commits/70096a561d1e09120bae1f293f3632cedbfd5c68;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68
180;fixes the previous fix  ;completely wrong on closer inspection;https://api.github.com/repos/torvalds/linux/git/commits/70096a561d1e09120bae1f293f3632cedbfd5c68;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68
182;fix bogus ksize calculation;bogus;https://api.github.com/repos/torvalds/linux/git/commits/85ba94ba0592296053f7f2846812173424afe1cb;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb
184;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://api.github.com/repos/torvalds/linux/git/commits/231367fd9bccbb36309ab5bf5012e11a84231031;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031
185;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://api.github.com/repos/torvalds/linux/git/commits/51cc50685a4275c6a02653670af9f108a64e01cf;https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf
187;record page flag overlays explicitly;slob;https://api.github.com/repos/torvalds/linux/git/commits/9023cb7e8564d95a1893f8cb6895a293be9a71fe;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe
188;Fix to return wrong pointer;Fix;https://api.github.com/repos/torvalds/linux/git/commits/239f49c0800778c863585a103805c58afbad6748;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748
189;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://api.github.com/repos/torvalds/linux/git/commits/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90
190;reduce external fragmentation by using three free lists;slob;https://api.github.com/repos/torvalds/linux/git/commits/20cecbae44528d347c46e71f40650b75e0dcbc8e;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e
191;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://api.github.com/repos/torvalds/linux/git/commits/20cecbae44528d347c46e71f40650b75e0dcbc8e;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e
192;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://api.github.com/repos/torvalds/linux/git/commits/20cecbae44528d347c46e71f40650b75e0dcbc8e;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e
195;fix memory corruption;memory corruption;https://api.github.com/repos/torvalds/linux/git/commits/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41
197;remove useless ctor parameter and reorder parameters;useless;https://api.github.com/repos/torvalds/linux/git/commits/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957
199;Handle that separately in krealloc();separately;https://api.github.com/repos/torvalds/linux/git/commits/ef8b4520bd9f8294ffce9abd6158085bde5dc902;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902
200;let's use unlikely() for the condition check in SLUB's and SLOB's kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so let's use unlikely() to optimize for the common case;https://api.github.com/repos/torvalds/linux/git/commits/2408c55037c3f7d51a8a100025c47595e71b838c;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c
201;reduce list scanning;slob;https://api.github.com/repos/torvalds/linux/git/commits/d6269543ef24aa012aa228c27af3adb074f7b36b;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b
202;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://api.github.com/repos/torvalds/linux/git/commits/d6269543ef24aa012aa228c27af3adb074f7b36b;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b
203;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://api.github.com/repos/torvalds/linux/git/commits/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac
204;Cleanup zeroing allocations;Slab allocators;https://api.github.com/repos/torvalds/linux/git/commits/81cda6626178cd55297831296ba8ecedbfd8b52d;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d
205;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://api.github.com/repos/torvalds/linux/git/commits/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d
206;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://api.github.com/repos/torvalds/linux/git/commits/6cb8f91320d3e720351c21741da795fed580b21b;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b
208;improved alignment handling;improved;https://api.github.com/repos/torvalds/linux/git/commits/553948491c18413928b85a9025b92af80e7d61d6;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6
209;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOB's small minimum alignment;https://api.github.com/repos/torvalds/linux/git/commits/553948491c18413928b85a9025b92af80e7d61d6;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6
210;remove bigblock tracking;slob;https://api.github.com/repos/torvalds/linux/git/commits/d87a133fc21d842e3cc285e6bbff727181abec81;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81
211;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://api.github.com/repos/torvalds/linux/git/commits/d87a133fc21d842e3cc285e6bbff727181abec81;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81
212;rework freelist handling;slob;https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
213;can be slightly faster too;skip almost-full freelist pages completely;https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
215;we don't encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
216;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
217;"align them to word size
";it is best in practice;https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
218;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slob's existing header block;https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
220;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://api.github.com/repos/torvalds/linux/git/commits/95b35127f13661abb0dc3459042cdb417d21e692;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692
222;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://api.github.com/repos/torvalds/linux/git/commits/c59def9f222d44bb7e2f0a559f2906191a0862d7;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7
223;"
Use a destructor will BUG()
";"
Any attempt to";https://api.github.com/repos/torvalds/linux/git/commits/c59def9f222d44bb7e2f0a559f2906191a0862d7;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7
224;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://api.github.com/repos/torvalds/linux/git/commits/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62
225;SLOB to be used on SMP  ;allows;https://api.github.com/repos/torvalds/linux/git/commits/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62
226;fix page order calculation on not 4KB page;-;https://api.github.com/repos/torvalds/linux/git/commits/4ab688c51226188f2d4ad4f789032c107944ef89;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89
227;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://api.github.com/repos/torvalds/linux/git/commits/4ab688c51226188f2d4ad4f789032c107944ef89;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89
228;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://api.github.com/repos/torvalds/linux/git/commits/5af60839909b8e3b28ca7cd7912fa0b23475617f;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f
230;handle SLAB_PANIC flag;slob;https://api.github.com/repos/torvalds/linux/git/commits/bc0055aee40ba40627361d8ffd8530d315920f18;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18
231;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://api.github.com/repos/torvalds/linux/git/commits/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4
232;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://api.github.com/repos/torvalds/linux/git/commits/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4
233;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://api.github.com/repos/torvalds/linux/git/commits/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f
234;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://api.github.com/repos/torvalds/linux/git/commits/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f
235;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://api.github.com/repos/torvalds/linux/git/commits/2e892f43ccb602e8ffad73396a1000f2040c9e0b;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b
237;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://api.github.com/repos/torvalds/linux/git/commits/2e892f43ccb602e8ffad73396a1000f2040c9e0b;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b
238;add several empty functions to slob.c and rename slob's kmalloc to __kmalloc;In order to get a greater set of common functions;https://api.github.com/repos/torvalds/linux/git/commits/2e892f43ccb602e8ffad73396a1000f2040c9e0b;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b
239;Slob does not need any special definitions;since we introduce a fallback case;https://api.github.com/repos/torvalds/linux/git/commits/2e892f43ccb602e8ffad73396a1000f2040c9e0b;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b
240;Redo a lot of comments;Also;https://api.github.com/repos/torvalds/linux/git/commits/2e892f43ccb602e8ffad73396a1000f2040c9e0b;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b
241;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://api.github.com/repos/torvalds/linux/git/commits/133d205a18b7a4d8cb52959c5310f6664277cf61;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61
242;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://api.github.com/repos/torvalds/linux/git/commits/972d1a7b140569084439a81265a0f15b74e924e0;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0
243;simplifies SLOB;at this point slob may be broken;https://api.github.com/repos/torvalds/linux/git/commits/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef
245;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://api.github.com/repos/torvalds/linux/git/commits/75129e297e861e6c61038aa4cdbf604b022de4ff;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff
246;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://api.github.com/repos/torvalds/linux/git/commits/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb
247;fix;SLOB=y && SMP=y fix;https://api.github.com/repos/torvalds/linux/git/commits/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac
249;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://api.github.com/repos/torvalds/linux/git/commits/10cef6029502915bdb3cf0821d425cf9dc30c817;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817
250;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://api.github.com/repos/torvalds/linux/git/commits/10cef6029502915bdb3cf0821d425cf9dc30c817;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817
251;Fix 32-bitness bugs in mm/slob.c;bugs;https://api.github.com/repos/torvalds/linux/git/commits/10cef6029502915bdb3cf0821d425cf9dc30c817;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817
