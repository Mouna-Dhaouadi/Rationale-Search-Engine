;Decision1;Rationale1;URL1;Decision2;Rationale2;URL2;Relationship;Alpha
0;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.53487229347229
1;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6418723464012146
2;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5135068297386169
3;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5518302917480469
4;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.7456427812576294
5;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.7900899648666382
6;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.8149130344390869
7;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Similar;0.5278264284133911
8;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Similar;0.6375168561935425
9;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.6348006129264832
10;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Similar;0.5794300436973572
11;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.7645056843757629
12;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5969138145446777
13;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.5309123992919922
14;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6775524020195007
15;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5332908034324646
16;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6482151746749878
17;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6425695419311523
18;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5700172185897827
19;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6406086087226868
20;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5858138799667358
21;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.638927698135376
22;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6966656446456909
23;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5260738134384155
24;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5372630953788757
25;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.550098180770874
26;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.653404712677002
27;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6404297351837158
28;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6407488584518433
29;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5233994722366333
30;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7181423902511597
31;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7181423902511597
32;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6749247312545776
33;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5978010892868042
34;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5162255764007568
35;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5847480297088623
36;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.543074369430542
37;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5093967318534851
38;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6130133271217346
39;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5038427114486694
40;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5411922931671143
41;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.549001157283783
42;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5377745032310486
43;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5481233596801758
44;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5704849362373352
45;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.560960054397583
46;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5354721546173096
47;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6630275249481201
48;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6526179313659668
49;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6219478845596313
50;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6548805236816406
51;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6736059784889221
52;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.7269774675369263
53;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6888301968574524
54;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.542669415473938
55;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6257460117340088
56;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.622543454170227
57;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6746690273284912
58;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.608916699886322
59;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5772527456283569
60;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6526294946670532
61;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5369778871536255
62;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5245339870452881
63;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5999486446380615
64;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5477080345153809
65;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5333104133605957
66;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6271324753761292
67;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.646416425704956
68;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5378988981246948
69;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5964012742042542
70;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5146876573562622
71;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5745140314102173
72;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.514187753200531
73;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5249128341674805
74;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5835871696472168
75;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5479899644851685
76;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5363712310791016
77;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.532584547996521
78;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6162749528884888
79;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7722823619842529
80;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5621172189712524
81;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5046942234039307
82;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5016177892684937
83;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6122455596923828
84;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5178688168525696
85;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6341201066970825
86;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6142286062240601
87;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5194777250289917
88;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5614193081855774
89;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5607537627220154
90;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5128682851791382
91;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7865117788314819
92;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.5255404710769653
93;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5581967830657959
94;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Similar;0.5183627605438232
95;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Similar;0.5632324814796448
96;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.6231162548065186
97;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5602830052375793
98;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5011668801307678
99;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5820350646972656
100;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6052390336990356
101;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.6014446020126343
102;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5635098218917847
103;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5665580630302429
104;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5199547410011292
105;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5264018177986145
106;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5583944320678711
107;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5098210573196411
108;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5247316956520081
109;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.570640504360199
110;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.585532546043396
111;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.524257481098175
112;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5950440764427185
113;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.602195143699646
114;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6918448209762573
115;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.696395218372345
116;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5879398584365845
117;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5941486358642578
118;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5795729756355286
119;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.7008281350135803
120;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5404223203659058
121;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5334984660148621
122;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5720484852790833
123;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5197278261184692
124;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5657142400741577
125;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5848822593688965
126;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.532930850982666
127;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.533106803894043
128;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6256011128425598
129;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5077905654907227
130;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6259344816207886
131;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5349162817001343
132;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5476274490356445
133;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5386062860488892
134;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5732494592666626
135;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6203266978263855
136;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5368134379386902
137;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5548582077026367
138;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.534186840057373
139;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.695011556148529
140;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5662966966629028
141;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5220228433609009
142;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6013851761817932
143;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5278199911117554
144;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5752583146095276
145;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6270201206207275
146;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5131001472473145
147;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6116943359375
148;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5160397291183472
149;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5362991690635681
150;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5232478976249695
151;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5433547496795654
152;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5422347784042358
153;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5068126320838928
154;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.517796516418457
155;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Similar;0.6014919281005859
156;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.5373569130897522
157;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5106972455978394
158;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.626137912273407
159;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5950875282287598
160;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.580970048904419
161;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5580302476882935
162;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5457409620285034
163;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5279383063316345
164;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5312817096710205
165;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.5121419429779053
166;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5190740823745728
167;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5483883619308472
168;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.513995885848999
169;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5269274711608887
170;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5884134769439697
171;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5213975310325623
172;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5407443046569824
173;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5157613754272461
174;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5339617729187012
175;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6906415224075317
176;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5254981517791748
177;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5017803907394409
178;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5677507519721985
179;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5757149457931519
180;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.6730000972747803
181;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6447312831878662
182;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.603534996509552
183;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5563830137252808
184;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.597774863243103
185;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5634777545928955
186;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.6452856063842773
187;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5022925138473511
188;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5588717460632324
189;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5385567545890808
190;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5951026082038879
191;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6084995269775391
192;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5430884957313538
193;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5262608528137207
194;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6882462501525879
195;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5768510103225708
196;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5156923532485962
197;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5484232902526855
198;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5015202164649963
199;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5022121667861938
200;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5245898365974426
201;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.55916428565979
202;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.577438473701477
203;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5735207796096802
204;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6383203268051147
205;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Similar;0.588596761226654
206;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Similar;0.628648042678833
207;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.6083906888961792
208;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Similar;0.5734495520591736
209;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Similar;0.5171782970428467
210;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Similar;0.5889534950256348
211;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.596767783164978
212;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5585864782333374
213;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5567308664321899
214;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5890443325042725
215;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.6181938648223877
216;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5478424429893494
217;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5589754581451416
218;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5672862529754639
219;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6255633234977722
220;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6117326021194458
221;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5330582857131958
222;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5074681639671326
223;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5609683990478516
224;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5534678101539612
225;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5973488688468933
226;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5973488688468933
227;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5900890827178955
228;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5169918537139893
229;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.52436363697052
230;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5591649413108826
231;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5658798217773438
232;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5761611461639404
233;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6757611632347107
234;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5904647707939148
235;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5157432556152344
236;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5272687077522278
237;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5846315622329712
238;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5372194647789001
239;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5065260529518127
240;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5176730155944824
241;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5297330021858215
242;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5592705011367798
243;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5122091770172119
244;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5459517240524292
245;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5290882587432861
246;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5535762310028076
247;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5833787322044373
248;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5738677978515625
249;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5334697365760803
250;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5871962308883667
251;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5271918177604675
252;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5612707734107971
253;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6848275065422058
254;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6121653318405151
255;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6146008968353271
256;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.514626145362854
257;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5308730006217957
258;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.683756411075592
259;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5094397664070129
260;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5576207637786865
261;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6254438161849976
262;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.608295202255249
263;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6072932481765747
264;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5608859062194824
265;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.646367609500885
266;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5845552682876587
267;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6045336723327637
268;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6247497200965881
269;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5074997544288635
270;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5316159725189209
271;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6071093082427979
272;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5227268934249878
273;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5930243730545044
274;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5644811391830444
275;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5952184796333313
276;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5038458108901978
277;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.532404899597168
278;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5572656393051147
279;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5640139579772949
280;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5405313968658447
281;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5122247338294983
282;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5312297344207764
283;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5612519979476929
284;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5757632255554199
285;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.628538966178894
286;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5657843351364136
287;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6369802951812744
288;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5545855164527893
289;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5020965337753296
290;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5210979580879211
291;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6756417751312256
292;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5450358390808105
293;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.59138023853302
294;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6470956802368164
295;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5506325960159302
296;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5887369513511658
297;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5024719834327698
298;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5125977396965027
299;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.522535502910614
300;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5065271258354187
301;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6053692102432251
302;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5108157992362976
303;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7384662628173828
304;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5252430438995361
305;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5184100866317749
306;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6629445552825928
307;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6616283059120178
308;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.5777120590209961
309;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Similar;0.5105377435684204
310;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Similar;0.5290595293045044
311;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.5340603590011597
312;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.5190901160240173
313;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5493319034576416
314;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5158435106277466
315;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5978596806526184
316;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5862278938293457
317;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5395413637161255
318;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5132941007614136
319;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5680733919143677
320;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5169836282730103
321;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5332580208778381
322;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5328237414360046
323;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5202577114105225
324;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5051947832107544
325;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5616490840911865
326;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5058215856552124
327;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.630028486251831
328;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.630028486251831
329;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6516969203948975
330;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5801428556442261
331;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6289811134338379
332;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6937273740768433
333;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5439776182174683
334;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5744452476501465
335;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6344200372695923
336;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7147942781448364
337;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6071614027023315
338;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6343398690223694
339;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.637427806854248
340;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6075025796890259
341;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5267509818077087
342;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6270523071289062
343;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.6800421476364136
344;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5339057445526123
345;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5889549255371094
346;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5894218683242798
347;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.6253798007965088
348;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5869141817092896
349;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6048128604888916
350;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5344797968864441
351;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5769989490509033
352;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5146584510803223
353;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.572192907333374
354;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6325283050537109
355;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5407518148422241
356;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7452461123466492
357;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.548993706703186
358;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5192252397537231
359;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5942671298980713
360;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6618075966835022
361;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.645638108253479
362;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.534064531326294
363;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.571672260761261
364;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5992895364761353
365;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6755326986312866
366;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5521548390388489
367;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5860556364059448
368;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6071906089782715
369;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.7420717477798462
370;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.620890200138092
371;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5444510579109192
372;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6066686511039734
373;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6225085258483887
374;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5439924001693726
375;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5604143738746643
376;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6469128727912903
377;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5785214900970459
378;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5368164777755737
379;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5807889699935913
380;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5940945148468018
381;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5487800240516663
382;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5229681730270386
383;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5965341925621033
384;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5659397840499878
385;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6210116147994995
386;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5056779384613037
387;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5221133232116699
388;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5993614196777344
389;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5753244161605835
390;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5344507694244385
391;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.650517463684082
392;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5664331912994385
393;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5078063011169434
394;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5372082591056824
395;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6311858296394348
396;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5539189577102661
397;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5678238868713379
398;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5424914360046387
399;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5287387371063232
400;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5151668787002563
401;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6043024063110352
402;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5488046407699585
403;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6770774126052856
404;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5000193119049072
405;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5237002372741699
406;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6157867908477783
407;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6788941621780396
408;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5059555768966675
409;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6732527017593384
410;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.7222229838371277
411;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Similar;0.5546035766601562
412;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Similar;0.5901267528533936
413;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.5465521812438965
414;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.5630778074264526
415;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.507079005241394
416;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5767992734909058
417;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6308447122573853
418;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.5765587687492371
419;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5516421794891357
420;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.522950291633606
421;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5504538416862488
422;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5283768177032471
423;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5465496778488159
424;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5031570196151733
425;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5634616017341614
426;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5836173295974731
427;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5644733905792236
428;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5490992069244385
429;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5477075576782227
430;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6302210092544556
431;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6302210092544556
432;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6700612306594849
433;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5794985294342041
434;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5837228298187256
435;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5942869186401367
436;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5841497182846069
437;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5279562473297119
438;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5327924489974976
439;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6961888074874878
440;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5453236103057861
441;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5289185047149658
442;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6049212217330933
443;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5394278764724731
444;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5626044273376465
445;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6367502212524414
446;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5121307373046875
447;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5019713640213013
448;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5753464102745056
449;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5784884691238403
450;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5722055435180664
451;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6442514061927795
452;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5807015895843506
453;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.513070285320282
454;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6024911403656006
455;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5325325727462769
456;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5515305399894714
457;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5018018484115601
458;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5563534498214722
459;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6182249188423157
460;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6829855442047119
461;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5260831117630005
462;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6482082605361938
463;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5644240379333496
464;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5168251395225525
465;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5537174344062805
466;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5017082691192627
467;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5043457746505737
468;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6701611280441284
469;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5369431972503662
470;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5726251602172852
471;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5599642992019653
472;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5229887962341309
473;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6680511236190796
474;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5762861967086792
475;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5250398516654968
476;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5838088393211365
477;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5922219753265381
478;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.601675808429718
479;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5434690117835999
480;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.6066333055496216
481;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5846900939941406
482;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5686638355255127
483;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5668275952339172
484;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5296933650970459
485;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5404736995697021
486;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6262026429176331
487;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5050877928733826
488;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5861518979072571
489;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7781693339347839
490;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5615370273590088
491;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5960037708282471
492;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5285524725914001
493;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5106425285339355
494;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5106413960456848
495;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6759533286094666
496;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.577954888343811
497;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6379426717758179
498;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5888729095458984
499;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6319682598114014
500;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6553946733474731
501;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Similar;0.6791644096374512
502;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.5331739187240601
503;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.6136487722396851
504;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5153558254241943
505;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5435880422592163
506;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6136558055877686
507;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5451307892799377
508;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5623403787612915
509;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5392193794250488
510;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5076056122779846
511;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6290963888168335
512;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.7234177589416504
513;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5378137230873108
514;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5552985072135925
515;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6013187170028687
516;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6013187170028687
517;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6010802984237671
518;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5682380199432373
519;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5572510957717896
520;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5535967350006104
521;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5134148597717285
522;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5152611136436462
523;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5011498928070068
524;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5569913387298584
525;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5083003044128418
526;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6508801579475403
527;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5814030170440674
528;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5678408145904541
529;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5365746021270752
530;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5143098831176758
531;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5879525542259216
532;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5032562017440796
533;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.50128173828125
534;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5184810757637024
535;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5054322481155396
536;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5580313205718994
537;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5322028994560242
538;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6571955680847168
539;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5422300100326538
540;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5413175821304321
541;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5401828289031982
542;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5354668498039246
543;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6925407648086548
544;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Similar;0.6396620869636536
545;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Similar;0.7337067723274231
546;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.7772455215454102
547;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Similar;0.5684810876846313
548;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Similar;0.5465779900550842
549;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.7928802967071533
550;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5766663551330566
551;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5979686379432678
552;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.691567599773407
553;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.654901385307312
554;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5530201196670532
555;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.534170925617218
556;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.715484082698822
557;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7470756769180298
558;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5865445137023926
559;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5170906782150269
560;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7103263139724731
561;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6893914937973022
562;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5511651039123535
563;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7925420999526978
564;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7925420999526978
565;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6243141889572144
566;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5168818831443787
567;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5875443816184998
568;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5855474472045898
569;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6441648602485657
570;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5805855393409729
571;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5405073165893555
572;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5874961018562317
573;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5134837627410889
574;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6559193134307861
575;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5870232582092285
576;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5692855715751648
577;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5361372828483582
578;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5427826642990112
579;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6667309999465942
580;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6484702825546265
581;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6506484746932983
582;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7172868251800537
583;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6265889406204224
584;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6698011159896851
585;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.8136509656906128
586;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5700930953025818
587;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5885491967201233
588;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.509819507598877
589;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6146615743637085
590;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6570508480072021
591;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7746623754501343
592;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6109825372695923
593;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5697826147079468
594;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7563878893852234
595;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5568473935127258
596;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6035622358322144
597;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5570785999298096
598;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5626834630966187
599;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5208531618118286
600;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6717244386672974
601;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6304110288619995
602;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6287345886230469
603;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7011029720306396
604;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5317986011505127
605;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.642903208732605
606;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5420792698860168
607;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5995609760284424
608;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5710639953613281
609;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5592830777168274
610;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5284641981124878
611;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5795137882232666
612;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5853952169418335
613;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5976850986480713
614;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6562385559082031
615;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5590770244598389
616;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7123129367828369
617;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7137261629104614
618;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6694926023483276
619;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5680086612701416
620;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6307448744773865
621;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.813710629940033
622;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.55975741147995
623;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5260260105133057
624;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5310486555099487
625;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5214345455169678
626;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6015483140945435
627;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5161875486373901
628;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6674020290374756
629;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5641406178474426
630;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7738783955574036
631;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Similar;0.596216082572937
632;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.5167988538742065
633;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Similar;0.7361083030700684
634;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.575852632522583
635;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.7636756896972656
636;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.527011513710022
637;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.649999737739563
638;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6328728199005127
639;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.679208517074585
640;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.6110216379165649
641;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.734376072883606
642;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5796647071838379
643;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6757795810699463
644;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6484131217002869
645;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5796287059783936
646;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5874868631362915
647;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6443052291870117
648;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5423822402954102
649;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.7747225761413574
650;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.596869945526123
651;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5183596014976501
652;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7054174542427063
653;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6764050722122192
654;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6764050722122192
655;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6359946131706238
656;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6580652594566345
657;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5197816491127014
658;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5167951583862305
659;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5999361276626587
660;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7118117809295654
661;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7285565137863159
662;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5296841859817505
663;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.7765388488769531
664;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5585038661956787
665;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7951642274856567
666;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.660494327545166
667;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5034214854240417
668;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5162908434867859
669;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5267683863639832
670;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5558794736862183
671;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5520118474960327
672;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5607185363769531
673;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5396847128868103
674;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6779109239578247
675;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5821400880813599
676;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7856588363647461
677;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5257325768470764
678;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6509772539138794
679;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6719221472740173
680;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7153897285461426
681;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5114777088165283
682;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5941398739814758
683;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5632336139678955
684;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5887877345085144
685;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5530993938446045
686;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7373167276382446
687;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6020622253417969
688;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.59918212890625
689;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6145991086959839
690;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6492580771446228
691;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5526440143585205
692;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6515079736709595
693;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5847660303115845
694;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8384854793548584
695;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7789393067359924
696;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.671162486076355
697;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5178128480911255
698;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.513651967048645
699;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6358298063278198
700;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6550744771957397
701;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5407114028930664
702;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6869605779647827
703;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5057793259620667
704;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6420703530311584
705;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5641783475875854
706;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5765953660011292
707;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7263451814651489
708;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5260617733001709
709;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5336044430732727
710;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7021095156669617
711;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6114822626113892
712;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5103118419647217
713;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7084519267082214
714;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5628746747970581
715;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.632339358329773
716;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5407769680023193
717;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5721657276153564
718;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5021553635597229
719;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7850024700164795
720;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5030987858772278
721;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.583411455154419
722;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6355389952659607
723;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5460383296012878
724;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5773252248764038
725;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5635306239128113
726;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.550316333770752
727;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.8083182573318481
728;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6459118127822876
729;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5733029842376709
730;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6045860648155212
731;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.533646821975708
732;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6832747459411621
733;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7373393774032593
734;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.7062056064605713
735;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5156270265579224
736;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7324743270874023
737;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5782325267791748
738;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Similar;0.631744921207428
739;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Similar;0.575432300567627
740;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.6758701801300049
741;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5141088962554932
742;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.5047457218170166
743;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.580057680606842
744;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6348394751548767
745;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5380178093910217
746;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5885288715362549
747;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6407449245452881
748;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6091365218162537
749;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5301804542541504
750;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7601293325424194
751;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6342678070068359
752;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5279285907745361
753;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6836338043212891
754;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6836338043212891
755;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6350842714309692
756;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5684139728546143
757;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5389336943626404
758;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5687888860702515
759;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6323869824409485
760;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5519652366638184
761;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5430318117141724
762;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5929074883460999
763;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5744298696517944
764;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.642396867275238
765;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5304606556892395
766;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.571872353553772
767;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5293228626251221
768;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6883302927017212
769;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5266085863113403
770;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6005542874336243
771;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5971659421920776
772;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5757690072059631
773;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6226328611373901
774;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5765160322189331
775;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5161845088005066
776;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5374974012374878
777;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6661322116851807
778;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5373862981796265
779;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.526604175567627
780;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6146054267883301
781;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6495811939239502
782;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7040094137191772
783;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5781834125518799
784;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5342223644256592
785;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6925638914108276
786;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5094083547592163
787;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5595695376396179
788;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5319526195526123
789;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5706046223640442
790;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6828420758247375
791;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.7111728191375732
792;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6006513833999634
793;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6672669649124146
794;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5544843673706055
795;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.668960452079773
796;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6001458168029785
797;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6694478988647461
798;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5666710138320923
799;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5568022727966309
800;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5328174829483032
801;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6159582138061523
802;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6184895038604736
803;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5064346194267273
804;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5651763677597046
805;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5414159297943115
806;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6513453722000122
807;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6151452660560608
808;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5884187817573547
809;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6906129717826843
810;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5229039192199707
811;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5614783763885498
812;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7609577178955078
813;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5243538618087769
814;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6172754764556885
815;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5010070204734802
816;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5047745704650879
817;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6040403842926025
818;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5086279511451721
819;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6203327775001526
820;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5830594301223755
821;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7452638149261475
822;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Similar;0.6260138750076294
823;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Similar;0.5186580419540405
824;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.798859179019928
825;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.6245149374008179
826;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5215979814529419
827;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5412400960922241
828;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6742929816246033
829;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5734006762504578
830;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5524998903274536
831;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6750808954238892
832;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5545434951782227
833;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5245233774185181
834;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7221811413764954
835;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7182687520980835
836;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5158435106277466
837;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5645560622215271
838;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5159515142440796
839;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6121776103973389
840;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6999988555908203
841;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6087238788604736
842;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7919121980667114
843;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7919121980667114
844;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.562465488910675
845;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5088799595832825
846;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5097290277481079
847;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6283365488052368
848;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5552623271942139
849;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.631086528301239
850;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6149556636810303
851;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5681818127632141
852;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5697442293167114
853;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5599355697631836
854;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6132012605667114
855;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.7137643098831177
856;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5872519016265869
857;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6170849800109863
858;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7161325216293335
859;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6972216367721558
860;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5811758041381836
861;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5425162315368652
862;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.9312577247619628
863;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7608323693275452
864;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5963587760925293
865;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5696732997894287
866;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.540305495262146
867;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5858282446861267
868;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.662148654460907
869;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7821609973907471
870;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5198239088058472
871;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5504796504974365
872;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7734861373901367
873;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5847524404525757
874;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6300612688064575
875;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5512471199035645
876;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.7075661420822144
877;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6070694327354431
878;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6954253911972046
879;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6667240858078003
880;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5760045051574707
881;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.680789589881897
882;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6769114136695862
883;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5861604809761047
884;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.538678765296936
885;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5210723876953125
886;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5457477569580078
887;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.539013683795929
888;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5763990879058838
889;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5747997164726257
890;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5321803092956543
891;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5142594575881958
892;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5424951314926147
893;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7190017700195312
894;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5570946335792542
895;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5791633725166321
896;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5767892599105835
897;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5301647782325745
898;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5291037559509277
899;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6667220592498779
900;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5019788146018982
901;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5707842111587524
902;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5261777639389038
903;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5582504272460938
904;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.50836181640625
905;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5836466550827026
906;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.653742253780365
907;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.611816942691803
908;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Similar;0.530235767364502
909;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.541799008846283
910;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.6005783081054688
911;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.7727892398834229
912;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5357239842414856
913;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6146215200424194
914;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6799006462097168
915;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.5514088869094849
916;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.742691695690155
917;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.714486837387085
918;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5965723991394043
919;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5793212652206421
920;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.593978762626648
921;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.500349760055542
922;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6393711566925049
923;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5876488089561462
924;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6789743900299072
925;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6767343282699585
926;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5031290054321289
927;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.738903284072876
928;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5505489110946655
929;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5034841299057007
930;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7166885137557983
931;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6284257173538208
932;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6284257173538208
933;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.7116378545761108
934;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6862474679946899
935;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6671454310417175
936;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5181430578231812
937;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.7143315076828003
938;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6923322081565857
939;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6894118785858154
940;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6679452657699585
941;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.642996072769165
942;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6027733087539673
943;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5370875597000122
944;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5674322843551636
945;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6205688714981079
946;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.59818035364151
947;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7872492074966431
948;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6075825691223145
949;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7691503763198853
950;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5140296816825867
951;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5770984888076782
952;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6410108804702759
953;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.597973644733429
954;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6302313804626465
955;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6125731468200684
956;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6244117021560669
957;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7520061731338501
958;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6082526445388794
959;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5477550625801086
960;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5256669521331787
961;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5743845701217651
962;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6445430517196655
963;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6292714476585388
964;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5888656377792358
965;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6489915251731873
966;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6575526595115662
967;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8214273452758789
968;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7198537588119507
969;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7221509218215942
970;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5522811412811279
971;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5342440605163574
972;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6097328662872314
973;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6504829525947571
974;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6805784702301025
975;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6217870712280273
976;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.594107449054718
977;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5283282995223999
978;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5156658887863159
979;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5445301532745361
980;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5948274731636047
981;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6057236194610596
982;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7077279686927795
983;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5724450349807739
984;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5377223491668701
985;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5112483501434326
986;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5031110644340515
987;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5152748227119446
988;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5215448141098022
989;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7389318346977234
990;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6766920685768127
991;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6414363384246826
992;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7185475826263428
993;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6374738812446594
994;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5767377018928528
995;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6927238702774048
996;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6564468145370483
997;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5353875160217285
998;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6844977140426636
999;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6408984661102295
1000;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5274335145950317
1001;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5308612585067749
1002;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5812253952026367
1003;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6437878608703613
1004;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6209392547607422
1005;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7460723519325256
1006;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5358836650848389
1007;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5972200632095337
1008;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6278698444366455
1009;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5774566531181335
1010;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.787392795085907
1011;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5706890821456909
1012;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.649722695350647
1013;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6820746064186096
1014;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7601180076599121
1015;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5550515651702881
1016;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5620551109313965
1017;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Similar;0.6989985704421997
1018;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5850745439529419
1019;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6495010852813721
1020;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5685099959373474
1021;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5251400470733643
1022;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.589097261428833
1023;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5871891975402832
1024;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6830247044563293
1025;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5699847340583801
1026;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6342095732688904
1027;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5573880076408386
1028;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.712043285369873
1029;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5356224775314331
1030;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5109105110168457
1031;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5673249363899231
1032;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5673249363899231
1033;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5126540064811707
1034;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5281001925468445
1035;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5099807381629944
1036;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.515803873538971
1037;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.538288950920105
1038;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.534162163734436
1039;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5135828256607056
1040;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5708613991737366
1041;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.560051679611206
1042;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5596234798431396
1043;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5550199747085571
1044;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5906939506530762
1045;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5702928900718689
1046;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5218773484230042
1047;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5181890726089478
1048;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5285884737968445
1049;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.5572235584259033
1050;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5545159578323364
1051;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5735472440719604
1052;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5334454774856567
1053;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5028020143508911
1054;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6322966814041138
1055;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5496476888656616
1056;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5041799545288086
1057;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5666205883026123
1058;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5348256826400757
1059;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6470746994018555
1060;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5803508758544922
1061;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5727896690368652
1062;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5059934258460999
1063;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6650450229644775
1064;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6611860990524292
1065;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.537655234336853
1066;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5003271698951721
1067;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5784475803375244
1068;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5362090468406677
1069;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5672861337661743
1070;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5658203959465027
1071;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6158920526504517
1072;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5759404897689819
1073;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5177809000015259
1074;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5383941531181335
1075;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5535397529602051
1076;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5215215682983398
1077;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5188642144203186
1078;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5066312551498413
1079;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5066312551498413
1080;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5778231620788574
1081;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5209817290306091
1082;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5139098167419434
1083;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5115637183189392
1084;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5437177419662476
1085;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5195741653442383
1086;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5267974138259888
1087;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.548123836517334
1088;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5188978910446167
1089;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5246599316596985
1090;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5256710052490234
1091;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5359774827957153
1092;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.52234947681427
1093;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5246168375015259
1094;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5327520370483398
1095;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.583149790763855
1096;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5104658603668213
1097;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5843799114227295
1098;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5096306204795837
1099;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5637097954750061
1100;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5452951192855835
1101;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5093724727630615
1102;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5946071147918701
1103;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5591416358947754
1104;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6068297624588013
1105;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5078092217445374
1106;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5659686923027039
1107;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5889368057250977
1108;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5369116067886353
1109;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5465212464332581
1110;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6191884279251099
1111;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5735229253768921
1112;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5678051710128784
1113;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5073032379150391
1114;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5635918378829956
1115;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5138710737228394
1116;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5307660698890686
1117;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5733392238616943
1118;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.5046770572662354
1119;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5299603939056396
1120;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5159693956375122
1121;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6270220279693604
1122;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5253701210021973
1123;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.572080135345459
1124;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5166486501693726
1125;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5350774526596069
1126;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5620202422142029
1127;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5034644603729248
1128;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5848628282546997
1129;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5025440454483032
1130;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5275682210922241
1131;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5387231707572937
1132;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5390391945838928
1133;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5466447472572327
1134;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5792439579963684
1135;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5283880829811096
1136;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5174360275268555
1137;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5183190107345581
1138;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5467542409896851
1139;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5746797919273376
1140;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.535557746887207
1141;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5419158935546875
1142;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5505776405334473
1143;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.544741153717041
1144;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5194872617721558
1145;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5417226552963257
1146;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5158066153526306
1147;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5281410813331604
1148;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5278288125991821
1149;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6579123735427856
1150;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5818238854408264
1151;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.595384955406189
1152;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5521044135093689
1153;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5121221542358398
1154;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5114171504974365
1155;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5117610692977905
1156;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5401062965393066
1157;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6730292439460754
1158;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.6670966148376465
1159;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.543519914150238
1160;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6016905307769775
1161;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5313878655433655
1162;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5605624318122864
1163;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.546343207359314
1164;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5822378396987915
1165;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.7091902494430542
1166;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5451377630233765
1167;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5911054611206055
1168;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5058639645576477
1169;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.530228316783905
1170;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6823097467422485
1171;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5495332479476929
1172;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5755821466445923
1173;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.7186411619186401
1174;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6502604484558105
1175;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5120387077331543
1176;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5786314606666565
1177;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5969372987747192
1178;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6323625445365906
1179;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5048514604568481
1180;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5321660041809082
1181;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7444263100624084
1182;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5500737428665161
1183;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6372003555297852
1184;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7386322021484375
1185;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6157820224761963
1186;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Similar;0.5854617953300476
1187;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5570328235626221
1188;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5876985192298889
1189;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7769036889076233
1190;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6455036401748657
1191;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5445916652679443
1192;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7795999646186829
1193;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6516190767288208
1194;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6407501697540283
1195;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7638596296310425
1196;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5805795192718506
1197;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7339310050010681
1198;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6675053834915161
1199;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5575461387634277
1200;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5110201835632324
1201;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6004195213317871
1202;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5591043829917908
1203;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.512901246547699
1204;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6891111135482788
1205;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7176449298858643
1206;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.601969838142395
1207;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.8133531808853149
1208;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.8133531808853149
1209;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6680160164833069
1210;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5587351322174072
1211;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.534736156463623
1212;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5633673071861267
1213;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5350850820541382
1214;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6342920064926147
1215;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5593600273132324
1216;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5783196687698364
1217;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5726708769798279
1218;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6137950420379639
1219;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6160571575164795
1220;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6428487300872803
1221;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5131139159202576
1222;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6714527606964111
1223;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6431662440299988
1224;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5189110636711121
1225;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6981257200241089
1226;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6280326843261719
1227;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6808474063873291
1228;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7263535261154175
1229;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6197445392608643
1230;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6672653555870056
1231;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.8084738254547119
1232;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6054255962371826
1233;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.598007321357727
1234;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5531477928161621
1235;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5586632490158081
1236;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6972072720527649
1237;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6977277398109436
1238;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7076659202575684
1239;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5070960521697998
1240;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6408045291900635
1241;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7560315728187561
1242;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5458831787109375
1243;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6163808107376099
1244;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5457645058631897
1245;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.7644389867782593
1246;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5868505239486694
1247;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6690511703491211
1248;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.682975172996521
1249;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5559966564178467
1250;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7459779381752014
1251;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7179553508758545
1252;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5899193286895752
1253;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5675400495529175
1254;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5132316946983337
1255;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5718880295753479
1256;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5350486636161804
1257;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5237659811973572
1258;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5262209177017212
1259;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5836561918258667
1260;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5642381310462952
1261;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.557192325592041
1262;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6843898296356201
1263;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5141231417655945
1264;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6002971529960632
1265;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5546315908432007
1266;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5192831754684448
1267;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6158896684646606
1268;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6181315183639526
1269;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5441137552261353
1270;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5933783054351807
1271;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5535733103752136
1272;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5604875087738037
1273;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6861659288406372
1274;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6859017610549927
1275;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5251575708389282
1276;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.710828423500061
1277;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6150627136230469
1278;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.6400123238563538
1279;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.6767547130584717
1280;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.7238553166389465
1281;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.642655611038208
1282;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5186429619789124
1283;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7285028696060181
1284;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.533463180065155
1285;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6306731700897217
1286;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6558343172073364
1287;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7387993931770325
1288;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5362153053283691
1289;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.7718079090118408
1290;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5151215195655823
1291;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5385403633117676
1292;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5196447372436523
1293;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5268806219100952
1294;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7303411960601807
1295;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7395687103271484
1296;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7395687103271484
1297;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.7789391875267029
1298;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.8394695520401001
1299;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5586385726928711
1300;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5321320295333862
1301;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5480102300643921
1302;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6648821830749512
1303;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7498457431793213
1304;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5743066072463989
1305;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.7662349939346313
1306;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5714530348777771
1307;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7211096286773682
1308;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6640415191650391
1309;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5980552434921265
1310;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5961676239967346
1311;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6096838116645813
1312;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6141836643218994
1313;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7052490711212158
1314;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5503100156784058
1315;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.7559296488761902
1316;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7595599889755249
1317;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5381069183349609
1318;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5560479760169983
1319;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6561761498451233
1320;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.749660074710846
1321;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.8120056390762329
1322;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5019422173500061
1323;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6680924892425537
1324;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6135553121566772
1325;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6686257123947144
1326;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7206623554229736
1327;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7657841444015503
1328;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5757113695144653
1329;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5968242883682251
1330;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5187550783157349
1331;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6030118465423584
1332;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5981763601303101
1333;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6750757098197937
1334;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6104239225387573
1335;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6368119120597839
1336;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7089799046516418
1337;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5839022397994995
1338;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7975280284881592
1339;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6536429524421692
1340;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.8113442659378052
1341;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5848220586776733
1342;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6307417154312134
1343;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.541126012802124
1344;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5297610759735107
1345;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7687078714370728
1346;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6953386068344116
1347;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6915779113769531
1348;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6320315003395081
1349;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.556193470954895
1350;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5331029295921326
1351;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6804959774017334
1352;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6817349195480347
1353;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6329190731048584
1354;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.7243492007255554
1355;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5920444130897522
1356;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6238530874252319
1357;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5644693374633789
1358;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6311323642730713
1359;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.716652512550354
1360;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6191461682319641
1361;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.557366132736206
1362;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7572070360183716
1363;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6003859639167786
1364;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5521325469017029
1365;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6531805992126465
1366;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5530999302864075
1367;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6764677166938782
1368;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5508716106414795
1369;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7277389764785767
1370;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5318484902381897
1371;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5623037815093994
1372;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5724453330039978
1373;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6310327053070068
1374;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6630065441131592
1375;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6255343556404114
1376;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5271353125572205
1377;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7066242098808289
1378;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7296043634414673
1379;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.8182327747344971
1380;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.657365620136261
1381;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5906442999839783
1382;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5753227472305298
1383;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.637139618396759
1384;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6705414056777954
1385;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5373952388763428
1386;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6940927505493164
1387;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6031051874160767
1388;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6890233755111694
1389;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5096560716629028
1390;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.616602897644043
1391;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7278150916099548
1392;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5150957107543945
1393;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5847469568252563
1394;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5429322719573975
1395;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.5095234513282776
1396;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.5154058337211609
1397;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5356309413909912
1398;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5351223945617676
1399;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5307315587997437
1400;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5044444799423218
1401;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5086875557899475
1402;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5566389560699463
1403;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6004942655563354
1404;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5472625494003296
1405;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6285617351531982
1406;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6619081497192383
1407;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5560058355331421
1408;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6045678853988647
1409;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Similar;0.5534758567810059
1410;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6676284074783325
1411;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5310698747634888
1412;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5010632276535034
1413;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.500849723815918
1414;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5441492795944214
1415;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5437070727348328
1416;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5264946818351746
1417;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6609379053115845
1418;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6145323514938354
1419;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5590553879737854
1420;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5052229166030884
1421;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5021783709526062
1422;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5883102416992188
1423;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6030455827713013
1424;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6631819605827332
1425;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5989857316017151
1426;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6808886528015137
1427;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5614199638366699
1428;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5804538726806641
1429;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.589783787727356
1430;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5557875633239746
1431;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.507461667060852
1432;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5922541618347168
1433;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.682750940322876
1434;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6648681163787842
1435;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6446298956871033
1436;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5460172891616821
1437;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.56500244140625
1438;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6297687292098999
1439;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5109936594963074
1440;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5373769998550415
1441;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5579404234886169
1442;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5328594446182251
1443;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5599633455276489
1444;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5311902761459351
1445;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5919474959373474
1446;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Similar;0.6867844462394714
1447;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.8281378746032715
1448;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.594693660736084
1449;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5832154750823975
1450;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6466687917709351
1451;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5655828714370728
1452;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5731974840164185
1453;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6366353631019592
1454;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6525053977966309
1455;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5584399700164795
1456;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6117860674858093
1457;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6089866757392883
1458;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5070595741271973
1459;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5837981700897217
1460;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7715612649917603
1461;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6954492330551147
1462;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6954492330551147
1463;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5780870914459229
1464;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5815213918685913
1465;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6110074520111084
1466;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6031081676483154
1467;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6204253435134888
1468;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6769329905509949
1469;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5911204814910889
1470;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6405920386314392
1471;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.665458083152771
1472;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5276498794555664
1473;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5051938891410828
1474;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5109749436378479
1475;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5704125761985779
1476;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5767168998718262
1477;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5470626950263977
1478;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6511553525924683
1479;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6299944519996643
1480;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6714866161346436
1481;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7002161145210266
1482;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5668395757675171
1483;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.7133013606071472
1484;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5511504411697388
1485;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6046611070632935
1486;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5521254539489746
1487;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6039063930511475
1488;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5867031812667847
1489;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6107467412948608
1490;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5941674709320068
1491;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6237462759017944
1492;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5759395360946655
1493;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5539577007293701
1494;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5008278489112854
1495;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5461467504501343
1496;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5327362418174744
1497;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5516557693481445
1498;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6465418338775635
1499;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.537680447101593
1500;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5215530395507812
1501;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5471276044845581
1502;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5301342010498047
1503;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5434712171554565
1504;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5137042999267578
1505;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5228103399276733
1506;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5261789560317993
1507;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5439237952232361
1508;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5344514846801758
1509;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.529938817024231
1510;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6775449514389038
1511;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5318824052810669
1512;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6906823515892029
1513;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6133351922035217
1514;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5013525485992432
1515;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6121811866760254
1516;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.576685905456543
1517;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6569029688835144
1518;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5892064571380615
1519;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5668046474456787
1520;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6340492367744446
1521;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5909303426742554
1522;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5445461869239807
1523;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6009418964385986
1524;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7402642965316772
1525;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6356565952301025
1526;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6171423196792603
1527;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5404841303825378
1528;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.548835277557373
1529;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5641860365867615
1530;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5000635981559753
1531;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5790127515792847
1532;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5122313499450684
1533;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5390525460243225
1534;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5596809387207031
1535;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5143136978149414
1536;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5859247446060181
1537;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5921982526779175
1538;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6609982848167419
1539;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5151180028915405
1540;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Similar;0.6684018969535828
1541;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.8277384042739868
1542;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5979568958282471
1543;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5534290075302124
1544;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6058961153030396
1545;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6102157235145569
1546;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.64646315574646
1547;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6713414192199707
1548;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6521058678627014
1549;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5741233825683594
1550;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5532256364822388
1551;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.595368504524231
1552;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.7251399755477905
1553;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5647467374801636
1554;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5046294331550598
1555;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5473531484603882
1556;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6497511863708496
1557;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5780676603317261
1558;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7214657664299011
1559;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5611203908920288
1560;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6604769229888916
1561;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5382673740386963
1562;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5078405141830444
1563;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6315010786056519
1564;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6953808069229126
1565;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5964651107788086
1566;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6005698442459106
1567;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5022435784339905
1568;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5793331861495972
1569;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6210014820098877
1570;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5116918087005615
1571;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6817448139190674
1572;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6506889462471008
1573;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6519663333892822
1574;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5481374263763428
1575;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.53741455078125
1576;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5221447944641113
1577;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7791882753372192
1578;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7710202932357788
1579;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.630013644695282
1580;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5247560739517212
1581;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6342121362686157
1582;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5889071226119995
1583;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6140351891517639
1584;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5158550143241882
1585;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6203519105911255
1586;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5546852350234985
1587;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5059608221054077
1588;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5440039038658142
1589;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.5688091516494751
1590;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5486704111099243
1591;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6336796283721924
1592;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.580051064491272
1593;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5009410977363586
1594;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6184651851654053
1595;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5524171590805054
1596;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5511360168457031
1597;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5956764221191406
1598;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5766037106513977
1599;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.640465259552002
1600;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.591576874256134
1601;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.8131656646728516
1602;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6490476727485657
1603;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6490476727485657
1604;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5584948062896729
1605;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5792443752288818
1606;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.570615291595459
1607;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5645449161529541
1608;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5688358545303345
1609;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6152220964431763
1610;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.623449444770813
1611;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6687698364257812
1612;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6420178413391113
1613;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5292817950248718
1614;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5371376276016235
1615;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5989328026771545
1616;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5507346391677856
1617;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5843125581741333
1618;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5784538984298706
1619;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6303715705871582
1620;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6198477745056152
1621;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5827692747116089
1622;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5384656190872192
1623;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6234326362609863
1624;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5045730471611023
1625;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5266308188438416
1626;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5247014164924622
1627;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5100944638252258
1628;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.544349193572998
1629;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5804569721221924
1630;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5350737571716309
1631;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5249553322792053
1632;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5143246650695801
1633;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5043346881866455
1634;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5748992562294006
1635;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5788851380348206
1636;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5232610702514648
1637;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5388727188110352
1638;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5127618908882141
1639;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5596930980682373
1640;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6274751424789429
1641;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.543932318687439
1642;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5040050745010376
1643;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5965164303779602
1644;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5702317953109741
1645;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5515168905258179
1646;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5007538199424744
1647;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5500643849372864
1648;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.563876748085022
1649;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5544165372848511
1650;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.590174674987793
1651;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6665797233581543
1652;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5785727500915527
1653;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6128756999969482
1654;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5494879484176636
1655;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5369998216629028
1656;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6375240683555603
1657;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5457050800323486
1658;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5547616481781006
1659;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6268949508666992
1660;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5111666917800903
1661;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5627897381782532
1662;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.655758261680603
1663;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Similar;0.6144428253173828
1664;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5802767276763916
1665;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5487417578697205
1666;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.575487494468689
1667;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5489680767059326
1668;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5448712110519409
1669;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.617285966873169
1670;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5616416931152344
1671;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6613566875457764
1672;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5085064172744751
1673;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5085064172744751
1674;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6736389398574829
1675;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6398003697395325
1676;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6177057027816772
1677;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5366336107254028
1678;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6906110048294067
1679;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5409371256828308
1680;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5444436073303223
1681;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5384299159049988
1682;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6246964931488037
1683;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6326484084129333
1684;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5190081000328064
1685;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5040223002433777
1686;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5523011684417725
1687;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7015863060951233
1688;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6414995193481445
1689;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6602506041526794
1690;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5229190587997437
1691;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5091447830200195
1692;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5139473080635071
1693;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.527259886264801
1694;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5959445834159851
1695;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5812918543815613
1696;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5280992984771729
1697;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.711050271987915
1698;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.653346836566925
1699;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.577135443687439
1700;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5993525981903076
1701;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.541469395160675
1702;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5238507986068726
1703;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5081227421760559
1704;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.553399920463562
1705;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.540438175201416
1706;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5442805886268616
1707;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5206493735313416
1708;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5275906920433044
1709;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5369374752044678
1710;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5406486988067627
1711;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5883901119232178
1712;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5857547521591187
1713;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6815977096557617
1714;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6314880847930908
1715;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.514134407043457
1716;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5912894010543823
1717;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5657005906105042
1718;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5138849020004272
1719;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6353986263275146
1720;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5390230417251587
1721;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7859430313110352
1722;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5624222755432129
1723;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7304446697235107
1724;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5065924525260925
1725;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6314363479614258
1726;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5809987783432007
1727;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6476122736930847
1728;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6207447052001953
1729;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5634478330612183
1730;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5448057651519775
1731;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.7550264596939087
1732;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6725025177001953
1733;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5026918053627014
1734;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.5183326005935669
1735;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5526158809661865
1736;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6386033892631531
1737;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5929677486419678
1738;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.558819591999054
1739;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6284334659576416
1740;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5043423771858215
1741;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.8202522993087769
1742;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5031487345695496
1743;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5791143774986267
1744;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5960149765014648
1745;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5586742162704468
1746;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5586742162704468
1747;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.7678171992301941
1748;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.7464447021484375
1749;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5229030251502991
1750;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5426372289657593
1751;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5989855527877808
1752;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7783631682395935
1753;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.684233546257019
1754;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.641372561454773
1755;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6865208745002747
1756;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5743881464004517
1757;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7327883243560791
1758;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5499327182769775
1759;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5360109210014343
1760;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Similar;0.5301044583320618
1761;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5949962139129639
1762;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5820246934890747
1763;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6552164554595947
1764;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.532715916633606
1765;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5920864343643188
1766;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7570770978927612
1767;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5089215636253357
1768;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6425259113311768
1769;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7748516798019409
1770;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5819226503372192
1771;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5004386305809021
1772;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5372679233551025
1773;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5610688924789429
1774;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5160074234008789
1775;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6468349099159241
1776;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5483918786048889
1777;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.799201250076294
1778;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5403883457183838
1779;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.7439603805541992
1780;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6892983317375183
1781;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6474775075912476
1782;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5566854476928711
1783;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5153331160545349
1784;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6158841848373413
1785;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5943345427513123
1786;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7570401430130005
1787;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7812281250953674
1788;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6840578317642212
1789;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6738417744636536
1790;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5328459739685059
1791;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5030831098556519
1792;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6020738482475281
1793;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.606089174747467
1794;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.612078070640564
1795;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7074331045150757
1796;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6057609915733337
1797;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6341883540153503
1798;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7774733304977417
1799;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5232225060462952
1800;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.634727954864502
1801;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5069599151611328
1802;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6088870763778687
1803;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6701899766921997
1804;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5780113935470581
1805;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7792649269104004
1806;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5982683897018433
1807;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5581476092338562
1808;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.8099866509437561
1809;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5801151990890503
1810;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7473866939544678
1811;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5336312651634216
1812;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6871528029441833
1813;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7150959968566895
1814;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5294241309165955
1815;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6063270568847656
1816;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5356690287590027
1817;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6450344324111938
1818;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6155887842178345
1819;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5691132545471191
1820;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6140625476837158
1821;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.614704966545105
1822;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7408998012542725
1823;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6315222978591919
1824;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.532528281211853
1825;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5553227663040161
1826;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6654032468795776
1827;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5245410799980164
1828;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7049516439437866
1829;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5269838571548462
1830;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5849112272262573
1831;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5859577655792236
1832;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5323647856712341
1833;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6977389454841614
1834;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5317451357841492
1835;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5078452229499817
1836;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Similar;0.6963375806808472
1837;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5973494648933411
1838;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5394837856292725
1839;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6108911037445068
1840;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5983448624610901
1841;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5160762071609497
1842;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5534330606460571
1843;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6463555097579956
1844;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5768409967422485
1845;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5915147066116333
1846;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5277882814407349
1847;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5733276605606079
1848;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6222772598266602
1849;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.560840904712677
1850;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.604118287563324
1851;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6012617349624634
1852;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6012617349624634
1853;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5025418996810913
1854;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5678004026412964
1855;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6149817705154419
1856;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5214446783065796
1857;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5784547924995422
1858;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5554293990135193
1859;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5279096961021423
1860;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.525231659412384
1861;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5235141515731812
1862;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5003266334533691
1863;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.699074387550354
1864;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5639615058898926
1865;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5788756608963013
1866;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5948936343193054
1867;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5574735403060913
1868;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6428554058074951
1869;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.549439013004303
1870;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5971416234970093
1871;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5884057283401489
1872;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6140931248664856
1873;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7492614984512329
1874;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5976527333259583
1875;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6212208271026611
1876;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5900965332984924
1877;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6729249954223633
1878;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5707765817642212
1879;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5620908737182617
1880;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6164924502372742
1881;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6022571325302124
1882;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5480345487594604
1883;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5133652687072754
1884;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5761346817016602
1885;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5615012049674988
1886;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.562219500541687
1887;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5106306076049805
1888;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5688232183456421
1889;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5687406063079834
1890;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5669021606445312
1891;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6083884239196777
1892;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5890459418296814
1893;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5572627186775208
1894;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6534832715988159
1895;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.549217164516449
1896;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.801626980304718
1897;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6149126291275024
1898;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.6784118413925171
1899;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.695119321346283
1900;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6658048629760742
1901;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5578688383102417
1902;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5524591207504272
1903;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5026025772094727
1904;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5058496594429016
1905;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5910748243331909
1906;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6650002598762512
1907;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5353173017501831
1908;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6445168852806091
1909;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5724058151245117
1910;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5437806248664856
1911;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5391007661819458
1912;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6484275460243225
1913;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5896972417831421
1914;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6431660652160645
1915;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5677507519721985
1916;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6298695802688599
1917;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6975618600845337
1918;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6413705348968506
1919;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6479743123054504
1920;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6215790510177612
1921;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6707847118377686
1922;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5762686729431152
1923;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5074769258499146
1924;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5532640218734741
1925;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5124902129173279
1926;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6113036870956421
1927;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5529114007949829
1928;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6476237773895264
1929;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5517160296440125
1930;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5310978293418884
1931;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6077333092689514
1932;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5566015243530273
1933;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5192052721977234
1934;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.547078013420105
1935;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5801167488098145
1936;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5567034482955933
1937;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5038027167320251
1938;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6025476455688477
1939;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5001081228256226
1940;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.51853346824646
1941;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6254997253417969
1942;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5498075485229492
1943;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5336616039276123
1944;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5623518228530884
1945;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6291106343269348
1946;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5154959559440613
1947;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6295890808105469
1948;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5387973785400391
1949;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5896332859992981
1950;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5161507725715637
1951;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.7634607553482056
1952;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5570195913314819
1953;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5976382493972778
1954;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5021330118179321
1955;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.518723726272583
1956;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5672117471694946
1957;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6257871389389038
1958;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6120216846466064
1959;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5233774185180664
1960;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5032829642295837
1961;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6246088743209839
1962;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.545256495475769
1963;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5539859533309937
1964;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5504146218299866
1965;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6006625890731812
1966;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5150348544120789
1967;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6590595245361328
1968;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6008721590042114
1969;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.523583710193634
1970;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5563446283340454
1971;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5653397440910339
1972;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5864990949630737
1973;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5129930973052979
1974;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.659237802028656
1975;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5804731845855713
1976;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6081588268280029
1977;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6624901294708252
1978;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6382734775543213
1979;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5537770986557007
1980;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7766838073730469
1981;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6397975087165833
1982;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5450652837753296
1983;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5864274501800537
1984;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7401120066642761
1985;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.563807487487793
1986;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7086617350578308
1987;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6147326827049255
1988;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.525124192237854
1989;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6031070351600647
1990;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5947228074073792
1991;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.594099760055542
1992;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6677060723304749
1993;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6338297128677368
1994;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.8057849407196045
1995;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.8057849407196045
1996;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5567534565925598
1997;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6919450163841248
1998;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5363699197769165
1999;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6027198433876038
2000;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5938705205917358
2001;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6828147768974304
2002;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.695706844329834
2003;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.580198347568512
2004;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5653636455535889
2005;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6234575510025024
2006;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5621482133865356
2007;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5816706418991089
2008;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.521815299987793
2009;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5061918497085571
2010;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6893725991249084
2011;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5960474014282227
2012;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5852174758911133
2013;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5202085971832275
2014;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5667824149131775
2015;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5004588961601257
2016;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6562633514404297
2017;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6224322319030762
2018;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7339864373207092
2019;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.8035950660705566
2020;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6022828221321106
2021;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5229710340499878
2022;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6884207129478455
2023;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7355273962020874
2024;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6510845422744751
2025;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6593011617660522
2026;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.6273124814033508
2027;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5447332859039307
2028;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6047627329826355
2029;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.7204272150993347
2030;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.665560245513916
2031;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6932876706123352
2032;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5048672556877136
2033;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6785533428192139
2034;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7144043445587158
2035;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6004518866539001
2036;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6733616590499878
2037;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5655384063720703
2038;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6846857070922852
2039;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5623038411140442
2040;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7176769971847534
2041;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7125203609466553
2042;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5703166723251343
2043;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7061660289764404
2044;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6423105001449585
2045;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5551791191101074
2046;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5774857401847839
2047;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5612739324569702
2048;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.532265841960907
2049;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5720994472503662
2050;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5804576873779297
2051;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5336827635765076
2052;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5647042989730835
2053;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5802336931228638
2054;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5706640481948853
2055;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6053261756896973
2056;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5760510563850403
2057;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.580026388168335
2058;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5748286843299866
2059;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5163344740867615
2060;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5478693246841431
2061;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6610420942306519
2062;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6150370836257935
2063;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5544456243515015
2064;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5860451459884644
2065;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5586894750595093
2066;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.603870153427124
2067;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5856212377548218
2068;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.607559084892273
2069;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5524295568466187
2070;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.547694206237793
2071;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7001829743385315
2072;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.566441535949707
2073;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5748581886291504
2074;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5894073247909546
2075;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6651692390441895
2076;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5815739631652832
2077;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7337374091148376
2078;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6139440536499023
2079;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.564894437789917
2080;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7089349031448364
2081;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6687618494033813
2082;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7560255527496338
2083;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5261535048484802
2084;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.603979229927063
2085;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6795414686203003
2086;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5931591391563416
2087;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5711413025856018
2088;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5961326360702515
2089;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.542352557182312
2090;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5722461938858032
2091;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6124858856201172
2092;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.565641462802887
2093;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5625967979431152
2094;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5772697925567627
2095;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5772697925567627
2096;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5255681276321411
2097;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5179484486579895
2098;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.541488766670227
2099;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6238545179367065
2100;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.600616455078125
2101;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5733229517936707
2102;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5505527257919312
2103;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.620142936706543
2104;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5325257778167725
2105;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5236124396324158
2106;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.627570390701294
2107;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6402870416641235
2108;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5169808268547058
2109;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6506055593490601
2110;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5045132637023926
2111;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5068827867507935
2112;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.512079119682312
2113;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5401980876922607
2114;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5421226024627686
2115;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5113784670829773
2116;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5800434947013855
2117;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5791756510734558
2118;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6340850591659546
2119;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5045679211616516
2120;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.6404725313186646
2121;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6554558277130127
2122;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6431124210357666
2123;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6649890542030334
2124;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5800452828407288
2125;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5307981371879578
2126;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.587992787361145
2127;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5374019145965576
2128;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5678086280822754
2129;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6615813970565796
2130;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5480879545211792
2131;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6178423762321472
2132;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5212305188179016
2133;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6104520559310913
2134;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6878466606140137
2135;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5608464479446411
2136;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5467065572738647
2137;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6890928745269775
2138;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5603842735290527
2139;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5722947120666504
2140;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5778169631958008
2141;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5136644244194031
2142;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6520506143569946
2143;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6328808069229126
2144;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5594837665557861
2145;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5150876045227051
2146;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5695939660072327
2147;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5153505802154541
2148;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6527913808822632
2149;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5423754453659058
2150;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5455641746520996
2151;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5509775876998901
2152;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6520099639892578
2153;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5221805572509766
2154;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.551912784576416
2155;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6179060935974121
2156;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5514762997627258
2157;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6335334181785583
2158;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6058542728424072
2159;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5267844200134277
2160;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5658926367759705
2161;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.6711547374725342
2162;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5362610816955566
2163;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5079278349876404
2164;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6529985666275024
2165;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5228331089019775
2166;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5628229379653931
2167;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5082414150238037
2168;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5848017930984497
2169;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6200048923492432
2170;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5140413045883179
2171;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6217597723007202
2172;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5294942259788513
2173;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5178999900817871
2174;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5302444696426392
2175;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6051949262619019
2176;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5685970783233643
2177;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.6238018870353699
2178;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5396097302436829
2179;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.6275322437286377
2180;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5102221369743347
2181;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5121278166770935
2182;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6021542549133301
2183;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5326778888702393
2184;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5111085176467896
2185;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5036307573318481
2186;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5036307573318481
2187;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5164005756378174
2188;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5630136132240295
2189;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5652177333831787
2190;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5560335516929626
2191;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5155379176139832
2192;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5718544125556946
2193;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.689391016960144
2194;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Similar;0.5318893194198608
2195;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5672948956489563
2196;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5907270908355713
2197;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6345301866531372
2198;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5744285583496094
2199;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6453732252120972
2200;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5006629228591919
2201;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5333734154701233
2202;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5664259195327759
2203;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5361131429672241
2204;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5580955147743225
2205;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5613971948623657
2206;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5432731509208679
2207;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5142216682434082
2208;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5228079557418823
2209;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5284996628761292
2210;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5412209033966064
2211;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5583625435829163
2212;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5100803375244141
2213;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5117250084877014
2214;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5765297412872314
2215;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5627671480178833
2216;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5130513906478882
2217;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5217310190200806
2218;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5397483110427856
2219;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5130723714828491
2220;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5428627729415894
2221;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5803924798965454
2222;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5589020252227783
2223;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5688472986221313
2224;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5334095358848572
2225;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5377967357635498
2226;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5027590990066528
2227;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5117132663726807
2228;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5425450801849365
2229;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5334150791168213
2230;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7160589694976807
2231;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5691231489181519
2232;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.7510339021682739
2233;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.569413423538208
2234;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7104259133338928
2235;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6747732162475586
2236;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5990214347839355
2237;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5612962245941162
2238;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.501204252243042
2239;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5034952163696289
2240;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6622743606567383
2241;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6812954545021057
2242;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6012839078903198
2243;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7764564752578735
2244;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.7764564752578735
2245;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5388932228088379
2246;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6926993131637573
2247;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5390006899833679
2248;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5223103761672974
2249;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5718693137168884
2250;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6788543462753296
2251;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.600976824760437
2252;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6064829230308533
2253;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5581822395324707
2254;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6341211795806885
2255;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5394164323806763
2256;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5099562406539917
2257;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5604861378669739
2258;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5412046909332275
2259;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.513443112373352
2260;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5803713798522949
2261;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5028970837593079
2262;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6068916916847229
2263;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5311303734779358
2264;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5341372489929199
2265;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.549461841583252
2266;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6025382280349731
2267;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.633147656917572
2268;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.668394923210144
2269;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5970290899276733
2270;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6613484025001526
2271;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5588555335998535
2272;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5867178440093994
2273;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6074585914611816
2274;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7157706022262573
2275;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5583823919296265
2276;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6685818433761597
2277;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6312791109085083
2278;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5496988296508789
2279;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.574177622795105
2280;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5186856985092163
2281;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6138250827789307
2282;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6150541305541992
2283;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6828028559684753
2284;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6574214100837708
2285;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5285528302192688
2286;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6081493496894836
2287;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.727520227432251
2288;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6419102549552917
2289;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5586241483688354
2290;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5992990732192993
2291;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6516208052635193
2292;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6269597411155701
2293;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6986734867095947
2294;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7258086204528809
2295;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6541125774383545
2296;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6803911924362183
2297;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6429154872894287
2298;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6194782257080078
2299;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5935317277908325
2300;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5276322364807129
2301;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5888504981994629
2302;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5823779106140137
2303;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5230991840362549
2304;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5680539011955261
2305;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5244120359420776
2306;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6191245317459106
2307;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5404069423675537
2308;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5117253661155701
2309;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5306955575942993
2310;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5294744968414307
2311;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5415500402450562
2312;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.538246750831604
2313;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5787973403930664
2314;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6486562490463257
2315;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6776276230812073
2316;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6067395210266113
2317;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5001246929168701
2318;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.705425500869751
2319;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6496202349662781
2320;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5403149724006653
2321;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.586609959602356
2322;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5541250705718994
2323;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5739554166793823
2324;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7173829674720764
2325;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5563942790031433
2326;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.639029860496521
2327;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5539928674697876
2328;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6233115196228027
2329;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5482001304626465
2330;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5993540287017822
2331;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6687581539154053
2332;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5653833746910095
2333;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.657855212688446
2334;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5200884342193604
2335;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.6082510948181152
2336;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.726136326789856
2337;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5870898962020874
2338;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6109962463378906
2339;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5359039902687073
2340;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5194461345672607
2341;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5888161659240723
2342;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5078911781311035
2343;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6152772307395935
2344;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5365533828735352
2345;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5132588744163513
2346;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5720123648643494
2347;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5138262510299683
2348;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.609490156173706
2349;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6087349653244019
2350;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6087349653244019
2351;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.7070376873016357
2352;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5248123407363892
2353;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5361804962158203
2354;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5108516216278076
2355;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5271610617637634
2356;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.628553569316864
2357;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5471860766410828
2358;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5439324378967285
2359;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5290509462356567
2360;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5994454026222229
2361;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5607286095619202
2362;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5162680149078369
2363;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5511775016784668
2364;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6063587665557861
2365;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5151731967926025
2366;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5709573030471802
2367;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6100086569786072
2368;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6282823085784912
2369;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.64518141746521
2370;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5014826059341431
2371;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5855194330215454
2372;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6351588368415833
2373;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5137025117874146
2374;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5527026653289795
2375;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5768294334411621
2376;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5032376050949097
2377;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.512001633644104
2378;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5131120085716248
2379;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.712997317314148
2380;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.6363319754600525
2381;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5397794246673584
2382;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.7122583389282227
2383;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6097773313522339
2384;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.570233166217804
2385;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.520904541015625
2386;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5931804180145264
2387;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.607555627822876
2388;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5285906791687012
2389;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6663364171981812
2390;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5496537685394287
2391;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5344884395599365
2392;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6186978220939636
2393;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5289738178253174
2394;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.548369824886322
2395;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5259624719619751
2396;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6224033832550049
2397;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5947732925415039
2398;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5319068431854248
2399;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5309019088745117
2400;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5330274701118469
2401;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5362704992294312
2402;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5273901224136353
2403;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5950859785079956
2404;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5062776207923889
2405;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5100523829460144
2406;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5300388336181641
2407;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5777554512023926
2408;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6239399909973145
2409;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.551250159740448
2410;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5157135128974915
2411;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6801626086235046
2412;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5776021480560303
2413;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5046048164367676
2414;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6169149279594421
2415;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5167081952095032
2416;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5655238628387451
2417;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5107899904251099
2418;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.522856593132019
2419;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5164732933044434
2420;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6053856611251831
2421;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5292250514030457
2422;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5119627118110657
2423;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5323516130447388
2424;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5367377996444702
2425;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5870690941810608
2426;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.512697160243988
2427;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5768386125564575
2428;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5762895345687866
2429;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.620146632194519
2430;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5054173469543457
2431;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.622856855392456
2432;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5284069776535034
2433;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6359544396400452
2434;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5994430780410767
2435;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.583781898021698
2436;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5355892181396484
2437;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6660743951797485
2438;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5544120073318481
2439;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5596548914909363
2440;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5109914541244507
2441;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5477534532546997
2442;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5932114124298096
2443;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6006240844726562
2444;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.52413010597229
2445;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5915669202804565
2446;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5648208260536194
2447;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5048322677612305
2448;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5529215335845947
2449;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5686264634132385
2450;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5323168039321899
2451;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5207996368408203
2452;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5250029563903809
2453;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5431974530220032
2454;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5004680752754211
2455;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.6410974264144897
2456;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5420843362808228
2457;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5095486044883728
2458;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5219873189926147
2459;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5237084627151489
2460;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5229617357254028
2461;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6350188255310059
2462;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5180747509002686
2463;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5532341003417969
2464;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.570267915725708
2465;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6820501089096069
2466;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6282726526260376
2467;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6479032635688782
2468;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6166330575942993
2469;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5623339414596558
2470;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5181182622909546
2471;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5742920637130737
2472;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5005638599395752
2473;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5013084411621094
2474;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5543873310089111
2475;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.534110426902771
2476;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5736402273178101
2477;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5687066316604614
2478;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5274365544319153
2479;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6279979348182678
2480;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Similar;0.5085777640342712
2481;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.5478501915931702
2482;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5868198275566101
2483;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5050216913223267
2484;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5589970946311951
2485;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6248297691345215
2486;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5131106376647949
2487;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6242945194244385
2488;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5401207208633423
2489;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5401207208633423
2490;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6091881990432739
2491;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5292442440986633
2492;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5898600816726685
2493;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6436772346496582
2494;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5591326951980591
2495;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5165342688560486
2496;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.582878828048706
2497;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5055962800979614
2498;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6017783284187317
2499;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5549790859222412
2500;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5631048083305359
2501;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5348204374313354
2502;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5536518096923828
2503;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5566433668136597
2504;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5571998357772827
2505;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5579391717910767
2506;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5568394064903259
2507;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5777068138122559
2508;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5684710741043091
2509;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6517289876937866
2510;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5201845169067383
2511;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5520301461219788
2512;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5094007253646851
2513;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5994688272476196
2514;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6063291430473328
2515;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5935152769088745
2516;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5363608598709106
2517;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5068387985229492
2518;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5350937843322754
2519;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5000676512718201
2520;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5050763487815857
2521;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5842410326004028
2522;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5116134881973267
2523;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Similar;0.7561713457107544
2524;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.59019935131073
2525;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5015915632247925
2526;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6436995267868042
2527;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.516527533531189
2528;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6770875453948975
2529;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7049573063850403
2530;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6443537473678589
2531;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.749772310256958
2532;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.749772310256958
2533;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5165578126907349
2534;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6448572874069214
2535;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5119212865829468
2536;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5218459367752075
2537;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6764085292816162
2538;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6580295562744141
2539;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5169793367385864
2540;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5748035907745361
2541;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5424633622169495
2542;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5056983828544617
2543;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5648901462554932
2544;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.527961015701294
2545;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5750083923339844
2546;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.519416332244873
2547;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5751221179962158
2548;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5582226514816284
2549;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5681141018867493
2550;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5850952863693237
2551;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6174448132514954
2552;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6654425263404846
2553;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6268417835235596
2554;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5467089414596558
2555;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7224432229995728
2556;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6580966711044312
2557;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6881459951400757
2558;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5248472690582275
2559;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5187943577766418
2560;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5025737285614014
2561;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6483679413795471
2562;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6030031442642212
2563;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6459221839904785
2564;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6895939111709595
2565;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5354292392730713
2566;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5389178395271301
2567;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7190121412277222
2568;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6388657093048096
2569;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5305109024047852
2570;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6727824211120605
2571;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6762322187423706
2572;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6007316708564758
2573;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6644267439842224
2574;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7523441314697266
2575;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6189785003662109
2576;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6451013088226318
2577;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5961573123931885
2578;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5316306352615356
2579;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5747015476226807
2580;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.562240719795227
2581;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.549491286277771
2582;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5053764581680298
2583;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.582857072353363
2584;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5877331495285034
2585;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.7171281576156616
2586;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.547333300113678
2587;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5023820400238037
2588;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5999810695648193
2589;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5024998188018799
2590;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6057493686676025
2591;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6127786040306091
2592;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5653685927391052
2593;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5004253387451172
2594;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7388125658035278
2595;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6373952627182007
2596;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5607768297195435
2597;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7494216561317444
2598;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.513985276222229
2599;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5467941761016846
2600;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5796554088592529
2601;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6531350612640381
2602;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6098633408546448
2603;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6600480079650879
2604;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5917871594429016
2605;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6242092847824097
2606;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5073790550231934
2607;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6126545667648315
2608;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5036316514015198
2609;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6711786389350891
2610;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6916510462760925
2611;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5912977457046509
2612;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.6401538848876953
2613;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5473560094833374
2614;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6118314266204834
2615;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5048534870147705
2616;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6077648997306824
2617;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5302915573120117
2618;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5894179940223694
2619;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6185113787651062
2620;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5183759927749634
2621;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5183759927749634
2622;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6355623006820679
2623;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5668295621871948
2624;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5055888295173645
2625;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6072343587875366
2626;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5336161851882935
2627;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5654661655426025
2628;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.510754406452179
2629;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6479800939559937
2630;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6683546304702759
2631;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5873774886131287
2632;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5557413101196289
2633;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6681063771247864
2634;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5572875738143921
2635;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5840739011764526
2636;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6049155592918396
2637;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5023149251937866
2638;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.557684063911438
2639;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5327771902084351
2640;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5105343461036682
2641;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5207098722457886
2642;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5370851159095764
2643;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.7146117687225342
2644;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5220839977264404
2645;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.599726140499115
2646;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5867002010345459
2647;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5922102928161621
2648;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6712888479232788
2649;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5178020596504211
2650;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5319823026657104
2651;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5312933325767517
2652;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5364651679992676
2653;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6596487760543823
2654;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.574652910232544
2655;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.567736029624939
2656;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5679273009300232
2657;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5504007339477539
2658;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5812890529632568
2659;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5403975248336792
2660;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5220267176628113
2661;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5313147306442261
2662;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5109855532646179
2663;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5314725637435913
2664;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5175684690475464
2665;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6026607751846313
2666;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5789129734039307
2667;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5082873106002808
2668;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5215733647346497
2669;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5401244163513184
2670;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5269159078598022
2671;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Similar;0.5864704847335815
2672;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Similar;0.5343087911605835
2673;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.6979695558547974
2674;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5361588001251221
2675;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5567396879196167
2676;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6744102835655212
2677;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6598633527755737
2678;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6534066796302795
2679;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.80347740650177
2680;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.80347740650177
2681;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5928740501403809
2682;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6152850389480591
2683;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5215358734130859
2684;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6457521319389343
2685;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5299326181411743
2686;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6169724464416504
2687;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6839969158172607
2688;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6635972261428833
2689;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6500111222267151
2690;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6311492919921875
2691;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5911285281181335
2692;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5250632762908936
2693;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5126060247421265
2694;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5715400576591492
2695;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5396265983581543
2696;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6432263851165771
2697;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5013890862464905
2698;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5578336119651794
2699;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6059434413909912
2700;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5495179891586304
2701;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5182945728302002
2702;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5607332587242126
2703;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5087426900863647
2704;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5156466960906982
2705;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6714245080947876
2706;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6751560568809509
2707;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7144445180892944
2708;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7417913675308228
2709;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5733635425567627
2710;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5323808193206787
2711;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6117368936538696
2712;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7601664066314697
2713;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6863694190979004
2714;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7188998460769653
2715;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5287302732467651
2716;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.544095516204834
2717;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5335667729377747
2718;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5539549589157104
2719;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6181536912918091
2720;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.805382490158081
2721;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7065013647079468
2722;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.579120397567749
2723;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.691870391368866
2724;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7661594152450562
2725;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6603553295135498
2726;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5614563226699829
2727;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7142469882965088
2728;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5689319372177124
2729;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5771198272705078
2730;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.646945595741272
2731;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6413564682006836
2732;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7697198390960693
2733;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.766179084777832
2734;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.7363770008087158
2735;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6497201919555664
2736;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5982553958892822
2737;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5904481410980225
2738;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6872407793998718
2739;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5155858993530273
2740;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6709449291229248
2741;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6368422508239746
2742;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5272600650787354
2743;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5955275893211365
2744;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5950205326080322
2745;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5965714454650879
2746;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5941215753555298
2747;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6987847089767456
2748;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6203708648681641
2749;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5210381746292114
2750;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5163949131965637
2751;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5685197114944458
2752;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5318650007247925
2753;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6008843183517456
2754;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6719235777854919
2755;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5664258003234863
2756;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6922570466995239
2757;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5491059422492981
2758;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6951910853385925
2759;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6661669015884399
2760;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.680500328540802
2761;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6066341400146484
2762;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6824091672897339
2763;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6431031823158264
2764;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6724621057510376
2765;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6395611763000488
2766;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6203163862228394
2767;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5054396390914917
2768;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6073397397994995
2769;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6290218830108643
2770;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5568636059761047
2771;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.694717526435852
2772;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5511804819107056
2773;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6254400610923767
2774;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6313556432723999
2775;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7012926340103149
2776;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5903943181037903
2777;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6506261825561523
2778;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.594740092754364
2779;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.5524806976318359
2780;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5765105485916138
2781;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.6049572229385376
2782;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.654337465763092
2783;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6018962860107422
2784;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5873583555221558
2785;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6697885990142822
2786;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6697885990142822
2787;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6515700221061707
2788;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.609336256980896
2789;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5054073333740234
2790;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.546268105506897
2791;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5070410370826721
2792;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6813600063323975
2793;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5531291961669922
2794;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5847328901290894
2795;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5213444232940674
2796;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5208449363708496
2797;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5441075563430786
2798;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5465136766433716
2799;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5793887972831726
2800;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5520182847976685
2801;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5004990696907043
2802;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5030927062034607
2803;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6437809467315674
2804;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.610889196395874
2805;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5757575035095215
2806;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6069035530090332
2807;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6205712556838989
2808;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6221352815628052
2809;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5538074374198914
2810;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.6052559614181519
2811;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5041706562042236
2812;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5948737859725952
2813;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.646702229976654
2814;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6018490791320801
2815;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5936952829360962
2816;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5848806500434875
2817;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5998188853263855
2818;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6212903261184692
2819;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5711426734924316
2820;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5463184118270874
2821;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6054090857505798
2822;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6825824975967407
2823;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5572350025177002
2824;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5107030868530273
2825;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5079420804977417
2826;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5526676774024963
2827;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5547041296958923
2828;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5426594018936157
2829;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.509914755821228
2830;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5075092315673828
2831;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5859915614128113
2832;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5329301357269287
2833;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6100706458091736
2834;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5828883647918701
2835;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5388954281806946
2836;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5946686267852783
2837;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5112721920013428
2838;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.516819953918457
2839;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6094024777412415
2840;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.533784031867981
2841;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5778709053993225
2842;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.624778151512146
2843;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5305361747741699
2844;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5864493250846863
2845;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5180356502532959
2846;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.508910596370697
2847;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7420414090156555
2848;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5240861177444458
2849;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5048587322235107
2850;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5280105471611023
2851;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5919958353042603
2852;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5472126007080078
2853;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5219042301177979
2854;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5688859224319458
2855;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5094856023788452
2856;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5094856023788452
2857;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5853298902511597
2858;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5948209762573242
2859;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5070934295654297
2860;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5601409077644348
2861;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5173321962356567
2862;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6383081078529358
2863;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5641064047813416
2864;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.585604727268219
2865;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5673956871032715
2866;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5929639339447021
2867;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5208166837692261
2868;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5054985284805298
2869;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5414719581604004
2870;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5137925148010254
2871;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5855749249458313
2872;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5946500301361084
2873;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5246044397354126
2874;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.524535059928894
2875;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5000412464141846
2876;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5367358922958374
2877;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5777418613433838
2878;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5109485387802124
2879;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.549328088760376
2880;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5449186563491821
2881;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5290220975875854
2882;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5503212213516235
2883;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5585923194885254
2884;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5521676540374756
2885;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5496121644973755
2886;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5368614196777344
2887;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5258558988571167
2888;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5336134433746338
2889;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6222578287124634
2890;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6119200587272644
2891;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.500706136226654
2892;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.531548261642456
2893;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5440465807914734
2894;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5324699878692627
2895;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5298833847045898
2896;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5331519246101379
2897;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5511160492897034
2898;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5705154538154602
2899;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5284173488616943
2900;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5151485204696655
2901;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5026494264602661
2902;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6922686100006104
2903;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5859202146530151
2904;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5121695399284363
2905;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5183466076850891
2906;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5233314633369446
2907;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.655935525894165
2908;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5835020542144775
2909;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5835020542144775
2910;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.7103431224822998
2911;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.7140196561813354
2912;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5504743456840515
2913;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5661476850509644
2914;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7180550694465637
2915;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7246918082237244
2916;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6047919988632202
2917;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.7275115251541138
2918;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5910842418670654
2919;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7664573192596436
2920;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5606304407119751
2921;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5289520621299744
2922;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5227266550064087
2923;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6176520586013794
2924;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.558685839176178
2925;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6489182114601135
2926;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5289809703826904
2927;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7773572206497192
2928;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6793692111968994
2929;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.8389064073562622
2930;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.583513617515564
2931;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6442792415618896
2932;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6615111827850342
2933;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6538807153701782
2934;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5230790972709656
2935;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6690889000892639
2936;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.8336160182952881
2937;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6716038584709167
2938;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5468969941139221
2939;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5988619327545166
2940;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5976918935775757
2941;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6063966751098633
2942;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5949273109436035
2943;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6348462700843811
2944;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5806233882904053
2945;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8030635118484497
2946;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7741802334785461
2947;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7202776670455933
2948;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5109742283821106
2949;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6314481496810913
2950;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6801099181175232
2951;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6782541275024414
2952;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6662155389785767
2953;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5835204124450684
2954;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5095999240875244
2955;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6402416229248047
2956;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.615531325340271
2957;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.625551700592041
2958;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7348951101303101
2959;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.623940110206604
2960;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5688024759292603
2961;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5758044123649597
2962;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.538629412651062
2963;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7217763662338257
2964;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.625230073928833
2965;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6011763215065002
2966;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7596986293792725
2967;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6296316385269165
2968;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7047279477119446
2969;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5577526092529297
2970;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6867361068725586
2971;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7514429092407227
2972;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5185610055923462
2973;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5989995002746582
2974;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6206365823745728
2975;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5646848678588867
2976;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5921647548675537
2977;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5915561318397522
2978;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6297270059585571
2979;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.632003903388977
2980;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7969934940338135
2981;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6266406774520874
2982;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5059570074081421
2983;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6426980495452881
2984;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6700180768966675
2985;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5730346441268921
2986;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7886055707931519
2987;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5025118589401245
2988;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5345001816749573
2989;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6815412044525146
2990;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5125906467437744
2991;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5287503600120544
2992;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7090489864349365
2993;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5243314504623413
2994;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5183461308479309
2995;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Similar;0.7122517824172974
2996;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.56465744972229
2997;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.550186038017273
2998;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5118185877799988
2999;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5339450240135193
3000;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5182337760925293
3001;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.616097092628479
3002;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5060250759124756
3003;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5221070051193237
3004;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6136919260025024
3005;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5488350987434387
3006;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6033300161361694
3007;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5429549217224121
3008;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.539704442024231
3009;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5137025117874146
3010;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5663790106773376
3011;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6130525469779968
3012;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.556513249874115
3013;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6071019172668457
3014;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.5192643404006958
3015;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5022275447845459
3016;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5178789496421814
3017;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.6065282821655273
3018;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6196713447570801
3019;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5023542642593384
3020;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5102961659431458
3021;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6483209133148193
3022;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5562154054641724
3023;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5238083600997925
3024;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5073140859603882
3025;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5726636052131653
3026;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6353271007537842
3027;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5293911695480347
3028;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6684693694114685
3029;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5569745302200317
3030;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.6396920680999756
3031;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5438182353973389
3032;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5109118223190308
3033;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5438169240951538
3034;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5438169240951538
3035;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5109556913375854
3036;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6160564422607422
3037;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5134168863296509
3038;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5294352769851685
3039;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5314444303512573
3040;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5244393348693848
3041;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5090841054916382
3042;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6014817357063293
3043;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6033025979995728
3044;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.523531973361969
3045;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6027392148971558
3046;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.590400218963623
3047;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5643401741981506
3048;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5390878915786743
3049;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.7891196012496948
3050;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5373406410217285
3051;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5090836882591248
3052;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5956070423126221
3053;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.525594174861908
3054;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6010094881057739
3055;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5128346681594849
3056;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5599101185798645
3057;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5849398374557495
3058;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5040995478630066
3059;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.606395959854126
3060;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5611461400985718
3061;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.542819619178772
3062;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.591238796710968
3063;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5306844711303711
3064;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5872241258621216
3065;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5533086657524109
3066;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5321342349052429
3067;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6343695521354675
3068;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5467455387115479
3069;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6949025392532349
3070;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6433922052383423
3071;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5840082168579102
3072;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.531872034072876
3073;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5941137075424194
3074;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5413974523544312
3075;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5952287912368774
3076;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5471305847167969
3077;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.7690743207931519
3078;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5239852666854858
3079;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.7323771715164185
3080;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5721961259841919
3081;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5641966462135315
3082;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5661742687225342
3083;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5305208563804626
3084;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5623055100440979
3085;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5028231143951416
3086;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5502990484237671
3087;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5292637944221497
3088;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.510849118232727
3089;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6481710076332092
3090;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.52936851978302
3091;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5783184170722961
3092;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5175845623016357
3093;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.7135986685752869
3094;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5304465293884277
3095;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5158603191375732
3096;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.5158603191375732
3097;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5026040077209473
3098;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.540108323097229
3099;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5551620125770569
3100;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5229364633560181
3101;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5488684177398682
3102;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6393516063690186
3103;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5892666578292847
3104;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5848026871681213
3105;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.652758002281189
3106;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5504239201545715
3107;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5941956639289856
3108;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.589461624622345
3109;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5600741505622864
3110;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5041379928588867
3111;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5082734227180481
3112;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.674095630645752
3113;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5471371412277222
3114;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5583412647247314
3115;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5722402334213257
3116;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5209189057350159
3117;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.521705150604248
3118;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5682207345962524
3119;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5183735489845276
3120;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5310071706771851
3121;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5552809238433838
3122;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5992530584335327
3123;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5159665942192078
3124;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6514860987663269
3125;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5274063348770142
3126;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5439953207969666
3127;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5230619311332703
3128;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5297442078590393
3129;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5742480158805847
3130;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5582123398780823
3131;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5779784917831421
3132;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5935862064361572
3133;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5214393138885498
3134;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6815261840820312
3135;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5334570407867432
3136;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5644643306732178
3137;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5772497653961182
3138;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5815309286117554
3139;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5084630250930786
3140;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5021653175354004
3141;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6501544713973999
3142;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5816408395767212
3143;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5399957299232483
3144;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.555949330329895
3145;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6302260160446167
3146;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6953192949295044
3147;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6034292578697205
3148;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6338698863983154
3149;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5532859563827515
3150;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Similar;0.5182428359985352
3151;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.509697437286377
3152;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5839040279388428
3153;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.505765438079834
3154;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5730700492858887
3155;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Similar;0.6737865805625916
3156;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.562904953956604
3157;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6451561450958252
3158;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5142000317573547
3159;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5384180545806885
3160;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5007840991020203
3161;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5091477632522583
3162;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5076888799667358
3163;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5455130934715271
3164;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5495350360870361
3165;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.6173741221427917
3166;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5420268774032593
3167;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5046466588973999
3168;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6271686553955078
3169;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5330792665481567
3170;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5733586549758911
3171;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.504198431968689
3172;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5067695379257202
3173;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5840029716491699
3174;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.537420392036438
3175;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6263851523399353
3176;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5207559466362
3177;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5100568532943726
3178;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5330968499183655
3179;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5292314291000366
3180;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6274138689041138
3181;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5462343096733093
3182;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.7410479187965393
3183;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5190249085426331
3184;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.557191014289856
3185;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5341427326202393
3186;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5170795917510986
3187;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6013844013214111
3188;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6365687847137451
3189;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5158467292785645
3190;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5511820316314697
3191;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5119905471801758
3192;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5597469806671143
3193;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Similar;0.5253869295120239
3194;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5722668766975403
3195;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.561293363571167
3196;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5253525972366333
3197;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5616946220397949
3198;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5119144916534424
3199;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5043767690658569
3200;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5576622486114502
3201;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.528388261795044
3202;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5156955122947693
3203;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6555171608924866
3204;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5123466849327087
3205;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5605525970458984
3206;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5888500213623047
3207;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5776883363723755
3208;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5782688856124878
3209;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5454291105270386
3210;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5104919075965881
3211;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.504801869392395
3212;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5256025195121765
3213;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5648615956306458
3214;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5517045259475708
3215;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5266386270523071
3216;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5616000890731812
3217;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5693403482437134
3218;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.518811047077179
3219;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5573400259017944
3220;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.657812237739563
3221;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5063577890396118
3222;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6692115068435669
3223;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5233858823776245
3224;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5673797130584717
3225;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5001431703567505
3226;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6139287948608398
3227;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5258827209472656
3228;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5371902585029602
3229;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5149102210998535
3230;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5065479874610901
3231;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5206945538520813
3232;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5150430798530579
3233;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5101977586746216
3234;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6833734512329102
3235;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5128697156906128
3236;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5834217071533203
3237;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5287126302719116
3238;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5273897647857666
3239;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6102773547172546
3240;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5294381380081177
3241;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5022616982460022
3242;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6437774300575256
3243;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5060232877731323
3244;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5024421811103821
3245;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5048897862434387
3246;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5865417122840881
3247;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5317703485488892
3248;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.505936861038208
3249;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5496137142181396
3250;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.653587818145752
3251;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.593216598033905
3252;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5514950752258301
3253;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5584721565246582
3254;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.6486133337020874
3255;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.668303370475769
3256;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6902379989624023
3257;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6902379989624023
3258;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6569240093231201
3259;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5188177824020386
3260;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5653286576271057
3261;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5352643132209778
3262;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6183757781982422
3263;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.554597020149231
3264;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5326939821243286
3265;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5074819326400757
3266;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5023791790008545
3267;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7226439714431763
3268;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.612415075302124
3269;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6576933860778809
3270;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5760366320610046
3271;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6147105693817139
3272;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6200526356697083
3273;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.628847599029541
3274;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5518832206726074
3275;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5864318013191223
3276;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5971245765686035
3277;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6722812652587891
3278;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6894924640655518
3279;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5424546599388123
3280;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5377360582351685
3281;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6527141332626343
3282;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5745961666107178
3283;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.540324330329895
3284;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5135548114776611
3285;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6353628039360046
3286;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6118428707122803
3287;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6240700483322144
3288;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6982826590538025
3289;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5161669850349426
3290;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6797393560409546
3291;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.553234875202179
3292;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5876713991165161
3293;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5660285949707031
3294;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5651552677154541
3295;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5864435434341431
3296;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5150020718574524
3297;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5956984758377075
3298;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5806306600570679
3299;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5644046068191528
3300;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6146942973136902
3301;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6400703191757202
3302;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6801915168762207
3303;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6009564399719238
3304;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6476365327835083
3305;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6463268995285034
3306;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6831709146499634
3307;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5298099517822266
3308;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.513411283493042
3309;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6074331998825073
3310;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5775989294052124
3311;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6007424592971802
3312;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7811172604560852
3313;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5915660262107849
3314;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5109252333641052
3315;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6759796142578125
3316;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6555116176605225
3317;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6632112860679626
3318;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5208359956741333
3319;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5768589973449707
3320;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5275596380233765
3321;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5408496856689453
3322;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6796495914459229
3323;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5297057032585144
3324;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5234494209289551
3325;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5425260066986084
3326;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5486181974411011
3327;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5468199253082275
3328;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5208275318145752
3329;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5972146987915039
3330;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5002305507659912
3331;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5120548009872437
3332;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5560469031333923
3333;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.547082781791687
3334;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5636942386627197
3335;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.6261470913887024
3336;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.703431248664856
3337;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6826143264770508
3338;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5130823850631714
3339;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5322335958480835
3340;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5168991088867188
3341;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.591486930847168
3342;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5350165367126465
3343;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.63988196849823
3344;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6561306715011597
3345;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5146443843841553
3346;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5048301219940186
3347;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5172895193099976
3348;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6450310945510864
3349;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.541450023651123
3350;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5013066530227661
3351;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5012825727462769
3352;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5125809907913208
3353;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5846467018127441
3354;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5620943307876587
3355;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5115240812301636
3356;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6179077625274658
3357;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6913148164749146
3358;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5640997886657715
3359;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5064412355422974
3360;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7315507531166077
3361;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5420551300048828
3362;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.528461217880249
3363;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Similar;0.5268123149871826
3364;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6811431050300598
3365;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6811431050300598
3366;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6648275852203369
3367;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5346364974975586
3368;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5908632874488831
3369;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6157852411270142
3370;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6350544691085815
3371;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5827858448028564
3372;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5223286151885986
3373;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6293489933013916
3374;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5292041301727295
3375;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6220930814743042
3376;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6031150817871094
3377;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5884612798690796
3378;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6296694278717041
3379;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5588136911392212
3380;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5379820466041565
3381;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6991609930992126
3382;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5965180397033691
3383;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5305205583572388
3384;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6596624851226807
3385;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5997036695480347
3386;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5479301810264587
3387;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5632802248001099
3388;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6523897647857666
3389;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5759495496749878
3390;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7098777294158936
3391;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6680186986923218
3392;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.526237964630127
3393;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5269031524658203
3394;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.505813717842102
3395;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.6092147827148438
3396;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5009596943855286
3397;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6611675024032593
3398;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6118650436401367
3399;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6857932209968567
3400;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7434679865837097
3401;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5602813363075256
3402;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.569746732711792
3403;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6735976934432983
3404;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5512946844100952
3405;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5772038698196411
3406;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5017713308334351
3407;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.580309271812439
3408;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6310551762580872
3409;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.600719690322876
3410;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.739021897315979
3411;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7165273427963257
3412;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6139823198318481
3413;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7211351990699768
3414;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6945236921310425
3415;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6274281740188599
3416;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6326037645339966
3417;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5191830396652222
3418;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5927190184593201
3419;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5279918909072876
3420;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6593188047409058
3421;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5373467206954956
3422;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5127293467521667
3423;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6320794820785522
3424;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6709755659103394
3425;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6050053834915161
3426;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5630944967269897
3427;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6873977184295654
3428;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5902540683746338
3429;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.511208176612854
3430;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6563273668289185
3431;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5707933902740479
3432;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5667897462844849
3433;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6878450512886047
3434;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6010829210281372
3435;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.600722074508667
3436;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5012238025665283
3437;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5869659781455994
3438;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5637948513031006
3439;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5439224243164062
3440;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.665316104888916
3441;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6707460880279541
3442;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;0.6707460880279541
3443;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.6077195405960083
3444;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.611028790473938
3445;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5736491680145264
3446;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5332392454147339
3447;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5883711576461792
3448;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.565618634223938
3449;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.657731294631958
3450;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5298523902893066
3451;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.7198964953422546
3452;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6470879316329956
3453;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6494024991989136
3454;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5059247612953186
3455;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5637661218643188
3456;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5696499347686768
3457;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5168236494064331
3458;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5189359188079834
3459;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6968460083007812
3460;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5108109712600708
3461;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5765407085418701
3462;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6684633493423462
3463;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5877701044082642
3464;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5309357643127441
3465;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6364619731903076
3466;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6960031986236572
3467;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6667706370353699
3468;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6246781349182129
3469;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5756689310073853
3470;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5413830280303955
3471;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6213735938072205
3472;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5991561412811279
3473;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6252622604370117
3474;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5000820159912109
3475;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5940508842468262
3476;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6226543188095093
3477;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6148585677146912
3478;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5327023267745972
3479;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6435028314590454
3480;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5990985035896301
3481;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6708921194076538
3482;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5798497200012207
3483;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6295544505119324
3484;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5422500371932983
3485;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5360395908355713
3486;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5591417551040649
3487;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6662288904190063
3488;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6144253015518188
3489;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5557250380516052
3490;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6795953512191772
3491;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5059680938720703
3492;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.576208770275116
3493;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5705171823501587
3494;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5700938105583191
3495;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5700591802597046
3496;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.552453875541687
3497;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5120525360107422
3498;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6003181338310242
3499;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6218564510345459
3500;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.539402961730957
3501;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6526892185211182
3502;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5379951596260071
3503;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5487707853317261
3504;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.568366289138794
3505;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5682156682014465
3506;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6103200912475586
3507;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6219015121459961
3508;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5228081941604614
3509;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5195928812026978
3510;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6415998339653015
3511;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6572425365447998
3512;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5421837568283081
3513;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5259938836097717
3514;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5529043078422546
3515;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6704926490783691
3516;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6883998513221741
3517;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7366145849227905
3518;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5590133666992188
3519;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5640064477920532
3520;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5902630686759949
3521;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6598867774009705
3522;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5100053548812866
3523;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6368227005004883
3524;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5496617555618286
3525;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.7121062278747559
3526;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6568436622619629
3527;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6690064072608948
3528;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6223280429840088
3529;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Similar;1.000000238418579
3530;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.50041264295578
3531;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5642217397689819
3532;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.7039384841918945
3533;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5021131038665771
3534;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5228046774864197
3535;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7163746356964111
3536;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6445112228393555
3537;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6547980904579163
3538;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6045841574668884
3539;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.7261785864830017
3540;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.597191333770752
3541;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5635759830474854
3542;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5900484323501587
3543;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6210423707962036
3544;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.623359739780426
3545;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.61058509349823
3546;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6790286302566528
3547;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5138911604881287
3548;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5126157999038696
3549;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7346421480178833
3550;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6882790923118591
3551;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5024211406707764
3552;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7834230661392212
3553;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.8003391027450562
3554;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6454377174377441
3555;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.500524640083313
3556;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.7396184802055359
3557;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.8592509031295776
3558;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6500966548919678
3559;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5072833299636841
3560;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.623148500919342
3561;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.504331648349762
3562;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5247019529342651
3563;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5469684600830078
3564;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6747435331344604
3565;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7081780433654785
3566;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7555752396583557
3567;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5877610445022583
3568;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6783036589622498
3569;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.8490380048751831
3570;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6047312021255493
3571;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5011853575706482
3572;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6619674563407898
3573;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.576615035533905
3574;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6182957887649536
3575;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.699397087097168
3576;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6734787225723267
3577;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7502491474151611
3578;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7475081086158752
3579;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6355692148208618
3580;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7506104707717896
3581;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6399459838867188
3582;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6515660285949707
3583;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6074475049972534
3584;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5299488306045532
3585;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5913935303688049
3586;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5428271889686584
3587;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6396950483322144
3588;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5284719467163086
3589;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5125788450241089
3590;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5027524828910828
3591;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5880396366119385
3592;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6795361042022705
3593;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5340101718902588
3594;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6072414517402649
3595;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5441619157791138
3596;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6772886514663696
3597;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5914146900177002
3598;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6056356430053711
3599;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6324640512466431
3600;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.610041618347168
3601;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7120730876922607
3602;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6056467294692993
3603;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6869815587997437
3604;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5839492678642273
3605;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6395737528800964
3606;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6025968790054321
3607;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6309922933578491
3608;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.690975546836853
3609;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.587226390838623
3610;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6770105361938477
3611;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6090400815010071
3612;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.54097580909729
3613;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6227401494979858
3614;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6150684952735901
3615;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5926529169082642
3616;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5543317794799805
3617;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6847695112228394
3618;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5440207719802856
3619;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7378389835357666
3620;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5512997508049011
3621;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.50041264295578
3622;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.5642217397689819
3623;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.7039384841918945
3624;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5021131038665771
3625;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5228046774864197
3626;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7163746356964111
3627;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6445112228393555
3628;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6547980904579163
3629;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6045841574668884
3630;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.7261785864830017
3631;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.597191333770752
3632;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5635759830474854
3633;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5900484323501587
3634;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6210423707962036
3635;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.623359739780426
3636;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.61058509349823
3637;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6790286302566528
3638;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5138911604881287
3639;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5126157999038696
3640;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7346421480178833
3641;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6882790923118591
3642;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5024211406707764
3643;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7834230661392212
3644;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.8003391027450562
3645;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6454377174377441
3646;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.500524640083313
3647;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.7396184802055359
3648;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.8592509031295776
3649;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6500966548919678
3650;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5072833299636841
3651;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.623148500919342
3652;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.504331648349762
3653;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5247019529342651
3654;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5469684600830078
3655;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6747435331344604
3656;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7081780433654785
3657;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7555752396583557
3658;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5877610445022583
3659;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6783036589622498
3660;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.8490380048751831
3661;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6047312021255493
3662;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5011853575706482
3663;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6619674563407898
3664;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.576615035533905
3665;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6182957887649536
3666;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.699397087097168
3667;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6734787225723267
3668;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7502491474151611
3669;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7475081086158752
3670;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6355692148208618
3671;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7506104707717896
3672;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6399459838867188
3673;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6515660285949707
3674;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6074475049972534
3675;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5299488306045532
3676;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5913935303688049
3677;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5428271889686584
3678;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6396950483322144
3679;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5284719467163086
3680;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5125788450241089
3681;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5027524828910828
3682;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5880396366119385
3683;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6795361042022705
3684;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5340101718902588
3685;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6072414517402649
3686;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5441619157791138
3687;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6772886514663696
3688;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5914146900177002
3689;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6056356430053711
3690;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6324640512466431
3691;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.610041618347168
3692;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7120730876922607
3693;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6056467294692993
3694;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6869815587997437
3695;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5839492678642273
3696;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6395737528800964
3697;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6025968790054321
3698;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6309922933578491
3699;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.690975546836853
3700;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.587226390838623
3701;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6770105361938477
3702;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6090400815010071
3703;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.54097580909729
3704;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6227401494979858
3705;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6150684952735901
3706;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5926529169082642
3707;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5543317794799805
3708;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6847695112228394
3709;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5440207719802856
3710;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7378389835357666
3711;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5512997508049011
3712;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Similar;0.8974013328552246
3713;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5128580927848816
3714;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5746960639953613
3715;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6310036182403564
3716;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7683179378509521
3717;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5934939980506897
3718;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6603608727455139
3719;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6535376310348511
3720;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7475936412811279
3721;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5363187193870544
3722;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5633777379989624
3723;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.509846568107605
3724;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5190033316612244
3725;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6578526496887207
3726;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5006596446037292
3727;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.686974048614502
3728;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5333385467529297
3729;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6408412456512451
3730;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7600481510162354
3731;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5037582516670227
3732;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5096169114112854
3733;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5263828039169312
3734;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5222327709197998
3735;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.592211127281189
3736;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5288683176040649
3737;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5027115345001221
3738;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7086449861526489
3739;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.7018819451332092
3740;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6909642219543457
3741;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.7260681986808777
3742;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5478019714355469
3743;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5365457534790039
3744;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5719244480133057
3745;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6675572395324707
3746;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7234839200973511
3747;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7307645082473755
3748;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6801496744155884
3749;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5744917988777161
3750;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6657941341400146
3751;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5457373857498169
3752;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6126872301101685
3753;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5789296627044678
3754;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6329864263534546
3755;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.697813868522644
3756;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.7207964658737183
3757;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.7491651773452759
3758;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7279804944992065
3759;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6051010489463806
3760;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6881599426269531
3761;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5438058972358704
3762;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5921183824539185
3763;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6931140422821045
3764;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.589945912361145
3765;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.8305707573890686
3766;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6655770540237427
3767;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5339587926864624
3768;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.823667049407959
3769;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.8183853626251221
3770;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6195696592330933
3771;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6815654039382935
3772;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7080926895141602
3773;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6631468534469604
3774;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5143671035766602
3775;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5943173170089722
3776;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5720975399017334
3777;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5000594258308411
3778;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6751394867897034
3779;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6115116477012634
3780;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.791232705116272
3781;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6179497241973877
3782;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5989490747451782
3783;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6831283569335938
3784;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5156317949295044
3785;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5961012840270996
3786;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5769836902618408
3787;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5559982061386108
3788;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5547109842300415
3789;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5752663612365723
3790;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5605607032775879
3791;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.717842698097229
3792;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5931389331817627
3793;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5339720845222473
3794;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5103761553764343
3795;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5725460052490234
3796;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.7260054349899292
3797;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6739793419837952
3798;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6164946556091309
3799;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6578749418258667
3800;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5168241858482361
3801;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7394582629203796
3802;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5962507724761963
3803;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.594342827796936
3804;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5971946716308594
3805;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5479724407196045
3806;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5795172452926636
3807;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6740585565567017
3808;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5725389719009399
3809;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6981891393661499
3810;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7417685985565186
3811;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5679200887680054
3812;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5454699397087097
3813;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.573798418045044
3814;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6789097189903259
3815;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5500319004058838
3816;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5627977848052979
3817;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6851198077201843
3818;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.517155647277832
3819;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5265980362892151
3820;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6894997358322144
3821;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6348831653594971
3822;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6320329904556274
3823;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5191415548324585
3824;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5695712566375732
3825;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5294700860977173
3826;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6006217002868652
3827;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6012541651725769
3828;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7331014275550842
3829;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6800308227539062
3830;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7155568599700928
3831;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5302466154098511
3832;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6935755014419556
3833;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5498484373092651
3834;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6553299427032471
3835;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5855263471603394
3836;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6665470600128174
3837;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5124858617782593
3838;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6386237740516663
3839;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.7248209714889526
3840;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.7447758913040161
3841;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6926271915435791
3842;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5914560556411743
3843;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.7862646579742432
3844;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5691502690315247
3845;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5810002684593201
3846;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6562849283218384
3847;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6723047494888306
3848;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.8053261041641235
3849;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6110317707061768
3850;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5487412214279175
3851;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7878323197364807
3852;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7823262810707092
3853;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5685111880302429
3854;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.7095568776130676
3855;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7042820453643799
3856;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5646607875823975
3857;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6061257123947144
3858;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5234380960464478
3859;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.647987425327301
3860;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6000534296035767
3861;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5182269811630249
3862;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6510617136955261
3863;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6709120869636536
3864;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7717999219894409
3865;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6207945942878723
3866;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.628173828125
3867;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5149664878845215
3868;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6633340120315552
3869;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6226305961608887
3870;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5097250938415527
3871;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6126230955123901
3872;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5039135217666626
3873;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5922037363052368
3874;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5913273096084595
3875;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5884262323379517
3876;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5383414626121521
3877;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6914058923721313
3878;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5940742492675781
3879;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5749573111534119
3880;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5789141654968262
3881;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5226749181747437
3882;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5479569435119629
3883;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5322365760803223
3884;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6165775060653687
3885;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5227512121200562
3886;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5048051476478577
3887;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5908828973770142
3888;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5786003470420837
3889;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5765344500541687
3890;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5575382709503174
3891;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5557454824447632
3892;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.652936577796936
3893;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6554710865020752
3894;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5732202529907227
3895;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6052242517471313
3896;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5316447019577026
3897;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6698563098907471
3898;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5457199215888977
3899;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5007926225662231
3900;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5650945901870728
3901;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5464808940887451
3902;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5716004967689514
3903;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5040371417999268
3904;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5767817497253418
3905;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5332289934158325
3906;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5756922960281372
3907;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5241073369979858
3908;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5715569853782654
3909;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5272660851478577
3910;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5106299519538879
3911;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5059528350830078
3912;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5757164359092712
3913;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5437551140785217
3914;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5106277465820312
3915;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5686821937561035
3916;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5061043500900269
3917;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.552665114402771
3918;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5875662565231323
3919;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6331759691238403
3920;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5909829139709473
3921;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5135657787322998
3922;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5427011847496033
3923;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.543998122215271
3924;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5369933843612671
3925;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5148993730545044
3926;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6457840800285339
3927;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5059772729873657
3928;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6130221486091614
3929;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.650434672832489
3930;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5950329303741455
3931;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5288208723068237
3932;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.6618026494979858
3933;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5266318321228027
3934;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5267206430435181
3935;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5257068276405334
3936;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.631553053855896
3937;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.61397784948349
3938;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5200743079185486
3939;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5470052361488342
3940;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5085703134536743
3941;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.651323676109314
3942;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5375008583068848
3943;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6068357229232788
3944;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5962598323822021
3945;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7008150815963745
3946;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6473886966705322
3947;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7151471972465515
3948;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.7046183347702026
3949;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5448756217956543
3950;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.660793662071228
3951;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5721619129180908
3952;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5755761861801147
3953;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.615235447883606
3954;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6398366689682007
3955;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5175759196281433
3956;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5538415908813477
3957;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6532486081123352
3958;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5125082731246948
3959;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5114814639091492
3960;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5112513899803162
3961;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5267959237098694
3962;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6053215861320496
3963;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.652214527130127
3964;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.671485185623169
3965;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5993578433990479
3966;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6019370555877686
3967;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6884725093841553
3968;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5075256824493408
3969;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5967425107955933
3970;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5897146463394165
3971;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6720758080482483
3972;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5845130681991577
3973;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6816953420639038
3974;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5183554887771606
3975;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5957568883895874
3976;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5763059258460999
3977;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5595180988311768
3978;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7267080545425415
3979;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5736578702926636
3980;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5730804204940796
3981;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6118974685668945
3982;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5665148496627808
3983;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.6453625559806824
3984;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5077593326568604
3985;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5397577285766602
3986;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5395018458366394
3987;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5412724018096924
3988;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5419880151748657
3989;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5708552598953247
3990;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5529135465621948
3991;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5364532470703125
3992;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5920822024345398
3993;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6691150665283203
3994;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7070972919464111
3995;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5358774065971375
3996;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6619366407394409
3997;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.674010157585144
3998;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5205840468406677
3999;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.530839204788208
4000;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6614569425582886
4001;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5551610589027405
4002;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6222601532936096
4003;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5071659088134766
4004;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6060069799423218
4005;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.612758994102478
4006;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6009213924407959
4007;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5325527787208557
4008;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6620909571647644
4009;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6725977659225464
4010;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5619889497756958
4011;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5565686225891113
4012;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.576669454574585
4013;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.527954638004303
4014;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5376263856887817
4015;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5139753818511963
4016;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5161654949188232
4017;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5171982049942017
4018;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5336635708808899
4019;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.543940544128418
4020;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6060328483581543
4021;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5148283243179321
4022;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.511337399482727
4023;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5151784420013428
4024;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5033708810806274
4025;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5829017162322998
4026;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5955321788787842
4027;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5647518634796143
4028;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5365808010101318
4029;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.500971257686615
4030;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6342830061912537
4031;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5867919921875
4032;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5330123901367188
4033;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6805858612060547
4034;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6327570676803589
4035;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5209167003631592
4036;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5358521938323975
4037;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6425607800483704
4038;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5730528235435486
4039;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6973730325698853
4040;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5214868187904358
4041;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.605339765548706
4042;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5654071569442749
4043;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5056269764900208
4044;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6287888288497925
4045;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5131295919418335
4046;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.541224479675293
4047;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5181694030761719
4048;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6456131935119629
4049;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5278466939926147
4050;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5160764455795288
4051;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5427862405776978
4052;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5160665512084961
4053;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5632002949714661
4054;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.510644793510437
4055;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6473450660705566
4056;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5589475631713867
4057;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5245004892349243
4058;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.548919677734375
4059;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5136673450469971
4060;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5402852296829224
4061;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5689430832862854
4062;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5124326944351196
4063;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.519679844379425
4064;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.517746090888977
4065;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5071843862533569
4066;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5033454298973083
4067;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.510015070438385
4068;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.6308825612068176
4069;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.537246584892273
4070;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6474288702011108
4071;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5466210842132568
4072;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6353719830513
4073;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5260815620422363
4074;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5973393321037292
4075;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6082271337509155
4076;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6185179948806763
4077;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6158641576766968
4078;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6343571543693542
4079;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5420849323272705
4080;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5930423736572266
4081;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5276331901550293
4082;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6606708765029907
4083;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6108402013778687
4084;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6426236629486084
4085;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5007439255714417
4086;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5089272856712341
4087;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5537587404251099
4088;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5601414442062378
4089;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6627412438392639
4090;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5133868455886841
4091;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6096739768981934
4092;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6014354825019836
4093;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5132389068603516
4094;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6489133834838867
4095;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.7143223285675049
4096;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5092947483062744
4097;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6664782762527466
4098;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6424546241760254
4099;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5064516067504883
4100;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5885167717933655
4101;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5511808395385742
4102;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6887398958206177
4103;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.533855676651001
4104;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6441317796707153
4105;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.574576735496521
4106;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5682214498519897
4107;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5144115686416626
4108;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5859895944595337
4109;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5834856033325195
4110;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6298536062240601
4111;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6366672515869141
4112;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5135111808776855
4113;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.5898628830909729
4114;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.529729425907135
4115;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5163270235061646
4116;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5032609701156616
4117;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5195083618164062
4118;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5265729427337646
4119;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Similar;0.854971170425415
4120;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5149235725402832
4121;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6961278915405273
4122;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.526931881904602
4123;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5367583632469177
4124;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5534667372703552
4125;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5694854259490967
4126;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5031651258468628
4127;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5222242474555969
4128;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5455184578895569
4129;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5876830816268921
4130;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5666621923446655
4131;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.557712972164154
4132;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5325916409492493
4133;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6862059235572815
4134;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6040445566177368
4135;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6175843477249146
4136;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5457384586334229
4137;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5806411504745483
4138;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5754748582839966
4139;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5144701600074768
4140;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5722106695175171
4141;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6972291469573975
4142;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5912355184555054
4143;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.505798876285553
4144;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5480542778968811
4145;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5198344588279724
4146;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5131577253341675
4147;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5082758069038391
4148;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.5101531744003296
4149;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5886052846908569
4150;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5236196517944336
4151;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5339577198028564
4152;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5606504678726196
4153;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5233482122421265
4154;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5092711448669434
4155;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5458700060844421
4156;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5148874521255493
4157;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.54282146692276
4158;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5076568126678467
4159;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5666443109512329
4160;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5629189014434814
4161;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6616191864013672
4162;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5969113111495972
4163;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5880188941955566
4164;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.546926736831665
4165;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5518007278442383
4166;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5243661403656006
4167;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5406672954559326
4168;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5437520742416382
4169;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5556185245513916
4170;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6915855407714844
4171;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6038094758987427
4172;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5291299223899841
4173;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5314722657203674
4174;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5075787305831909
4175;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.551639199256897
4176;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6072088479995728
4177;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Similar;0.6695268154144287
4178;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5962187051773071
4179;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.525495171546936
4180;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7749050855636597
4181;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5303802490234375
4182;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5139678716659546
4183;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6742427349090576
4184;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5857261419296265
4185;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6467577219009399
4186;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6312998533248901
4187;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7139275074005127
4188;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5377583503723145
4189;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6461432576179504
4190;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5378979444503784
4191;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5463603734970093
4192;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5291104316711426
4193;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7376055717468262
4194;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.638709545135498
4195;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.8317462205886841
4196;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.7631567716598511
4197;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6185008883476257
4198;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6100633144378662
4199;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5544222593307495
4200;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5291063785552979
4201;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5195082426071167
4202;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6010792255401611
4203;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5084384679794312
4204;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5927619934082031
4205;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7699634432792664
4206;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8668506145477295
4207;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5587747693061829
4208;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5035912990570068
4209;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5663416385650635
4210;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.561126708984375
4211;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6185775995254517
4212;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5902696847915649
4213;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5594015121459961
4214;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5088744759559631
4215;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5265426635742188
4216;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.804094672203064
4217;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6793144345283508
4218;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5501687526702881
4219;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.7189890146255493
4220;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7885946035385132
4221;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5186785459518433
4222;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6082656383514404
4223;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5105624198913574
4224;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6079776883125305
4225;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.752700924873352
4226;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5344007611274719
4227;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7635419368743896
4228;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.7156859636306763
4229;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5322943329811096
4230;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.9132909774780272
4231;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7954673767089844
4232;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7491610050201416
4233;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5895060896873474
4234;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5972825884819031
4235;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5063695907592773
4236;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5538104772567749
4237;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.547754168510437
4238;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6453796029090881
4239;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.624319314956665
4240;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5831769704818726
4241;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.715296745300293
4242;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5973138809204102
4243;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5762412548065186
4244;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5266756415367126
4245;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5228579640388489
4246;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5312212109565735
4247;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5875656604766846
4248;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5599042177200317
4249;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5337589979171753
4250;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6564541459083557
4251;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6520282030105591
4252;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6834818124771118
4253;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5294634103775024
4254;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.5027058124542236
4255;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.600773811340332
4256;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.6253572702407837
4257;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7044610381126404
4258;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.7177588939666748
4259;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5124883651733398
4260;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5339276790618896
4261;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Similar;0.504043459892273
4262;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5544956922531128
4263;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5700540542602539
4264;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6371101140975952
4265;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5687771439552307
4266;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5833379030227661
4267;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5726853609085083
4268;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.52530437707901
4269;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6630693674087524
4270;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6077377200126648
4271;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5368537902832031
4272;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5995328426361084
4273;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6434422731399536
4274;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5104301571846008
4275;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5792385339736938
4276;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.708432137966156
4277;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6653611660003662
4278;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7130295038223267
4279;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5626460909843445
4280;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6562231779098511
4281;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.555078387260437
4282;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6526030898094177
4283;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6286500096321106
4284;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5584580898284912
4285;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7291111946105957
4286;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5847041606903076
4287;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5243121385574341
4288;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6311782598495483
4289;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6235383749008179
4290;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6347687244415283
4291;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7140703797340393
4292;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6687031984329224
4293;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5666829347610474
4294;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5761412382125854
4295;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7568875551223755
4296;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5532817244529724
4297;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7109355926513672
4298;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6544516086578369
4299;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6466145515441895
4300;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5019214153289795
4301;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5327537059783936
4302;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.587385356426239
4303;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5398563146591187
4304;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5638071298599243
4305;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6566543579101562
4306;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6593664288520813
4307;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6383090019226074
4308;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6604974865913391
4309;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6294543743133545
4310;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5600922107696533
4311;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5621122717857361
4312;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5980974435806274
4313;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5525332689285278
4314;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6137322187423706
4315;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6306846737861633
4316;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6552574634552002
4317;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5034133195877075
4318;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5503019690513611
4319;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5391479730606079
4320;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5659538507461548
4321;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5966547727584839
4322;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6890881657600403
4323;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6203597187995911
4324;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6726326942443848
4325;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6394685506820679
4326;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5587576627731323
4327;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6021145582199097
4328;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5232264995574951
4329;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6376492977142334
4330;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5785885453224182
4331;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6170607805252075
4332;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5857594609260559
4333;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6811179518699646
4334;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6229895949363708
4335;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6228970289230347
4336;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5952622294425964
4337;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6931444406509399
4338;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6266704797744751
4339;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.526823103427887
4340;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6055059432983398
4341;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5871737599372864
4342;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5042035579681396
4343;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5934823751449585
4344;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5798143148422241
4345;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6753724813461304
4346;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.505334734916687
4347;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6031079292297363
4348;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6499731540679932
4349;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5529552102088928
4350;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.528215765953064
4351;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7100319862365723
4352;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5057346224784851
4353;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5673972368240356
4354;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5158355236053467
4355;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Similar;0.5946202278137207
4356;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5960708856582642
4357;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5340497493743896
4358;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.501227617263794
4359;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5222259163856506
4360;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5533224940299988
4361;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6688166856765747
4362;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Similar;0.6903823018074036
4363;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.5536261796951294
4364;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6045030355453491
4365;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6244279742240906
4366;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5905836820602417
4367;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5687102675437927
4368;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5034629106521606
4369;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6095030903816223
4370;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6647528409957886
4371;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6190727949142456
4372;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5346429944038391
4373;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5115781426429749
4374;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5048032999038696
4375;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5707194805145264
4376;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5698992013931274
4377;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5364643931388855
4378;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6401715278625488
4379;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5651253461837769
4380;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.7603754997253418
4381;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5601485967636108
4382;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5017188787460327
4383;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6405352354049683
4384;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5076169371604919
4385;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.583777904510498
4386;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5742539167404175
4387;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.623440146446228
4388;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6901932954788208
4389;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5722752809524536
4390;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5406108498573303
4391;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7362749576568604
4392;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.620372474193573
4393;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5148627758026123
4394;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5614246129989624
4395;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6052179336547852
4396;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5502679944038391
4397;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6197774410247803
4398;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5841915607452393
4399;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.7003133296966553
4400;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5268986225128174
4401;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5411778092384338
4402;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6329612731933594
4403;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5908939838409424
4404;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6317168474197388
4405;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6372686624526978
4406;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.7363445162773132
4407;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5977530479431152
4408;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.739937424659729
4409;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7562132477760315
4410;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5580652952194214
4411;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5584734082221985
4412;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5937336087226868
4413;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6551538705825806
4414;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7196677923202515
4415;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5170962810516357
4416;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5810821056365967
4417;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.603744387626648
4418;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5666561126708984
4419;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5121325850486755
4420;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5068092346191406
4421;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5866026878356934
4422;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5215897560119629
4423;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7491255402565002
4424;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.634178638458252
4425;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.8136236667633057
4426;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6437488794326782
4427;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5200896263122559
4428;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6841446757316589
4429;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6196120977401733
4430;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6394640803337097
4431;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5073683261871338
4432;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5708510875701904
4433;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5645551681518555
4434;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.554817795753479
4435;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5831683278083801
4436;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.666167140007019
4437;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5239267349243164
4438;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.628897488117218
4439;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5657760500907898
4440;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5851383209228516
4441;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.553297221660614
4442;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6544957160949707
4443;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5165843963623047
4444;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7436137199401855
4445;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6473826169967651
4446;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.612838864326477
4447;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7706257104873657
4448;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5207643508911133
4449;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5167064666748047
4450;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5530313849449158
4451;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.821791410446167
4452;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.7714790105819702
4453;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6384912729263306
4454;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5088513493537903
4455;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6795074343681335
4456;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.662264883518219
4457;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5742090940475464
4458;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6979203224182129
4459;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5569188594818115
4460;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7061631679534912
4461;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5183390378952026
4462;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.508334219455719
4463;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Similar;0.614316463470459
4464;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6076922416687012
4465;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5449764728546143
4466;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5501554012298584
4467;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.7448348999023438
4468;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5651800632476807
4469;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6486903429031372
4470;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6276087760925293
4471;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.619331419467926
4472;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6268258094787598
4473;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6359041929244995
4474;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5767119526863098
4475;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.6893887519836426
4476;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5287637114524841
4477;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5954208970069885
4478;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.54812091588974
4479;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6005157828330994
4480;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6832597255706787
4481;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.598811686038971
4482;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5553758144378662
4483;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5171658992767334
4484;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6177167296409607
4485;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.520411491394043
4486;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.6068928837776184
4487;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5455516576766968
4488;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5519580841064453
4489;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5360046625137329
4490;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5010703206062317
4491;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6027302742004395
4492;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.657159686088562
4493;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5983074903488159
4494;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5636306405067444
4495;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7255163192749023
4496;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.6296752691268921
4497;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5365651845932007
4498;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.560078501701355
4499;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5658104419708252
4500;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5010845065116882
4501;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5944732427597046
4502;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5588224530220032
4503;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.681869387626648
4504;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6133134365081787
4505;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6339815855026245
4506;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6665226221084595
4507;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.531731903553009
4508;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5698727369308472
4509;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6963076591491699
4510;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.54925537109375
4511;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6294604539871216
4512;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6544381976127625
4513;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6397691965103149
4514;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6210479736328125
4515;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.595017671585083
4516;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.532547116279602
4517;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5128458738327026
4518;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5722814798355103
4519;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5392839312553406
4520;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5024574995040894
4521;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6119914054870605
4522;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5431259870529175
4523;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5514585375785828
4524;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6582156419754028
4525;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5593230128288269
4526;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5832006335258484
4527;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5600804686546326
4528;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6141860485076904
4529;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5322741270065308
4530;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5603617429733276
4531;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.520972490310669
4532;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5398761034011841
4533;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6830511093139648
4534;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5912848114967346
4535;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5476875305175781
4536;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5840464234352112
4537;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6366326808929443
4538;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6407036185264587
4539;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5150701403617859
4540;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.5912683010101318
4541;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5033177137374878
4542;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5696994066238403
4543;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5267060995101929
4544;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5857926607131958
4545;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6319360136985779
4546;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5768193006515503
4547;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6249651908874512
4548;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5868895053863525
4549;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5679295063018799
4550;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.805903434753418
4551;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6064428091049194
4552;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5521895885467529
4553;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6095432043075562
4554;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5100804567337036
4555;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5227539539337158
4556;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5135207176208496
4557;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5433517694473267
4558;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5487527847290039
4559;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.7456822395324707
4560;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5506969094276428
4561;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.7303742170333862
4562;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6612844467163086
4563;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6241625547409058
4564;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5291348695755005
4565;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.611218273639679
4566;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6339989900588989
4567;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6362950801849365
4568;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5496037602424622
4569;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.614778459072113
4570;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7734609842300415
4571;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8209226131439209
4572;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6064316034317017
4573;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5398198366165161
4574;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5618069171905518
4575;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5863447189331055
4576;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6057062149047852
4577;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6254674196243286
4578;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5393176078796387
4579;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5030546188354492
4580;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5203584432601929
4581;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.796398401260376
4582;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6688966155052185
4583;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5120657682418823
4584;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6994096040725708
4585;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7091729640960693
4586;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.571359395980835
4587;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6330381631851196
4588;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5407314300537109
4589;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6293669939041138
4590;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5133572220802307
4591;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7287633419036865
4592;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.7262412309646606
4593;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5233258008956909
4594;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7759580612182617
4595;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5263655781745911
4596;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7106128931045532
4597;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5078167915344238
4598;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5591527223587036
4599;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5145597457885742
4600;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7768382430076599
4601;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5321104526519775
4602;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6232221722602844
4603;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5126029253005981
4604;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6103559732437134
4605;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.561285674571991
4606;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5125089883804321
4607;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6075280904769897
4608;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6503301858901978
4609;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5779178142547607
4610;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.8013726472854614
4611;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.720707893371582
4612;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6415386199951172
4613;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.517969012260437
4614;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5384538173675537
4615;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6186918020248413
4616;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6014580726623535
4617;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6134624481201172
4618;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5794443488121033
4619;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.619053840637207
4620;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7118191123008728
4621;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6628404855728149
4622;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5301263332366943
4623;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6011348962783813
4624;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5532478094100952
4625;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5427165031433105
4626;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5801883935928345
4627;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5737684965133667
4628;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5401479601860046
4629;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5939159989356995
4630;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5196197032928467
4631;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.50655597448349
4632;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5460055470466614
4633;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6322258114814758
4634;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6777040362358093
4635;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6257174015045166
4636;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.576957106590271
4637;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5436165928840637
4638;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5857492685317993
4639;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6687290668487549
4640;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5619114637374878
4641;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5520484447479248
4642;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5230122208595276
4643;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5206259489059448
4644;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5941847562789917
4645;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5873331427574158
4646;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6428729295730591
4647;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5001561641693115
4648;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5706226825714111
4649;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6662360429763794
4650;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5648149251937866
4651;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5397599935531616
4652;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5630608797073364
4653;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5192389488220215
4654;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5440328121185303
4655;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5718350410461426
4656;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5924173593521118
4657;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5523041486740112
4658;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5912232398986816
4659;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5217782258987427
4660;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5963282585144043
4661;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5208330154418945
4662;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5415633916854858
4663;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5248803496360779
4664;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5384904146194458
4665;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6508007645606995
4666;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5143676996231079
4667;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6038868427276611
4668;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5534448027610779
4669;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5294171571731567
4670;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5298950672149658
4671;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5945384502410889
4672;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.583895742893219
4673;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5483525991439819
4674;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5342426300048828
4675;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5115073919296265
4676;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5750542879104614
4677;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6873138546943665
4678;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5591529011726379
4679;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5587788820266724
4680;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6277163624763489
4681;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5718178749084473
4682;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5796058177947998
4683;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5618366003036499
4684;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5447677373886108
4685;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5478003621101379
4686;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5270367860794067
4687;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6041374206542969
4688;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5219129323959351
4689;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Similar;0.6207020878791809
4690;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.6003767251968384
4691;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5750486850738525
4692;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.616330623626709
4693;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5727267265319824
4694;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5109914541244507
4695;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5449396371841431
4696;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6234993934631348
4697;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5291977524757385
4698;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5530834794044495
4699;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5267385244369507
4700;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.755508542060852
4701;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5023142099380493
4702;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5852642059326172
4703;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5047332644462585
4704;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5001868605613708
4705;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5163469910621643
4706;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.542251467704773
4707;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5584450364112854
4708;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.7796924114227295
4709;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5109636783599854
4710;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5258301496505737
4711;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.586280107498169
4712;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5164227485656738
4713;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6160489320755005
4714;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5380014181137085
4715;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5407571792602539
4716;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.509382963180542
4717;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6240179538726807
4718;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5644930005073547
4719;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5257773995399475
4720;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5427583456039429
4721;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5136970281600952
4722;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5915431976318359
4723;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5487288236618042
4724;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5184935331344604
4725;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5841389894485474
4726;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5377277731895447
4727;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.6701269149780273
4728;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5667995810508728
4729;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5225450396537781
4730;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5812511444091797
4731;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5053257346153259
4732;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5174902677536011
4733;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5317632555961609
4734;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5502431392669678
4735;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5326705574989319
4736;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5483596324920654
4737;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5100220441818237
4738;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5617631673812866
4739;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5147539377212524
4740;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5050284266471863
4741;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5060743093490601
4742;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5097092390060425
4743;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5064722299575806
4744;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5893151164054871
4745;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.521323561668396
4746;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5629594326019287
4747;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6401078104972839
4748;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5168359875679016
4749;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5053996443748474
4750;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6119272708892822
4751;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5438375473022461
4752;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.628670334815979
4753;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5991966128349304
4754;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5289222002029419
4755;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6025307178497314
4756;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.650852620601654
4757;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.7058427929878235
4758;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.6227699518203735
4759;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5877084136009216
4760;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6327048540115356
4761;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5706403255462646
4762;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6036063432693481
4763;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5684298276901245
4764;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5321702361106873
4765;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6501821279525757
4766;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5624167919158936
4767;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5850222110748291
4768;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6076979637145996
4769;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6482295989990234
4770;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5029037594795227
4771;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.513411283493042
4772;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5667705535888672
4773;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5075684785842896
4774;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5404696464538574
4775;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5951693058013916
4776;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5041984915733337
4777;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.516777515411377
4778;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5537773370742798
4779;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5387988090515137
4780;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5040863752365112
4781;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Similar;0.5302802920341492
4782;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5222157835960388
4783;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5117529034614563
4784;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5156128406524658
4785;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6185165643692017
4786;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5561026334762573
4787;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5259849429130554
4788;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5265948176383972
4789;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5971876382827759
4790;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5329612493515015
4791;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6186701059341431
4792;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5000659227371216
4793;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5171154737472534
4794;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5079187750816345
4795;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5151888132095337
4796;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6242803335189819
4797;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5582634210586548
4798;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6339038610458374
4799;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.602807879447937
4800;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.528508186340332
4801;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5355095863342285
4802;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5905134677886963
4803;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5812914371490479
4804;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5014948844909668
4805;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6116127371788025
4806;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5819642543792725
4807;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5545647740364075
4808;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6158607602119446
4809;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5334429144859314
4810;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.6134639978408813
4811;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.597490668296814
4812;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5253686308860779
4813;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5998234748840332
4814;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6733173131942749
4815;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5705945491790771
4816;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.6018747091293335
4817;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7048056125640869
4818;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5668964385986328
4819;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.552128791809082
4820;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5261104106903076
4821;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6039143800735474
4822;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5233866572380066
4823;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5266944169998169
4824;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6372311115264893
4825;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5039796233177185
4826;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.729485034942627
4827;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5360872149467468
4828;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5279608368873596
4829;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6281048059463501
4830;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5375365018844604
4831;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5286751985549927
4832;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5035741329193115
4833;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6204525828361511
4834;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5826754570007324
4835;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5052933692932129
4836;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5025584101676941
4837;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.818953275680542
4838;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6325986385345459
4839;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5052793622016907
4840;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6840596199035645
4841;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.635217547416687
4842;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6206786632537842
4843;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5285992622375488
4844;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5310162305831909
4845;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5381885766983032
4846;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5325521230697632
4847;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5589675903320312
4848;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6474664211273193
4849;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5099691152572632
4850;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5241800546646118
4851;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5060617923736572
4852;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6062953472137451
4853;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5155055522918701
4854;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5867459774017334
4855;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.514980673789978
4856;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5053986310958862
4857;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5041542649269104
4858;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5521406531333923
4859;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6106062531471252
4860;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6407738924026489
4861;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5150060057640076
4862;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5490866303443909
4863;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6118036508560181
4864;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6074186563491821
4865;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5814511775970459
4866;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5221900343894958
4867;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5939270257949829
4868;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5071695446968079
4869;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6251404285430908
4870;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5159277319908142
4871;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6284559369087219
4872;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5913602113723755
4873;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5366915464401245
4874;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5610800981521606
4875;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5137424468994141
4876;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5317732691764832
4877;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5051772594451904
4878;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5460473299026489
4879;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5128451585769653
4880;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5444999933242798
4881;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5411947965621948
4882;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5292048454284668
4883;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6180614233016968
4884;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.510847806930542
4885;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5946107506752014
4886;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5650908350944519
4887;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.642063319683075
4888;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5130725502967834
4889;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5264018774032593
4890;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.539000391960144
4891;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.558362603187561
4892;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5604565143585205
4893;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6144967675209045
4894;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6503852605819702
4895;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5220963954925537
4896;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6806572675704956
4897;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6286312341690063
4898;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5727742314338684
4899;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.651419460773468
4900;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5600507855415344
4901;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5004394054412842
4902;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5193943977355957
4903;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6072750091552734
4904;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5416203141212463
4905;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5203944444656372
4906;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.506402850151062
4907;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5456258654594421
4908;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5392407178878784
4909;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5234583616256714
4910;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5500428676605225
4911;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5610176920890808
4912;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.657118558883667
4913;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5654647350311279
4914;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5351448059082031
4915;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5622239708900452
4916;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5112813711166382
4917;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5990135669708252
4918;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5290635228157043
4919;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5662974119186401
4920;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5783863067626953
4921;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5753744840621948
4922;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5357158184051514
4923;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5271854400634766
4924;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5340572595596313
4925;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5557874441146851
4926;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5685263872146606
4927;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5929690599441528
4928;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.7489611506462097
4929;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5458315014839172
4930;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5490838289260864
4931;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5083370208740234
4932;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5172971487045288
4933;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6063133478164673
4934;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6118457317352295
4935;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5930006504058838
4936;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5118275284767151
4937;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5764480233192444
4938;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6720637083053589
4939;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6645673513412476
4940;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5528643727302551
4941;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6137173771858215
4942;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5029458999633789
4943;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5576086044311523
4944;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6436942219734192
4945;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6910016536712646
4946;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5477138161659241
4947;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6473821401596069
4948;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6690210700035095
4949;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.6075990200042725
4950;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5211130380630493
4951;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5956947803497314
4952;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5397334098815918
4953;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.614033579826355
4954;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5863633155822754
4955;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5621898174285889
4956;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.598320722579956
4957;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5152194499969482
4958;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5864258408546448
4959;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6730639934539795
4960;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6531407833099365
4961;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6846011877059937
4962;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.6201220750808716
4963;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5288770198822021
4964;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5612212419509888
4965;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6859439611434937
4966;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6892132759094238
4967;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5929608345031738
4968;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5671979188919067
4969;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5516327619552612
4970;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5722782611846924
4971;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5310545563697815
4972;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6909974217414856
4973;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5220431089401245
4974;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5048894286155701
4975;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6068912744522095
4976;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.7659551501274109
4977;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6103682518005371
4978;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5434571504592896
4979;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5275022387504578
4980;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.526106595993042
4981;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5733920335769653
4982;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5663661956787109
4983;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5213736891746521
4984;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5277678370475769
4985;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5684601068496704
4986;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6325036287307739
4987;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6180480718612671
4988;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5748096704483032
4989;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6122382879257202
4990;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5207456350326538
4991;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5151997208595276
4992;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7392587661743164
4993;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5276968479156494
4994;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5311309099197388
4995;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5327224731445312
4996;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.592981219291687
4997;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5459479093551636
4998;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6797302961349487
4999;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.54060959815979
5000;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6342248916625977
5001;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5104435682296753
5002;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5229769349098206
5003;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.5566402673721313
5004;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5024738311767578
5005;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5096052289009094
5006;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5277501344680786
5007;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6692371368408203
5008;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6536269783973694
5009;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5339840650558472
5010;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.50281822681427
5011;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5663002133369446
5012;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6086077690124512
5013;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6512335538864136
5014;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6742337942123413
5015;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5961734056472778
5016;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5676859617233276
5017;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.7147518992424011
5018;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6085600256919861
5019;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6087924838066101
5020;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7459550499916077
5021;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5916752815246582
5022;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.548184871673584
5023;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6456135511398315
5024;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.6075683832168579
5025;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6524848937988281
5026;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6079114079475403
5027;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6581500768661499
5028;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5630550384521484
5029;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5948346853256226
5030;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.6123369932174683
5031;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5809154510498047
5032;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5487132668495178
5033;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5428767204284668
5034;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.542171835899353
5035;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5193578004837036
5036;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5019707679748535
5037;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5944758653640747
5038;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5434623956680298
5039;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5894082188606262
5040;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6090047955513
5041;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5898232460021973
5042;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5041751265525818
5043;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5767934322357178
5044;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5526779890060425
5045;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5458984375
5046;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5656566619873047
5047;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.57950359582901
5048;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5120819211006165
5049;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5451003909111023
5050;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5911858677864075
5051;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5558439493179321
5052;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6134274005889893
5053;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.7019328474998474
5054;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7540299296379089
5055;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5300065279006958
5056;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6421073079109192
5057;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.6025776863098145
5058;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6635473370552063
5059;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6869861483573914
5060;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5781493186950684
5061;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5471560955047607
5062;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5342830419540405
5063;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6648937463760376
5064;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6397837996482849
5065;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.607966423034668
5066;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6730391979217529
5067;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5476516485214233
5068;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5153710842132568
5069;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5059940814971924
5070;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.518208384513855
5071;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6021209359169006
5072;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7271323204040527
5073;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5192921757698059
5074;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.597666323184967
5075;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6105237007141113
5076;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5369724035263062
5077;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.557837724685669
5078;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5640943050384521
5079;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.6128792762756348
5080;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5433355569839478
5081;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.532609760761261
5082;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5090416669845581
5083;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6648709774017334
5084;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5686800479888916
5085;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6747511625289917
5086;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5421209335327148
5087;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6913943290710449
5088;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5001521110534668
5089;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6169365048408508
5090;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6808581352233887
5091;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5189006328582764
5092;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5683947801589966
5093;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5099525451660156
5094;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6522039771080017
5095;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.7058514952659607
5096;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5505773425102234
5097;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6663338541984558
5098;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5459468960762024
5099;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Similar;0.5090141892433167
5100;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5274364948272705
5101;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5142315030097961
5102;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5049335360527039
5103;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5275372266769409
5104;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5855442881584167
5105;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5150668025016785
5106;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5736318230628967
5107;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5211730003356934
5108;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5186256170272827
5109;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5011367797851562
5110;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.544619083404541
5111;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5709754228591919
5112;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5503871440887451
5113;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5252629518508911
5114;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5556197762489319
5115;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5794082880020142
5116;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5398973226547241
5117;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5413872599601746
5118;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5567712187767029
5119;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5522866249084473
5120;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5222330689430237
5121;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5155835747718811
5122;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5436730980873108
5123;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5559450387954712
5124;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5295907855033875
5125;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.542034387588501
5126;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5118332505226135
5127;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5105624198913574
5128;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5534266233444214
5129;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5124254822731018
5130;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.638960599899292
5131;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5670868158340454
5132;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5093258619308472
5133;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.5831071138381958
5134;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5433226823806763
5135;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5026296973228455
5136;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6143554449081421
5137;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5680147409439087
5138;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6702224016189575
5139;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.8125553131103516
5140;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.673174262046814
5141;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6763069033622742
5142;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6754963397979736
5143;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5378659963607788
5144;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5925668478012085
5145;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5393633842468262
5146;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7645640969276428
5147;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.551426887512207
5148;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5875040292739868
5149;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5712655782699585
5150;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6599705219268799
5151;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5313845276832581
5152;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.630064845085144
5153;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6683303117752075
5154;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6725614070892334
5155;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6327823400497437
5156;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5102798342704773
5157;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6573305726051331
5158;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5014593601226807
5159;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5247934460639954
5160;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5039265155792236
5161;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5103877782821655
5162;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5376427173614502
5163;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7442901134490967
5164;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5867283940315247
5165;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.673880934715271
5166;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5688319206237793
5167;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5029231309890747
5168;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6772210001945496
5169;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5122994184494019
5170;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5098300576210022
5171;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6454325318336487
5172;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5651798844337463
5173;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6424636840820312
5174;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5124332904815674
5175;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.526412844657898
5176;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5571510791778564
5177;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5549384355545044
5178;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5040485262870789
5179;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.53533935546875
5180;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5233848094940186
5181;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5104954242706299
5182;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5574649572372437
5183;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5039354562759399
5184;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5279518365859985
5185;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5498901605606079
5186;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5285175442695618
5187;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5120491981506348
5188;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5175130367279053
5189;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5571763515472412
5190;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5321518778800964
5191;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6935744285583496
5192;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5160055756568909
5193;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.542470395565033
5194;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5519328117370605
5195;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5008406639099121
5196;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.563084602355957
5197;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5421022176742554
5198;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6602039337158203
5199;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5588260889053345
5200;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6772721409797668
5201;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6440712809562683
5202;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5046384334564209
5203;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5434653759002686
5204;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5338256359100342
5205;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.6856122016906738
5206;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.773327112197876
5207;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5108296275138855
5208;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5118127465248108
5209;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5367733240127563
5210;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6428418159484863
5211;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5719074010848999
5212;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6840583086013794
5213;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5779039263725281
5214;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5419682264328003
5215;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6987605094909668
5216;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5710883736610413
5217;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5105512142181396
5218;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6899688243865967
5219;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7486088275909424
5220;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6755014657974243
5221;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6597728729248047
5222;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5062832236289978
5223;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6644356846809387
5224;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5798377394676208
5225;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5176079273223877
5226;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5420265197753906
5227;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5176408290863037
5228;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5373929142951965
5229;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5068261623382568
5230;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.8038849830627441
5231;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5061802864074707
5232;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5466794967651367
5233;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.533190906047821
5234;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5215930938720703
5235;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7840169668197632
5236;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5636404752731323
5237;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5060834288597107
5238;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7130419611930847
5239;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5386365652084351
5240;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5096426010131836
5241;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6315097212791443
5242;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5023919343948364
5243;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6964327096939087
5244;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.608487606048584
5245;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7180838584899902
5246;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5205641984939575
5247;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5114498138427734
5248;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6532435417175293
5249;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5820183753967285
5250;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7140907645225525
5251;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.7368133068084717
5252;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7568022012710571
5253;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5189070105552673
5254;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6441344618797302
5255;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6200896501541138
5256;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6375508308410645
5257;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Similar;0.519302487373352
5258;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5118976831436157
5259;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6300636529922485
5260;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6062914133071899
5261;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5484961867332458
5262;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5674234628677368
5263;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5668516159057617
5264;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6130921244621277
5265;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.522323727607727
5266;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5445782542228699
5267;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.6511714458465576
5268;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5936123728752136
5269;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7518672943115234
5270;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6823252439498901
5271;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.6833223104476929
5272;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.6001653671264648
5273;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5007278323173523
5274;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5646559000015259
5275;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.59881591796875
5276;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6299875974655151
5277;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5655572414398193
5278;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5848407745361328
5279;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6553506851196289
5280;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5392918586730957
5281;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5417482256889343
5282;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6873789429664612
5283;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5458431243896484
5284;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5332750082015991
5285;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5691525936126709
5286;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6210562586784363
5287;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5600764751434326
5288;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6265150308609009
5289;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.648545503616333
5290;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6025568246841431
5291;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6330834627151489
5292;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.705785870552063
5293;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5144116878509521
5294;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7555961012840271
5295;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7258083820343018
5296;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5546374917030334
5297;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5633699893951416
5298;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5338581800460815
5299;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6269596815109253
5300;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5542728900909424
5301;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5809402465820312
5302;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5651353597640991
5303;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5317723155021667
5304;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.538603663444519
5305;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5847415924072266
5306;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5611376762390137
5307;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6415929794311523
5308;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6666556596755981
5309;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6214097738265991
5310;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5566960573196411
5311;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5985450744628906
5312;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5113313794136047
5313;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5783348083496094
5314;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6454899311065674
5315;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5520507097244263
5316;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5087705850601196
5317;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5260536670684814
5318;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5168927311897278
5319;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5435062050819397
5320;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6842272281646729
5321;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.7599544525146484
5322;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5137850046157837
5323;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6036330461502075
5324;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5269572734832764
5325;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5119124054908752
5326;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5650275945663452
5327;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.6973283886909485
5328;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5752643346786499
5329;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6476912498474121
5330;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.7437918186187744
5331;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6028039455413818
5332;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6383038759231567
5333;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5280590057373047
5334;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6112207770347595
5335;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5862472653388977
5336;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.6201396584510803
5337;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5447258949279785
5338;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6572620868682861
5339;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5959255695343018
5340;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5696189403533936
5341;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5481064319610596
5342;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6349167823791504
5343;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7877094745635986
5344;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7167587876319885
5345;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7169234752655029
5346;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.616169810295105
5347;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6573353409767151
5348;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6655546426773071
5349;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6709400415420532
5350;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5022701025009155
5351;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6117292642593384
5352;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5912216901779175
5353;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5610818862915039
5354;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5403420925140381
5355;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5492826700210571
5356;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5805575847625732
5357;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5544695854187012
5358;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.7123328447341919
5359;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5034754276275635
5360;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7096319794654846
5361;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5665985345840454
5362;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5690248608589172
5363;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.512739896774292
5364;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5105608105659485
5365;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5704003572463989
5366;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5978944301605225
5367;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.618927538394928
5368;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5073337554931641
5369;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6002154350280762
5370;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5167033672332764
5371;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.721358060836792
5372;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.772680401802063
5373;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Similar;0.6631374359130859
5374;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5687543153762817
5375;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5780805945396423
5376;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5428595542907715
5377;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6121252775192261
5378;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7003783583641052
5379;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5790356397628784
5380;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5919284224510193
5381;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5044865012168884
5382;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5329241752624512
5383;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5619434118270874
5384;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6135916113853455
5385;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7236887216567993
5386;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.548945426940918
5387;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.7585184574127197
5388;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6331202983856201
5389;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.553942084312439
5390;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5113982558250427
5391;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5735194087028503
5392;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.526301383972168
5393;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5166503190994263
5394;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5408229827880859
5395;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5860071778297424
5396;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6398704648017883
5397;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5282235145568848
5398;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5172197222709656
5399;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6465438008308411
5400;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5343364477157593
5401;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6472160816192627
5402;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5126478672027588
5403;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5624980926513672
5404;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.7044260501861572
5405;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5269533395767212
5406;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5488015413284302
5407;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5478442907333374
5408;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6143304705619812
5409;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6517735719680786
5410;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6203442811965942
5411;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.641165018081665
5412;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6352529525756836
5413;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5167556405067444
5414;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5479118824005127
5415;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.613924503326416
5416;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6614618897438049
5417;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5354333519935608
5418;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5198121070861816
5419;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6524614095687866
5420;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.533174991607666
5421;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6665070056915283
5422;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.58586585521698
5423;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5644625425338745
5424;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5361970663070679
5425;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5080333948135376
5426;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5859506130218506
5427;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5904140472412109
5428;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.6845594644546509
5429;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5969760417938232
5430;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.803275465965271
5431;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6689892411231995
5432;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5803255438804626
5433;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6806272268295288
5434;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5264843106269836
5435;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5251123905181885
5436;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5163956880569458
5437;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5930098295211792
5438;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8294204473495483
5439;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7950586080551147
5440;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6930489540100098
5441;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6556178331375122
5442;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.58784019947052
5443;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5720980167388916
5444;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6012767553329468
5445;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5388997793197632
5446;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5006603002548218
5447;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6553635597229004
5448;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.561581552028656
5449;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5858421921730042
5450;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.785911500453949
5451;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5597870349884033
5452;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5286449193954468
5453;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5385989546775818
5454;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6183993816375732
5455;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5323625206947327
5456;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.8273647427558899
5457;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5893866419792175
5458;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.786022424697876
5459;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5235623121261597
5460;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5007631182670593
5461;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7377314567565918
5462;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5553784370422363
5463;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.7143163681030273
5464;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.731421947479248
5465;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6294459104537964
5466;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5475292801856995
5467;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5969557762145996
5468;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5115160942077637
5469;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6412097215652466
5470;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5777950286865234
5471;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.8448187112808228
5472;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5657416582107544
5473;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5006909370422363
5474;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6278361082077026
5475;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6184680461883545
5476;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5773730278015137
5477;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7657666206359863
5478;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.702628493309021
5479;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5748757123947144
5480;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7598795890808105
5481;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.6980111002922058
5482;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5543496608734131
5483;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.627934455871582
5484;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Similar;0.5280457735061646
5485;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.620902419090271
5486;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6918154358863831
5487;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.6562497615814209
5488;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5460690259933472
5489;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5252642035484314
5490;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.57821124792099
5491;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5772222876548767
5492;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6049380302429199
5493;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5703481435775757
5494;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5358654260635376
5495;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5857105255126953
5496;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.679919958114624
5497;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.537121057510376
5498;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6926981806755066
5499;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7132507562637329
5500;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6271389722824097
5501;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.534699559211731
5502;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5705734491348267
5503;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6906663775444031
5504;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.570451557636261
5505;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5199365615844727
5506;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6567375659942627
5507;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6720916032791138
5508;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6476595401763916
5509;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6199564933776855
5510;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6517165899276733
5511;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5083341002464294
5512;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5920209884643555
5513;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6926159858703613
5514;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7467100024223328
5515;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6029475927352905
5516;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.5340229272842407
5517;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.5228543877601624
5518;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6958832740783691
5519;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.7161298990249634
5520;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5766482353210449
5521;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5086395144462585
5522;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.6698222756385803
5523;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5652287602424622
5524;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6172116994857788
5525;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.7499682307243347
5526;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5177852511405945
5527;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.535228431224823
5528;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5061970949172974
5529;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5579630732536316
5530;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5699578523635864
5531;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.6061524152755737
5532;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5114172697067261
5533;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6399391293525696
5534;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5217608213424683
5535;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6096099019050598
5536;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7464648485183716
5537;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5197576880455017
5538;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7856768369674683
5539;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7476248741149902
5540;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5361759662628174
5541;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6448233127593994
5542;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5451189279556274
5543;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5606048703193665
5544;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5554049015045166
5545;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5147266387939453
5546;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.7301950454711914
5547;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7283533215522766
5548;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5674021244049072
5549;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6203256845474243
5550;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5209499597549438
5551;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5340564250946045
5552;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5353515148162842
5553;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6612454056739807
5554;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5283985733985901
5555;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6048382520675659
5556;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5099143981933594
5557;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6948801279067993
5558;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6518857479095459
5559;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5228379964828491
5560;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Similar;0.592754602432251
5561;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5651193857192993
5562;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.5097043514251709
5563;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5550084114074707
5564;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6020674109458923
5565;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5642915964126587
5566;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5862442255020142
5567;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5007021427154541
5568;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5947288274765015
5569;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.6036796569824219
5570;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5660615563392639
5571;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5643409490585327
5572;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5873714685440063
5573;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5366804599761963
5574;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.6022968292236328
5575;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.668502151966095
5576;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6419484615325928
5577;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5365680456161499
5578;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5742616653442383
5579;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6583996415138245
5580;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.7162848711013794
5581;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5290631651878357
5582;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5331742167472839
5583;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.508979082107544
5584;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5419877171516418
5585;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6477931141853333
5586;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6158472299575806
5587;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5292835235595703
5588;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6314690709114075
5589;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5757343769073486
5590;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6320947408676147
5591;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6599729061126709
5592;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.535293698310852
5593;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Similar;0.6183784008026123
5594;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6372761726379395
5595;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6973344087600708
5596;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5083475112915039
5597;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.727378249168396
5598;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.661979079246521
5599;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5046707987785339
5600;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5115303993225098
5601;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5316693782806396
5602;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5090787410736084
5603;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.501923143863678
5604;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6306717991828918
5605;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6570332646369934
5606;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6199058294296265
5607;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5166460871696472
5608;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6916220188140869
5609;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6695317029953003
5610;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5247528553009033
5611;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5550713539123535
5612;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5797778367996216
5613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.618625819683075
5614;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5546293258666992
5615;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6263817548751831
5616;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6143310070037842
5617;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5860428810119629
5618;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5894886255264282
5619;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6099570989608765
5620;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5828843712806702
5621;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5020690560340881
5622;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5891116261482239
5623;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5227779150009155
5624;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.521942138671875
5625;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6032805442810059
5626;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5778782963752747
5627;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.573002278804779
5628;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6577925682067871
5629;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5870254635810852
5630;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5942625999450684
5631;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5525020360946655
5632;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5801278352737427
5633;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5448209047317505
5634;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5634777545928955
5635;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5785602331161499
5636;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5661113858222961
5637;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5640621185302734
5638;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5235418081283569
5639;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5637224912643433
5640;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5152393579483032
5641;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6302585005760193
5642;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.6696786880493164
5643;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.7039527297019958
5644;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5853928327560425
5645;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5152905583381653
5646;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.5369372963905334
5647;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5030344128608704
5648;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6815304756164551
5649;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5619008541107178
5650;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5599155426025391
5651;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5948982834815979
5652;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6974284648895264
5653;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5199292898178101
5654;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6655726432800293
5655;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5415047407150269
5656;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5650390386581421
5657;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.694250226020813
5658;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6858948469161987
5659;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6736470460891724
5660;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5578318238258362
5661;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6832914352416992
5662;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6519467830657959
5663;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6259146928787231
5664;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5446586608886719
5665;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6733496189117432
5666;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5890473127365112
5667;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6701637506484985
5668;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6733907461166382
5669;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.502037763595581
5670;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6878271698951721
5671;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5508537292480469
5672;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5109952688217163
5673;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5769528150558472
5674;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5284330248832703
5675;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5742967128753662
5676;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6451756954193115
5677;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6149239540100098
5678;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6446360349655151
5679;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5073329210281372
5680;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.630465030670166
5681;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.507451057434082
5682;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5753746628761292
5683;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.530795693397522
5684;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6235941052436829
5685;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6788085699081421
5686;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5455678701400757
5687;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5293565988540649
5688;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.560148298740387
5689;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5245144367218018
5690;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6354503631591797
5691;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5176399946212769
5692;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6156799793243408
5693;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5992696285247803
5694;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6020992994308472
5695;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6493722796440125
5696;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6152754426002502
5697;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5249837636947632
5698;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6249467134475708
5699;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6121567487716675
5700;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6066251993179321
5701;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.67339688539505
5702;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5368192195892334
5703;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6213893294334412
5704;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5529544353485107
5705;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6981028318405151
5706;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6099408864974976
5707;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5978829860687256
5708;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5823451280593872
5709;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6749764680862427
5710;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6013706922531128
5711;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5185607671737671
5712;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5278067588806152
5713;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6064672470092773
5714;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.6156089305877686
5715;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.616940975189209
5716;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5018791556358337
5717;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5543445348739624
5718;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5084766149520874
5719;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5074522495269775
5720;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5836697816848755
5721;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5722948908805847
5722;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5668773055076599
5723;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5707463026046753
5724;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.7265671491622925
5725;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.564206063747406
5726;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5309940576553345
5727;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5195062160491943
5728;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5182517170906067
5729;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5041900277137756
5730;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5412077903747559
5731;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6088311672210693
5732;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5341737866401672
5733;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.516701340675354
5734;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Similar;0.8565096259117126
5735;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.6337740421295166
5736;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5785318613052368
5737;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6418452262878418
5738;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7310835123062134
5739;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.670648455619812
5740;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6151720285415649
5741;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5187381505966187
5742;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5214191675186157
5743;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5178505182266235
5744;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6428185701370239
5745;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6662110090255737
5746;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6649629473686218
5747;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5074042677879333
5748;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6592389345169067
5749;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6890552043914795
5750;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6016441583633423
5751;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6882592439651489
5752;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.566327691078186
5753;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5648325681686401
5754;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6355746388435364
5755;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7164421081542969
5756;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6513245105743408
5757;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5385226607322693
5758;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6908363699913025
5759;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5090478658676147
5760;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6081770658493042
5761;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5688704252243042
5762;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5028214454650879
5763;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5199983716011047
5764;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5228872299194336
5765;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5900822877883911
5766;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5161595344543457
5767;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5534782409667969
5768;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5175495743751526
5769;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6864801645278931
5770;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5647711753845215
5771;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5097817182540894
5772;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6364977359771729
5773;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5604506134986877
5774;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5298444032669067
5775;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5549353957176208
5776;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6288043856620789
5777;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6671591997146606
5778;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5475519895553589
5779;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5319232940673828
5780;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.550696849822998
5781;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.502909779548645
5782;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6027941107749939
5783;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.682458758354187
5784;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5845034718513489
5785;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.7028818130493164
5786;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6187125444412231
5787;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6774917840957642
5788;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.629341721534729
5789;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5621576309204102
5790;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Similar;0.5695364475250244
5791;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Similar;0.5470137596130371
5792;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.6879503726959229
5793;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.73683100938797
5794;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6688361167907715
5795;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5226584672927856
5796;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6778613328933716
5797;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5867251753807068
5798;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5202193260192871
5799;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5755870342254639
5800;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6892938613891602
5801;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7126975059509277
5802;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.695389986038208
5803;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.57953941822052
5804;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.690703809261322
5805;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7544480562210083
5806;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6560553312301636
5807;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5342656373977661
5808;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7099636197090149
5809;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5395644903182983
5810;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6115590333938599
5811;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6470714807510376
5812;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5527126789093018
5813;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7685621380805969
5814;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7276909351348877
5815;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5753530263900757
5816;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7215937376022339
5817;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6658217310905457
5818;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5507848262786865
5819;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5874606370925903
5820;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.500813364982605
5821;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5773596167564392
5822;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6142983436584473
5823;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5399868488311768
5824;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5263544321060181
5825;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5328468680381775
5826;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5166454315185547
5827;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5856170058250427
5828;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6402281522750854
5829;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5167245864868164
5830;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5032832622528076
5831;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5968635082244873
5832;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6416792273521423
5833;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.507540762424469
5834;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5542891025543213
5835;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5604982376098633
5836;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6565025448799133
5837;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6228386163711548
5838;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5474647879600525
5839;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5813734531402588
5840;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5780042409896851
5841;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6733541488647461
5842;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6767144799232483
5843;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6184794306755066
5844;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6122004985809326
5845;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5274820923805237
5846;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5837017297744751
5847;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6699296832084656
5848;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.559894859790802
5849;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.602523922920227
5850;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5168145895004272
5851;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5896924138069153
5852;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6901915073394775
5853;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5027984976768494
5854;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5387381911277771
5855;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6807297468185425
5856;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5164580345153809
5857;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.642748236656189
5858;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5787683725357056
5859;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Similar;0.5413334965705872
5860;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.5469435453414917
5861;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.595447301864624
5862;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5483648777008057
5863;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5264379978179932
5864;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5127345323562622
5865;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5075563788414001
5866;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5124950408935547
5867;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.547026515007019
5868;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5984830856323242
5869;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5034590363502502
5870;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5746192932128906
5871;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5920486450195312
5872;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.541483461856842
5873;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5945436358451843
5874;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5125331282615662
5875;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5213696956634521
5876;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6115151643753052
5877;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5325976610183716
5878;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.593673825263977
5879;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5126885175704956
5880;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5083619952201843
5881;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5772396922111511
5882;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5781174898147583
5883;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5044731497764587
5884;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5705164074897766
5885;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5429285764694214
5886;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5116977691650391
5887;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5662672519683838
5888;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6768583059310913
5889;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5372796058654785
5890;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5253854990005493
5891;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5287858247756958
5892;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5912009477615356
5893;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5869050621986389
5894;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5462861061096191
5895;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5590878129005432
5896;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.514153778553009
5897;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5086051821708679
5898;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5585475564002991
5899;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.558469831943512
5900;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5495463609695435
5901;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5531290173530579
5902;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5303640365600586
5903;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5732523202896118
5904;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6759436130523682
5905;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Similar;0.6232315301895142
5906;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Similar;0.5945404171943665
5907;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.6464580297470093
5908;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5303434133529663
5909;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6171107292175293
5910;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5867940187454224
5911;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.57298743724823
5912;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6169507503509521
5913;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5959229469299316
5914;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5351547002792358
5915;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6001412868499756
5916;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5230465531349182
5917;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6367433667182922
5918;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5381888151168823
5919;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6056351661682129
5920;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.533656120300293
5921;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6777817010879517
5922;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.531256914138794
5923;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5689951181411743
5924;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.5497596263885498
5925;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.586037278175354
5926;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5563356876373291
5927;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5070515871047974
5928;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5367406010627747
5929;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.521054744720459
5930;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.513126015663147
5931;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.598304033279419
5932;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5793479681015015
5933;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6133155822753906
5934;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5304751396179199
5935;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5142214298248291
5936;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5699890851974487
5937;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5133915543556213
5938;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5878639221191406
5939;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6145148873329163
5940;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.525743305683136
5941;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5317468643188477
5942;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.532952070236206
5943;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5852355360984802
5944;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6086310148239136
5945;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5733217597007751
5946;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5082523822784424
5947;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6616678237915039
5948;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5251879096031189
5949;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5212434530258179
5950;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6790401935577393
5951;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5612825751304626
5952;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5774052739143372
5953;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5035930871963501
5954;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5560358762741089
5955;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6814416646957397
5956;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5446602702140808
5957;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.612545371055603
5958;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.520319938659668
5959;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5903280973434448
5960;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5264089107513428
5961;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5586260557174683
5962;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Similar;0.589407205581665
5963;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6536513566970825
5964;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.6574440002441406
5965;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5826351046562195
5966;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5630799531936646
5967;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5018308162689209
5968;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6368107199668884
5969;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6297935843467712
5970;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.6356621980667114
5971;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5671299695968628
5972;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.7426888942718506
5973;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5069785118103027
5974;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5438376665115356
5975;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5634196996688843
5976;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7929502725601196
5977;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.505623459815979
5978;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.8528776168823242
5979;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.778107762336731
5980;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5889127254486084
5981;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6258347630500793
5982;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6077194809913635
5983;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5893729329109192
5984;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5879520177841187
5985;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6210269331932068
5986;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6533108949661255
5987;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5464242100715637
5988;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5166124105453491
5989;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.8486950397491455
5990;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6491772532463074
5991;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6382267475128174
5992;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5875716209411621
5993;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5706027150154114
5994;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5394644141197205
5995;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.515240490436554
5996;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.609602153301239
5997;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5735916495323181
5998;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5940566658973694
5999;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7368854284286499
6000;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6897174715995789
6001;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.6057816743850708
6002;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5453217029571533
6003;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5559791326522827
6004;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6495003700256348
6005;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5325983762741089
6006;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.600816011428833
6007;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6512899398803711
6008;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6149461269378662
6009;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5856805443763733
6010;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5772006511688232
6011;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5709444284439087
6012;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5065070986747742
6013;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5431897640228271
6014;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5831081867218018
6015;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5653451681137085
6016;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5655622482299805
6017;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.562631368637085
6018;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5668450593948364
6019;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.523455023765564
6020;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5665453672409058
6021;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5003440380096436
6022;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5805366635322571
6023;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6051977872848511
6024;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5317865014076233
6025;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6202364563941956
6026;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6454092264175415
6027;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5902633666992188
6028;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5304433107376099
6029;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7138049602508545
6030;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6073851585388184
6031;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5485551357269287
6032;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.526138424873352
6033;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5260313749313354
6034;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.509768009185791
6035;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5139541625976562
6036;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5212857723236084
6037;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5592158436775208
6038;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5092472434043884
6039;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5473018288612366
6040;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6459122896194458
6041;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Similar;0.7460854649543762
6042;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Similar;0.5714597702026367
6043;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5846556425094604
6044;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.518628716468811
6045;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5367307662963867
6046;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6043423414230347
6047;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6621658802032471
6048;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.7879407405853271
6049;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5906328558921814
6050;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5678674578666687
6051;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.8170105814933777
6052;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6065287590026855
6053;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6246585845947266
6054;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5444833040237427
6055;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.548019528388977
6056;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6884167194366455
6057;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6647156476974487
6058;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7093499898910522
6059;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.693002462387085
6060;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5918189287185669
6061;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.720855712890625
6062;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6668933033943176
6063;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.650536298751831
6064;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5705296993255615
6065;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5486671924591064
6066;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5905794501304626
6067;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5453519225120544
6068;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5804528594017029
6069;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5155225396156311
6070;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6269786357879639
6071;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5670347809791565
6072;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.580960214138031
6073;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5418698787689209
6074;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.697693943977356
6075;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6030362844467163
6076;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5920355319976807
6077;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5864084959030151
6078;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5573005676269531
6079;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5910947322845459
6080;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7074222564697266
6081;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5216768383979797
6082;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6147173643112183
6083;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5264064073562622
6084;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5013023614883423
6085;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.57687908411026
6086;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5153143405914307
6087;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5103095173835754
6088;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5306271314620972
6089;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6485928297042847
6090;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5090051889419556
6091;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6397277116775513
6092;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.6596077084541321
6093;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.7154227495193481
6094;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6292425394058228
6095;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6127073764801025
6096;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6236193180084229
6097;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6400415897369385
6098;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.558178722858429
6099;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6499596834182739
6100;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6444676518440247
6101;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.8026189804077148
6102;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5776830911636353
6103;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.6152865886688232
6104;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5838688015937805
6105;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7582000494003296
6106;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6675500869750977
6107;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6279194951057434
6108;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6592115163803101
6109;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5588703155517578
6110;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6581501960754395
6111;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6424381732940674
6112;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6180042028427124
6113;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.693428635597229
6114;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5921367406845093
6115;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6429356336593628
6116;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.557180643081665
6117;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5317027568817139
6118;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6214630603790283
6119;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.522072434425354
6120;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6080803275108337
6121;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5068304538726807
6122;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5824460983276367
6123;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6092504262924194
6124;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6637827157974243
6125;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6714465022087097
6126;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5505173206329346
6127;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6747034788131714
6128;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6380869150161743
6129;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.584588885307312
6130;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5122255086898804
6131;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6471027135848999
6132;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5805017948150635
6133;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5877794027328491
6134;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5641245245933533
6135;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5711199045181274
6136;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6039080023765564
6137;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6272412538528442
6138;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.599982500076294
6139;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6406342387199402
6140;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5953069925308228
6141;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5316702723503113
6142;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5146276950836182
6143;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5368765592575073
6144;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5283028483390808
6145;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6510801315307617
6146;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5091215968132019
6147;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5083179473876953
6148;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5580116510391235
6149;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5184187889099121
6150;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5038522481918335
6151;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5129899978637695
6152;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5765877962112427
6153;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.8159323930740356
6154;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5221326351165771
6155;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5927589535713196
6156;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5533076524734497
6157;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5355798006057739
6158;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.566259503364563
6159;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5713009834289551
6160;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5894944667816162
6161;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5793536901473999
6162;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5316932797431946
6163;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5195453763008118
6164;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5610678791999817
6165;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5560407042503357
6166;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.511806845664978
6167;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5041356086730957
6168;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Similar;0.5219945311546326
6169;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Similar;0.5432180166244507
6170;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6556257009506226
6171;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.517863392829895
6172;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.5596302151679993
6173;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.590671181678772
6174;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5592108964920044
6175;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6299917697906494
6176;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6273940801620483
6177;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5555661916732788
6178;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6970396637916565
6179;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5846199989318848
6180;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8111629486083984
6181;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7783864736557007
6182;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7621328830718994
6183;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5366224050521851
6184;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.5637290477752686
6185;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5010658502578735
6186;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.544058620929718
6187;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6548376083374023
6188;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7027235627174377
6189;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6945544481277466
6190;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5604845285415649
6191;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6691919565200806
6192;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6502659320831299
6193;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5230047106742859
6194;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6710693836212158
6195;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7081271409988403
6196;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.621226966381073
6197;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5703195333480835
6198;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5865657329559326
6199;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6413205862045288
6200;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6876451969146729
6201;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6465777158737183
6202;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5697180032730103
6203;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7560475468635559
6204;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6470497846603394
6205;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5157153010368347
6206;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7237122654914856
6207;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5279890298843384
6208;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6631808280944824
6209;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7377164959907532
6210;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5824090242385864
6211;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5561151504516602
6212;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5527105331420898
6213;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6520721316337585
6214;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6137893795967102
6215;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6063268184661865
6216;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5933572053909302
6217;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6200027465820312
6218;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5971933007240295
6219;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7773526906967163
6220;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6436654329299927
6221;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5032332539558411
6222;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.539936363697052
6223;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5996891260147095
6224;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5679786205291748
6225;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7056739330291748
6226;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5480037331581116
6227;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6122642755508423
6228;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5506279468536377
6229;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5788888335227966
6230;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.8259381055831909
6231;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5526623725891113
6232;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.516524076461792
6233;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.572529673576355
6234;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Similar;0.5501338243484497
6235;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.648934543132782
6236;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6098209619522095
6237;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6027959585189819
6238;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6294742226600647
6239;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6077627539634705
6240;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5520125031471252
6241;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.620315432548523
6242;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6040246486663818
6243;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6548010110855103
6244;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6637036204338074
6245;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6447742581367493
6246;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5830902457237244
6247;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6370143890380859
6248;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6543323993682861
6249;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.659896969795227
6250;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5213338136672974
6251;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5336422920227051
6252;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5884969234466553
6253;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.548943042755127
6254;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5780341029167175
6255;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5673410892486572
6256;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5843232870101929
6257;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5332908034324646
6258;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6323242783546448
6259;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5338497161865234
6260;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5801690220832825
6261;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5725295543670654
6262;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5153082609176636
6263;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5128710269927979
6264;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6562726497650146
6265;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6144192814826965
6266;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.531704306602478
6267;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6060364246368408
6268;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5532656908035278
6269;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6521633267402649
6270;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5583878755569458
6271;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7137308120727539
6272;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.744585394859314
6273;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5151195526123047
6274;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.5522129535675049
6275;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.6025368571281433
6276;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6124695539474487
6277;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.7465468645095825
6278;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5049502849578857
6279;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5842208862304688
6280;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.8300827741622925
6281;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7208558320999146
6282;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7635710835456848
6283;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5781809091567993
6284;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5777139663696289
6285;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5076974034309387
6286;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6912703514099121
6287;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6212587356567383
6288;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7331100702285767
6289;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5818613171577454
6290;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.529751718044281
6291;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6091629862785339
6292;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.532988429069519
6293;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6843883395195007
6294;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7010115385055542
6295;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5792322158813477
6296;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.6529893279075623
6297;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5619293451309204
6298;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5364265441894531
6299;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5954797267913818
6300;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5132254362106323
6301;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6644262075424194
6302;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5228259563446045
6303;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5609124898910522
6304;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6191955804824829
6305;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6080679893493652
6306;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.560185432434082
6307;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5145715475082397
6308;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6070069074630737
6309;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5979639887809753
6310;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5112342834472656
6311;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5750559568405151
6312;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6395159959793091
6313;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5436620712280273
6314;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.652658224105835
6315;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.558678388595581
6316;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.518123984336853
6317;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6705292463302612
6318;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5689314603805542
6319;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.528319239616394
6320;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5925816297531128
6321;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5000298619270325
6322;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.542109489440918
6323;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5972516536712646
6324;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5843779444694519
6325;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5493091940879822
6326;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.567022442817688
6327;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5316941142082214
6328;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5687961578369141
6329;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5939558148384094
6330;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Similar;0.7835296392440796
6331;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.6046992540359497
6332;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.5125391483306885
6333;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.526138424873352
6334;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5080170035362244
6335;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.581012487411499
6336;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5441678762435913
6337;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5051201581954956
6338;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5006843209266663
6339;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6804966926574707
6340;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7981492877006531
6341;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5168971419334412
6342;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5875897407531738
6343;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5470868349075317
6344;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5778298377990723
6345;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5866258144378662
6346;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6504172682762146
6347;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5492194294929504
6348;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5699406862258911
6349;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7780832648277283
6350;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6378891468048096
6351;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5779514312744141
6352;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6829465627670288
6353;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7120645046234131
6354;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5913379788398743
6355;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6157758235931396
6356;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5948908925056458
6357;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.7290365695953369
6358;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5662018656730652
6359;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7329088449478149
6360;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.684145987033844
6361;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.543061375617981
6362;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.8466690182685852
6363;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7689000368118286
6364;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.515316903591156
6365;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6765748262405396
6366;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6025105714797974
6367;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5528656244277954
6368;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6255776882171631
6369;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5825910568237305
6370;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6199861764907837
6371;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5797516703605652
6372;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5979280471801758
6373;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6363162398338318
6374;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5427201986312866
6375;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.543026328086853
6376;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5862393379211426
6377;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5018030405044556
6378;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5114424228668213
6379;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6143209934234619
6380;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5203630924224854
6381;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.608427882194519
6382;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6613414287567139
6383;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6004294753074646
6384;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7109504342079163
6385;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5029600858688354
6386;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Similar;0.7900137305259705
6387;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5946136713027954
6388;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5652726888656616
6389;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.7435311079025269
6390;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6536173820495605
6391;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6002644896507263
6392;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7741975784301758
6393;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5388190746307373
6394;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5553984642028809
6395;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5884469747543335
6396;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.749584436416626
6397;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6177773475646973
6398;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.515673041343689
6399;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.719393789768219
6400;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7038241624832153
6401;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5400971174240112
6402;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7529069781303406
6403;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7169575691223145
6404;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5159581303596497
6405;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5686545372009277
6406;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5101858377456665
6407;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5619246959686279
6408;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5724800825119019
6409;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5148825645446777
6410;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7004369497299194
6411;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5953748226165771
6412;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6477549076080322
6413;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.7219869494438171
6414;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5827893018722534
6415;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6672636866569519
6416;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.569450855255127
6417;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.519055962562561
6418;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6368701457977295
6419;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7938886880874634
6420;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6052131652832031
6421;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5323513150215149
6422;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6234913468360901
6423;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7608774900436401
6424;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6865296959877014
6425;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7087505459785461
6426;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6370828151702881
6427;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5442445874214172
6428;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5911637544631958
6429;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6637426614761353
6430;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.8062189817428589
6431;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Similar;0.6467103958129883
6432;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5313875675201416
6433;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5095868706703186
6434;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5109281539916992
6435;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5603172779083252
6436;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6375869512557983
6437;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.575610339641571
6438;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6756010055541992
6439;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5540536642074585
6440;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Similar;0.5355368852615356
6441;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5965545773506165
6442;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6131433248519897
6443;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5380313992500305
6444;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5899215936660767
6445;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5039551854133606
6446;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5842630863189697
6447;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5132530331611633
6448;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6565768718719482
6449;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7331709861755371
6450;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6947813630104065
6451;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5972985625267029
6452;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6047333478927612
6453;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5294214487075806
6454;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5429599285125732
6455;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.529833197593689
6456;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5648968815803528
6457;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5739606618881226
6458;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5059983134269714
6459;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.649770200252533
6460;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5948891639709473
6461;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5028654932975769
6462;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5420320630073547
6463;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5379810333251953
6464;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5695160627365112
6465;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6049262285232544
6466;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5237756967544556
6467;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5575002431869507
6468;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5905051231384277
6469;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5940364599227905
6470;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6303051710128784
6471;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.633537232875824
6472;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6890157461166382
6473;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5567137002944946
6474;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.552223801612854
6475;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.542263925075531
6476;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5257788300514221
6477;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5225793719291687
6478;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5031108260154724
6479;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5490350723266602
6480;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6414768099784851
6481;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6228647232055664
6482;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.6407105922698975
6483;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6821609139442444
6484;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.5713086724281311
6485;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.517219066619873
6486;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5850659608840942
6487;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5003035068511963
6488;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.8208510875701904
6489;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6039571762084961
6490;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.63266921043396
6491;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5153471231460571
6492;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6779284477233887
6493;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6923073530197144
6494;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5132973790168762
6495;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5008271336555481
6496;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5196047425270081
6497;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5416035056114197
6498;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5999577641487122
6499;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5413807034492493
6500;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5125296115875244
6501;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5022640228271484
6502;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5519294738769531
6503;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5419515371322632
6504;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5000593662261963
6505;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5960903763771057
6506;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5547780990600586
6507;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5953975915908813
6508;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5215591788291931
6509;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5684961080551147
6510;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5948092937469482
6511;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5081503391265869
6512;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5603376626968384
6513;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5526415109634399
6514;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.647621214389801
6515;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.65330570936203
6516;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6211508512496948
6517;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6247081756591797
6518;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6076860427856445
6519;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.699015736579895
6520;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5374348163604736
6521;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7711009979248047
6522;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7403160929679871
6523;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.5105071067810059
6524;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6376867890357971
6525;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5376410484313965
6526;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6628240346908569
6527;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5390428304672241
6528;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5589736700057983
6529;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6279395818710327
6530;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6146785020828247
6531;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7777502536773682
6532;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.767754077911377
6533;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6658125519752502
6534;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6616925001144409
6535;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.652653157711029
6536;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5804210901260376
6537;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6809258460998535
6538;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5723940134048462
6539;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6667011976242065
6540;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5314251780509949
6541;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6255384683609009
6542;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5389577150344849
6543;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5376701354980469
6544;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5560680627822876
6545;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5741317272186279
6546;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6270039081573486
6547;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.589203953742981
6548;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5180879235267639
6549;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5230274200439453
6550;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5387164354324341
6551;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5383424758911133
6552;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6176021099090576
6553;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5239408016204834
6554;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6591470241546631
6555;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6613888144493103
6556;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6685859560966492
6557;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.630568265914917
6558;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5692324042320251
6559;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6830132007598877
6560;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6008737087249756
6561;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5819165706634521
6562;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6130391955375671
6563;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6123945713043213
6564;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6077077388763428
6565;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5250492095947266
6566;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5666744709014893
6567;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5220710635185242
6568;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.684581995010376
6569;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5487638711929321
6570;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5494478940963745
6571;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.603573203086853
6572;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6451401710510254
6573;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5936909914016724
6574;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6022986173629761
6575;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5704770088195801
6576;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Similar;0.5510475635528564
6577;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6143535375595093
6578;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.7537873387336731
6579;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5231233835220337
6580;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6370514035224915
6581;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.598490834236145
6582;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.565306544303894
6583;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5183016657829285
6584;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5259075164794922
6585;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6535464525222778
6586;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6637743711471558
6587;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6757253408432007
6588;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7412323355674744
6589;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5555030107498169
6590;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7442991733551025
6591;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6518248319625854
6592;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6259180307388306
6593;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6368552446365356
6594;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5528773665428162
6595;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.623319149017334
6596;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5624821782112122
6597;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6894513368606567
6598;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6378103494644165
6599;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5306833386421204
6600;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.56983882188797
6601;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5823159217834473
6602;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6365147829055786
6603;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5495227575302124
6604;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6170710325241089
6605;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.504030168056488
6606;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6248716115951538
6607;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7132652401924133
6608;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.593381404876709
6609;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6811349391937256
6610;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5508476495742798
6611;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5791814923286438
6612;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.606429934501648
6613;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5799947381019592
6614;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7816914319992065
6615;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5485213994979858
6616;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.665050745010376
6617;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5502704381942749
6618;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5427634716033936
6619;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5495632886886597
6620;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5381687879562378
6621;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5633447170257568
6622;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5405277013778687
6623;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6660381555557251
6624;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5671454668045044
6625;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7142512798309326
6626;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6116942167282104
6627;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5898917317390442
6628;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.5200691819190979
6629;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5540046691894531
6630;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.6405752301216125
6631;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5476303100585938
6632;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5667304992675781
6633;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.590420126914978
6634;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6279380917549133
6635;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7195020914077759
6636;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5957940816879272
6637;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.531079113483429
6638;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6044949293136597
6639;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5672358274459839
6640;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.616387128829956
6641;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5337338447570801
6642;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5157747864723206
6643;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5454527735710144
6644;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5095690488815308
6645;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5521057844161987
6646;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5329810380935669
6647;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.525873064994812
6648;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6263259649276733
6649;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.610741138458252
6650;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5287877321243286
6651;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6200419664382935
6652;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5252838730812073
6653;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5803155899047852
6654;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.602087140083313
6655;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5207461714744568
6656;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5040044188499451
6657;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6076642870903015
6658;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7171112895011902
6659;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.542231559753418
6660;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6217906475067139
6661;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5010459423065186
6662;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6912732720375061
6663;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5614374876022339
6664;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7058418989181519
6665;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5526472330093384
6666;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Similar;0.6400161981582642
6667;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.520384669303894
6668;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5951477289199829
6669;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.6274529695510864
6670;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5140479803085327
6671;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6598020792007446
6672;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5080254077911377
6673;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7116087079048157
6674;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.690224826335907
6675;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6097941994667053
6676;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6000262498855591
6677;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5140811204910278
6678;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6289738416671753
6679;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5032364130020142
6680;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6024818420410156
6681;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5969340801239014
6682;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5871868133544922
6683;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5169888734817505
6684;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5243483781814575
6685;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5446485280990601
6686;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5947058200836182
6687;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5192126631736755
6688;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5544592142105103
6689;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5085222721099854
6690;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6274410486221313
6691;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5153125524520874
6692;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5038378238677979
6693;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6042851209640503
6694;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5726460814476013
6695;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.514687180519104
6696;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5258898138999939
6697;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6091192960739136
6698;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5044630765914917
6699;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6474254131317139
6700;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6659548282623291
6701;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6320593357086182
6702;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5688397288322449
6703;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.532015860080719
6704;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5352806448936462
6705;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6586062908172607
6706;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6035234928131104
6707;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6153157949447632
6708;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6454076170921326
6709;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5808608531951904
6710;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6079250574111938
6711;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Similar;0.5473284721374512
6712;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Similar;0.524713933467865
6713;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6398517489433289
6714;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6182538270950317
6715;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.6645318269729614
6716;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5792990922927856
6717;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6234621405601501
6718;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.6303244829177856
6719;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.7700308561325073
6720;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7122964859008789
6721;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7597086429595947
6722;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.654280424118042
6723;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6942946910858154
6724;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5034841895103455
6725;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6299751996994019
6726;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7354115843772888
6727;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5233348608016968
6728;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6723580360412598
6729;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6410335302352905
6730;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6732041835784912
6731;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5468316674232483
6732;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5260908603668213
6733;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6809283494949341
6734;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5548557043075562
6735;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5706833600997925
6736;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6466548442840576
6737;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6987708210945129
6738;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6030880212783813
6739;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.633296549320221
6740;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5121636390686035
6741;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5156935453414917
6742;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6388622522354126
6743;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6452657580375671
6744;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.552313506603241
6745;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6315250992774963
6746;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5030789375305176
6747;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5847214460372925
6748;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7548837661743164
6749;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6149508953094482
6750;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5043039917945862
6751;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7400435209274292
6752;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5686985850334167
6753;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6566274166107178
6754;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6195693612098694
6755;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6092555522918701
6756;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6868966817855835
6757;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.614995539188385
6758;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5255188941955566
6759;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6207987666130066
6760;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5760854482650757
6761;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5308433771133423
6762;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6342990398406982
6763;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5453811883926392
6764;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6567139625549316
6765;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5007479190826416
6766;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.71785569190979
6767;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6153544783592224
6768;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6854111552238464
6769;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5113948583602905
6770;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5202924013137817
6771;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.542500376701355
6772;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5025244951248169
6773;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5561653971672058
6774;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7030514478683472
6775;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6658666133880615
6776;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6364632844924927
6777;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5448564291000366
6778;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5789510011672974
6779;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5614833831787109
6780;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5442583560943604
6781;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.6236982345581055
6782;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5630533695220947
6783;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5501878261566162
6784;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6389653086662292
6785;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6131922006607056
6786;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5626217126846313
6787;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7735005021095276
6788;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5250346064567566
6789;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5909498929977417
6790;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5010515451431274
6791;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6450796127319336
6792;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6334819793701172
6793;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.547932505607605
6794;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6418838500976562
6795;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.6808735132217407
6796;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5004159808158875
6797;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5306380987167358
6798;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6335605382919312
6799;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5171699523925781
6800;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5356450080871582
6801;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6681930422782898
6802;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6552228927612305
6803;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5047379732131958
6804;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6824696063995361
6805;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6239124536514282
6806;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6246147155761719
6807;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6147975325584412
6808;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5213618874549866
6809;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7407040596008301
6810;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5686135292053223
6811;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6112549901008606
6812;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6081589460372925
6813;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.7014851570129395
6814;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7153649926185608
6815;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5970492959022522
6816;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6040120124816895
6817;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Similar;0.8647539615631104
6818;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.7307064533233643
6819;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.54802405834198
6820;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5171470046043396
6821;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.551573634147644
6822;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7058289051055908
6823;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6608676910400391
6824;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6135485172271729
6825;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6260070204734802
6826;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5104379057884216
6827;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6686207056045532
6828;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6690852642059326
6829;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6822094917297363
6830;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.7850580215454102
6831;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5996798872947693
6832;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5152574777603149
6833;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5289402008056641
6834;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7980963587760925
6835;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6517317891120911
6836;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5290581583976746
6837;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7791879773139954
6838;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5462985038757324
6839;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7480922937393188
6840;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.51954185962677
6841;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6137045621871948
6842;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.8015408515930176
6843;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.53685462474823
6844;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6168155074119568
6845;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6755820512771606
6846;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5491212606430054
6847;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5898277759552002
6848;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5839502811431885
6849;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5706282258033752
6850;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5971742272377014
6851;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.8483313918113708
6852;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6448246240615845
6853;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5654881000518799
6854;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5580719709396362
6855;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5888407230377197
6856;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6566689014434814
6857;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.725860595703125
6858;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5233528017997742
6859;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6311919689178467
6860;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5285583734512329
6861;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.767729640007019
6862;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5410808324813843
6863;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Similar;0.5663597583770752
6864;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5647094249725342
6865;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5578376054763794
6866;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5973421335220337
6867;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5607991218566895
6868;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5008916258811951
6869;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.8542777299880981
6870;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6348923444747925
6871;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5408123731613159
6872;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6762529611587524
6873;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.8357622623443604
6874;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5335320234298706
6875;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5488483905792236
6876;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6262269020080566
6877;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.8131567239761353
6878;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.7141659259796143
6879;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.8518403768539429
6880;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.511634349822998
6881;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.791874349117279
6882;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.8058533668518066
6883;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5094059109687805
6884;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6484415531158447
6885;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6117463707923889
6886;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6281412243843079
6887;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5547726154327393
6888;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5143537521362305
6889;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7945252060890198
6890;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5975412726402283
6891;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5975467562675476
6892;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5581304430961609
6893;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5324177742004395
6894;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6406561136245728
6895;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.520929753780365
6896;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5059616565704346
6897;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5939644575119019
6898;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6996239423751831
6899;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6479848027229309
6900;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Similar;0.5541324019432068
6901;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Similar;0.7011369466781616
6902;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Similar;0.5627260208129883
6903;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7740997672080994
6904;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6958227157592773
6905;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.6288915872573853
6906;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6419094800949097
6907;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5319854021072388
6908;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5876964330673218
6909;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6823554039001465
6910;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6720414757728577
6911;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5377181172370911
6912;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.7015718817710876
6913;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5804691314697266
6914;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5614000558853149
6915;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6545578837394714
6916;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6162929534912109
6917;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5122544169425964
6918;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6220453977584839
6919;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5917952060699463
6920;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5111207962036133
6921;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6375749111175537
6922;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5861374139785767
6923;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5520899295806885
6924;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.733144998550415
6925;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6975076794624329
6926;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.655479907989502
6927;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6800723075866699
6928;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.8012063503265381
6929;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5085238814353943
6930;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5638092756271362
6931;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6665747761726379
6932;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7588673830032349
6933;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6807161569595337
6934;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5200970768928528
6935;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6455806493759155
6936;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6034003496170044
6937;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6435978412628174
6938;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6709202527999878
6939;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6684409379959106
6940;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6878703236579895
6941;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.624664306640625
6942;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7620975971221924
6943;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6562786102294922
6944;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5145369172096252
6945;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6188682317733765
6946;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5467050075531006
6947;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5936610102653503
6948;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5162062644958496
6949;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.5921326875686646
6950;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5288263559341431
6951;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5684455633163452
6952;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5577940940856934
6953;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6452242136001587
6954;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5204900503158569
6955;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5136737823486328
6956;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5695160627365112
6957;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5717027187347412
6958;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5510056018829346
6959;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5734726190567017
6960;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.7361640930175781
6961;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5752836465835571
6962;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5437630414962769
6963;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5562905669212341
6964;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5030388832092285
6965;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5677024126052856
6966;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.537780225276947
6967;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.550292432308197
6968;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5143025517463684
6969;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6369814872741699
6970;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5863369703292847
6971;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5682786107063293
6972;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5759105682373047
6973;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5033574104309082
6974;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5086252689361572
6975;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5661565065383911
6976;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.652906060218811
6977;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6597639322280884
6978;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5110775232315063
6979;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5083763599395752
6980;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5142725110054016
6981;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5641028881072998
6982;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6112328767776489
6983;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5336094498634338
6984;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5798321962356567
6985;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6476579904556274
6986;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5257086753845215
6987;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5495815277099609
6988;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5330138206481934
6989;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5046246647834778
6990;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.7744957804679871
6991;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.559779703617096
6992;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5379021763801575
6993;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.749940037727356
6994;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5547012686729431
6995;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6117100119590759
6996;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6166778802871704
6997;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6298995614051819
6998;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5137560367584229
6999;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.61518394947052
7000;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5398709177970886
7001;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.533867597579956
7002;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5846238136291504
7003;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.5393821001052856
7004;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5657025575637817
7005;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6232054233551025
7006;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5717372298240662
7007;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5154100060462952
7008;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5487310886383057
7009;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6097862124443054
7010;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5388266444206238
7011;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5773688554763794
7012;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.506819486618042
7013;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5067537426948547
7014;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5108307600021362
7015;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5581335425376892
7016;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5287664532661438
7017;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6220054626464844
7018;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5082278847694397
7019;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5165549516677856
7020;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5688449740409851
7021;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5170453190803528
7022;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5516971349716187
7023;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5703123807907104
7024;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5519979000091553
7025;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5535529851913452
7026;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5091460347175598
7027;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5059483051300049
7028;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5761313438415527
7029;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5341863632202148
7030;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Similar;0.5286674499511719
7031;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6111152172088623
7032;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6722227334976196
7033;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5222054123878479
7034;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6739011406898499
7035;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7018084526062012
7036;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5028392672538757
7037;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6130905151367188
7038;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5240448117256165
7039;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5206499099731445
7040;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5145227313041687
7041;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5781505703926086
7042;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5349590182304382
7043;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5612401962280273
7044;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5193070769309998
7045;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5346333980560303
7046;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5387715697288513
7047;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5830225944519043
7048;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5347493290901184
7049;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.561342716217041
7050;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5694655776023865
7051;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5956560969352722
7052;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.611378014087677
7053;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6747475862503052
7054;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5835409164428711
7055;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6056109666824341
7056;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.6649806499481201
7057;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.5936208963394165
7058;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5781749486923218
7059;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5800659656524658
7060;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5461063981056213
7061;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.8726144433021545
7062;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5834825038909912
7063;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5714551210403442
7064;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.670924186706543
7065;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6326407194137573
7066;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6774364113807678
7067;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.6067820191383362
7068;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.5839093923568726
7069;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.578264594078064
7070;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5482211709022522
7071;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6021565198898315
7072;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6041335463523865
7073;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5515943765640259
7074;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5759517550468445
7075;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5532745122909546
7076;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5401826500892639
7077;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5903027057647705
7078;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7195349931716919
7079;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.630976676940918
7080;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6019923686981201
7081;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5663583278656006
7082;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7052001953125
7083;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5477024912834167
7084;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5139607191085815
7085;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5924116373062134
7086;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6986020803451538
7087;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5508377552032471
7088;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5828543901443481
7089;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5641982555389404
7090;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5065152645111084
7091;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7323966026306152
7092;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6179234981536865
7093;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7269116044044495
7094;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5805060863494873
7095;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Similar;0.7608485817909241
7096;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.7466703653335571
7097;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.7616321444511414
7098;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6971476674079895
7099;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5876321196556091
7100;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.7561166882514954
7101;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.557142972946167
7102;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.7310390472412109
7103;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6932568550109863
7104;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5710481405258179
7105;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5121638774871826
7106;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6190198659896851
7107;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6149019002914429
7108;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5322034955024719
7109;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.547018826007843
7110;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6346527338027954
7111;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5920592546463013
7112;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5487026572227478
7113;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.551800549030304
7114;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.625482976436615
7115;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.627447783946991
7116;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5376418828964233
7117;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5355575084686279
7118;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6343632936477661
7119;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6771997213363647
7120;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5037425756454468
7121;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6769673824310303
7122;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6697850823402405
7123;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6387215852737427
7124;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.605424165725708
7125;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5931446552276611
7126;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7804960608482361
7127;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6895563006401062
7128;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6142963767051697
7129;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5681149959564209
7130;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6321500539779663
7131;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.627468466758728
7132;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5011784434318542
7133;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.750016450881958
7134;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6666874885559082
7135;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6298284530639648
7136;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6672496199607849
7137;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6925129890441895
7138;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5721540451049805
7139;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6194216012954712
7140;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.692574679851532
7141;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6153337955474854
7142;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5649808645248413
7143;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5378357768058777
7144;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Similar;0.7161304950714111
7145;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.6784539818763733
7146;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6110095977783203
7147;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6132171154022217
7148;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5041813850402832
7149;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.7522804737091064
7150;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5885498523712158
7151;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.7438898086547852
7152;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6625499129295349
7153;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5045569539070129
7154;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5100449919700623
7155;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5195735692977905
7156;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6623485088348389
7157;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6527976393699646
7158;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.7228200435638428
7159;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6121950149536133
7160;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5302908420562744
7161;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5649195313453674
7162;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5508996248245239
7163;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5272964239120483
7164;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5871299505233765
7165;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6336190700531006
7166;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5649687051773071
7167;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6353100538253784
7168;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5771596431732178
7169;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6986263394355774
7170;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6902234554290771
7171;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5366116166114807
7172;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7404804229736328
7173;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6295401453971863
7174;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6531343460083008
7175;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6439456343650818
7176;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6484529972076416
7177;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6319930553436279
7178;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6919940710067749
7179;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5415668487548828
7180;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6682800054550171
7181;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5439255237579346
7182;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6206057071685791
7183;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5191491842269897
7184;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6945354342460632
7185;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5568237900733948
7186;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.672788143157959
7187;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5898169279098511
7188;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6774739027023315
7189;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6478818655014038
7190;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7221212387084961
7191;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7337555289268494
7192;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5330052375793457
7193;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Similar;0.5092434287071228
7194;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Similar;0.6220136880874634
7195;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6132428646087646
7196;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5901334881782532
7197;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5171099901199341
7198;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6922134160995483
7199;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5418422222137451
7200;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6858342885971069
7201;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5313584208488464
7202;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5592261552810669
7203;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6303655505180359
7204;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.7200626134872437
7205;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.584805965423584
7206;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6379307508468628
7207;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6705765724182129
7208;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6536105275154114
7209;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5027400851249695
7210;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5637794733047485
7211;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.648196816444397
7212;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6008286476135254
7213;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6506075859069824
7214;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6019042730331421
7215;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5017499923706055
7216;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5096380710601807
7217;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5523298978805542
7218;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.516743540763855
7219;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7950189113616943
7220;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.526565670967102
7221;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5960080623626709
7222;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5874790549278259
7223;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5275287628173828
7224;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5748189687728882
7225;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6301116943359375
7226;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6966266632080078
7227;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6002951860427856
7228;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5076098442077637
7229;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.736020565032959
7230;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5403409004211426
7231;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6092701554298401
7232;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6249420642852783
7233;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5986316204071045
7234;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5897084474563599
7235;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5279518365859985
7236;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6713619232177734
7237;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6108742356300354
7238;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6665799617767334
7239;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5872527956962585
7240;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5254995822906494
7241;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.561301589012146
7242;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.761735200881958
7243;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.580382227897644
7244;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5944914817810059
7245;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5717941522598267
7246;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5351783037185669
7247;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5013730525970459
7248;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5057752132415771
7249;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5014264583587646
7250;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6270889043807983
7251;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5010845065116882
7252;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5180808305740356
7253;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6074912548065186
7254;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5929715037345886
7255;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.548337459564209
7256;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6106506586074829
7257;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5713027715682983
7258;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5396851301193237
7259;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5865482687950134
7260;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6069245338439941
7261;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6036936044692993
7262;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5705745816230774
7263;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5983529090881348
7264;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5236910581588745
7265;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6171917915344238
7266;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7722221612930298
7267;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6541504263877869
7268;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6204370260238647
7269;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5285277366638184
7270;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5383085012435913
7271;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.7417484521865845
7272;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.502487301826477
7273;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5049436092376709
7274;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6446651220321655
7275;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6746182441711426
7276;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7144997715950012
7277;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.8534252643585205
7278;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5677167177200317
7279;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5533046722412109
7280;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6549593210220337
7281;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5749142169952393
7282;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5194014310836792
7283;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5092755556106567
7284;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6013944149017334
7285;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5190712213516235
7286;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5035675168037415
7287;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5282589197158813
7288;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.8334860801696777
7289;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6418048143386841
7290;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7743940353393555
7291;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5752761960029602
7292;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5516729354858398
7293;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5154404044151306
7294;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5433258414268494
7295;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.578994870185852
7296;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6038469076156616
7297;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7567147016525269
7298;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7691922187805176
7299;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5404934883117676
7300;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.6260396242141724
7301;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5414894819259644
7302;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.6202366948127747
7303;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5040616989135742
7304;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5364689826965332
7305;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5825181007385254
7306;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.573241114616394
7307;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5506044626235962
7308;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5721244215965271
7309;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6268973350524902
7310;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5944291353225708
7311;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.6113827228546143
7312;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5328179597854614
7313;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5098806619644165
7314;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5053746700286865
7315;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5603888034820557
7316;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5055325031280518
7317;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.502784013748169
7318;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5566189289093018
7319;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5403016805648804
7320;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.6459406614303589
7321;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.571373701095581
7322;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6418461799621582
7323;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5322502851486206
7324;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5902981758117676
7325;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5225406289100647
7326;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6787681579589844
7327;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5136243104934692
7328;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6208667755126953
7329;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5259605646133423
7330;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.655204713344574
7331;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7023472785949707
7332;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5894709825515747
7333;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.590347170829773
7334;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5362271666526794
7335;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6023558378219604
7336;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5133458375930786
7337;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5222237706184387
7338;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.7155536413192749
7339;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5069776773452759
7340;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6132631301879883
7341;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.671329140663147
7342;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6209300756454468
7343;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5874813795089722
7344;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Similar;0.6010432243347168
7345;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5649738311767578
7346;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5126445293426514
7347;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5761250257492065
7348;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5326727032661438
7349;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.524770975112915
7350;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.511599063873291
7351;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.7267922163009644
7352;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5531231164932251
7353;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5242620706558228
7354;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7125687003135681
7355;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5212559700012207
7356;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6809834241867065
7357;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5956267714500427
7358;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6338965892791748
7359;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5497020483016968
7360;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5128819942474365
7361;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6956983804702759
7362;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5967389941215515
7363;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5626741647720337
7364;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.546249508857727
7365;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.640982449054718
7366;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5262048244476318
7367;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7431272864341736
7368;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5378093719482422
7369;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7276898622512817
7370;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5897808074951172
7371;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Similar;0.5282422304153442
7372;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5039373636245728
7373;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5783940553665161
7374;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.5299745202064514
7375;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.561566948890686
7376;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6019780039787292
7377;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5201597213745117
7378;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.8286669254302979
7379;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6247607469558716
7380;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.7169649600982666
7381;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6581640839576721
7382;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5092107653617859
7383;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5286060571670532
7384;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6817988753318787
7385;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7352710962295532
7386;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7005342841148376
7387;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.5859967470169067
7388;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6369749307632446
7389;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.6779112815856934
7390;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5661376714706421
7391;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6345682144165039
7392;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.7140110731124878
7393;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.7157474756240845
7394;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.8101249933242798
7395;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.732966423034668
7396;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6773765087127686
7397;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5154646635055542
7398;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5845667123794556
7399;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5885142087936401
7400;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5301454067230225
7401;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.655204713344574
7402;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6221182346343994
7403;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5869635343551636
7404;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5548914074897766
7405;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5189282894134521
7406;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6407483816146851
7407;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5862945318222046
7408;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7099547386169434
7409;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Similar;0.6477146148681641
7410;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.9872711896896362
7411;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5425063371658325
7412;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5770286321640015
7413;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.772837221622467
7414;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.519737958908081
7415;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5752255916595459
7416;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.562598705291748
7417;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.7183713912963867
7418;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5697977542877197
7419;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6684585213661194
7420;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6595150232315063
7421;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6639313697814941
7422;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6873775124549866
7423;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5883878469467163
7424;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.527682900428772
7425;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.505852222442627
7426;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6813101768493652
7427;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6417206525802612
7428;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5435230135917664
7429;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6004783511161804
7430;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6999042630195618
7431;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5813031792640686
7432;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6273294687271118
7433;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6696613430976868
7434;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7148979902267456
7435;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.685287594795227
7436;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6501283645629883
7437;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6239383220672607
7438;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6285595893859863
7439;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5552302002906799
7440;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6282285451889038
7441;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5301509499549866
7442;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6448997259140015
7443;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7137105464935303
7444;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.554632306098938
7445;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6732553243637085
7446;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.8096705675125122
7447;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.500527024269104
7448;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Similar;0.6515060663223267
7449;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5432859659194946
7450;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.6508023738861084
7451;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5494386553764343
7452;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5328727960586548
7453;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5336512327194214
7454;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.647506833076477
7455;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5922549962997437
7456;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5328754186630249
7457;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5163670778274536
7458;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6266211867332458
7459;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5392544865608215
7460;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5238337516784668
7461;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5531843900680542
7462;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6367601156234741
7463;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5249871611595154
7464;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5203130841255188
7465;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5620828866958618
7466;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.531784176826477
7467;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6422265768051147
7468;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7408163547515869
7469;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Similar;0.5799300670623779
7470;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5970524549484253
7471;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.7724260091781616
7472;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5067456364631653
7473;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5899355411529541
7474;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.601977527141571
7475;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.730093240737915
7476;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6062419414520264
7477;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6952236890792847
7478;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.6536031365394592
7479;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.699425220489502
7480;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7089712619781494
7481;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.572645902633667
7482;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5396699905395508
7483;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5185025334358215
7484;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7007017731666565
7485;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.628551721572876
7486;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5646179914474487
7487;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5983450412750244
7488;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6893291473388672
7489;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5634727478027344
7490;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6346339583396912
7491;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6787554025650024
7492;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7068049907684326
7493;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6907052397727966
7494;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6533260941505432
7495;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.628532886505127
7496;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6313855648040771
7497;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5603151321411133
7498;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6032791137695312
7499;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5001155138015747
7500;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6330317854881287
7501;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7268956303596497
7502;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5497686862945557
7503;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6907002925872803
7504;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.822981595993042
7505;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Similar;0.5088707804679871
7506;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5454003810882568
7507;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6511549353599548
7508;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.8588235378265381
7509;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5771188735961914
7510;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7791812419891357
7511;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5065181255340576
7512;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.737581193447113
7513;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5604003667831421
7514;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.689572811126709
7515;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6536187529563904
7516;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.555508553981781
7517;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5128206014633179
7518;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7352467775344849
7519;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6331593990325928
7520;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6623623371124268
7521;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5902478694915771
7522;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5597397089004517
7523;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6310358643531799
7524;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Similar;0.5566637516021729
7525;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5421584844589233
7526;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5692120790481567
7527;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5383581519126892
7528;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5926988124847412
7529;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5667024254798889
7530;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5631771087646484
7531;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6079376339912415
7532;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5148102641105652
7533;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5340849161148071
7534;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.534321665763855
7535;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5898733139038086
7536;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5849745869636536
7537;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6189399361610413
7538;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5059167742729187
7539;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5946601629257202
7540;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.580817461013794
7541;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5012591481208801
7542;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5564250349998474
7543;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5181366801261902
7544;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6081055402755737
7545;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Similar;0.5151722431182861
7546;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5130795836448669
7547;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.7393372654914856
7548;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5406661629676819
7549;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6142128705978394
7550;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5815677642822266
7551;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6280657052993774
7552;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5310434103012085
7553;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5994623899459839
7554;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5953364372253418
7555;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5358903408050537
7556;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.579856276512146
7557;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5441843271255493
7558;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5503040552139282
7559;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.7396653890609741
7560;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.58149254322052
7561;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.515960693359375
7562;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5951768159866333
7563;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7685164213180542
7564;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6516420841217041
7565;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5843283534049988
7566;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6126131415367126
7567;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5919407606124878
7568;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5677895545959473
7569;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5188146829605103
7570;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6734126806259155
7571;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5178029537200928
7572;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5809415578842163
7573;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6170523166656494
7574;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6751600503921509
7575;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5456067323684692
7576;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5243233442306519
7577;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5200638175010681
7578;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.6058825254440308
7579;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Similar;0.5032624006271362
7580;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5021179914474487
7581;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5496144890785217
7582;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.548633873462677
7583;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5291507244110107
7584;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5542769432067871
7585;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.545020580291748
7586;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5152300596237183
7587;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6483830809593201
7588;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6497001647949219
7589;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6701441407203674
7590;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.609015703201294
7591;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.564496636390686
7592;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5224352478981018
7593;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5175933241844177
7594;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6786059141159058
7595;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5467355251312256
7596;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5526412129402161
7597;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5777717232704163
7598;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.5332388877868652
7599;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.565934419631958
7600;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5001193881034851
7601;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6208698749542236
7602;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5338922739028931
7603;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5072750449180603
7604;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5448688864707947
7605;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.604949951171875
7606;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5588427782058716
7607;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.53260737657547
7608;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5195239782333374
7609;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5028170347213745
7610;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5324141383171082
7611;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Similar;0.6913097500801086
7612;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.596451461315155
7613;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.5075125098228455
7614;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.6511577367782593
7615;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5758169293403625
7616;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5346989035606384
7617;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.50986647605896
7618;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5651980042457581
7619;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6108115911483765
7620;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5323822498321533
7621;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6496756076812744
7622;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5379198789596558
7623;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6090258359909058
7624;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5448025465011597
7625;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.53722083568573
7626;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5061649084091187
7627;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6112610101699829
7628;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5503767728805542
7629;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Similar;0.5863379240036011
7630;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Similar;0.6035265922546387
7631;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.5270099639892578
7632;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7584264874458313
7633;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6889666318893433
7634;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5686057209968567
7635;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5744084119796753
7636;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.573331356048584
7637;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5501883029937744
7638;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5184363126754761
7639;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5418898463249207
7640;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5822675228118896
7641;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5334330797195435
7642;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5342836380004883
7643;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6069760322570801
7644;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5056170225143433
7645;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5155455470085144
7646;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7102705240249634
7647;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5138906240463257
7648;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5397595167160034
7649;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.5256814956665039
7650;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.588387131690979
7651;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.5827594995498657
7652;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5872398614883423
7653;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5578323602676392
7654;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5274354219436646
7655;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5135886669158936
7656;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5469450950622559
7657;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5453935265541077
7658;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.7077859044075012
7659;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5556028485298157
7660;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5574254989624023
7661;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6776164770126343
7662;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5114538073539734
7663;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5288497805595398
7664;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6006121635437012
7665;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5389342308044434
7666;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5740677118301392
7667;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6374902725219727
7668;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6139030456542969
7669;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.512710690498352
7670;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6206914186477661
7671;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6091183423995972
7672;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6284921169281006
7673;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Similar;0.6260116696357727
7674;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.8205522298812866
7675;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.7833558320999146
7676;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6445651054382324
7677;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7223581075668335
7678;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6947708129882812
7679;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.517136812210083
7680;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5247106552124023
7681;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5818914771080017
7682;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5214153528213501
7683;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.803428590297699
7684;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5546167492866516
7685;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6423898935317993
7686;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5036128759384155
7687;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6792670488357544
7688;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6137977838516235
7689;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5924373269081116
7690;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5324509143829346
7691;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.668351411819458
7692;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Similar;0.652472734451294
7693;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.7065733671188354
7694;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.6077989935874939
7695;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5197654366493225
7696;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6093336343765259
7697;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5356399416923523
7698;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5954873561859131
7699;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6721616983413696
7700;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5064973831176758
7701;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.63478684425354
7702;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5728441476821899
7703;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6491095423698425
7704;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6683138608932495
7705;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5663782358169556
7706;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6298730373382568
7707;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5863794088363647
7708;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.754412829875946
7709;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5841896533966064
7710;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5992836356163025
7711;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5652420520782471
7712;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5157225131988525
7713;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6119639277458191
7714;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5614228844642639
7715;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6398800015449524
7716;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6339063048362732
7717;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5931383371353149
7718;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5180951952934265
7719;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5504987239837646
7720;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5695306062698364
7721;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5240179896354675
7722;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5183017253875732
7723;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5630726218223572
7724;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5729948282241821
7725;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6365076303482056
7726;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.6026917099952698
7727;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7308889627456665
7728;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5747557878494263
7729;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.569779634475708
7730;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.56951504945755
7731;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5948311686515808
7732;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6240789890289307
7733;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.540299654006958
7734;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6169936656951904
7735;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6237529516220093
7736;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5151116251945496
7737;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6158075332641602
7738;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5242881178855896
7739;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6066211462020874
7740;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6917821168899536
7741;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5508067607879639
7742;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Similar;0.5440797805786133
7743;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Similar;0.8207494616508484
7744;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5484679937362671
7745;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.7670767307281494
7746;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5137618780136108
7747;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5832397937774658
7748;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6411310434341431
7749;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5079482793807983
7750;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5292293429374695
7751;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5947977304458618
7752;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6119680404663086
7753;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.7041504383087158
7754;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6218209266662598
7755;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7709744572639465
7756;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.608927309513092
7757;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5109423398971558
7758;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5518561601638794
7759;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5830138921737671
7760;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5383644104003906
7761;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6314935684204102
7762;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5356485843658447
7763;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5682411193847656
7764;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5568734407424927
7765;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5048809051513672
7766;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6174719929695129
7767;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6595554351806641
7768;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6515815258026123
7769;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5324946045875549
7770;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5292213559150696
7771;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5971709489822388
7772;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.524621844291687
7773;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.551417350769043
7774;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5633372068405151
7775;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5657544136047363
7776;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5345310568809509
7777;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5139230489730835
7778;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5679552555084229
7779;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5551736354827881
7780;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5578827261924744
7781;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.603850245475769
7782;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6330865025520325
7783;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5023550987243652
7784;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.65519779920578
7785;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5266914963722229
7786;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5317271947860718
7787;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.514833927154541
7788;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5533245205879211
7789;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6037514209747314
7790;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5609006881713867
7791;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5929707288742065
7792;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Similar;0.5649886727333069
7793;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.5527750253677368
7794;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.6809520721435547
7795;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5743606090545654
7796;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.619050920009613
7797;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5125257968902588
7798;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5558770895004272
7799;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5458984375
7800;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5366234183311462
7801;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5682001709938049
7802;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5894927978515625
7803;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.7179887294769287
7804;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5716555714607239
7805;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5156049728393555
7806;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5260573625564575
7807;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5542194247245789
7808;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6562734842300415
7809;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5119450688362122
7810;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5558330416679382
7811;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5744532346725464
7812;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5005127787590027
7813;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5934774279594421
7814;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6979897022247314
7815;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6260143518447876
7816;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Similar;0.6157383918762207
7817;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Similar;0.5226345062255859
7818;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5012837052345276
7819;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5032674670219421
7820;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5255469083786011
7821;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5009690523147583
7822;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6396313905715942
7823;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.51617431640625
7824;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.570213794708252
7825;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5680797100067139
7826;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6223098039627075
7827;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5880500078201294
7828;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5857727527618408
7829;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6015924215316772
7830;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.546865701675415
7831;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6576159000396729
7832;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6212988495826721
7833;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6936061382293701
7834;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5712620615959167
7835;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5929744243621826
7836;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.550473153591156
7837;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5561880469322205
7838;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6915605068206787
7839;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5898364782333374
7840;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5739152431488037
7841;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6091310977935791
7842;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5384576320648193
7843;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5133176445960999
7844;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5896739959716797
7845;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6981250643730164
7846;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5639636516571045
7847;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6633180975914001
7848;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5846974849700928
7849;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7184098958969116
7850;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.506946325302124
7851;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5764720439910889
7852;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6177104711532593
7853;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6603459119796753
7854;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6142822504043579
7855;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5191000699996948
7856;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5806406140327454
7857;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5962774753570557
7858;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5999007821083069
7859;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6944571137428284
7860;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6555034518241882
7861;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Similar;0.5045467615127563
7862;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5336922407150269
7863;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6227267980575562
7864;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5198012590408325
7865;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5313620567321777
7866;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5088993310928345
7867;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5673091411590576
7868;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5066041946411133
7869;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5194675922393799
7870;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5435901880264282
7871;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5103670358657837
7872;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5113523006439209
7873;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5103307366371155
7874;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6224522590637207
7875;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5072580575942993
7876;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5709676742553711
7877;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5363657474517822
7878;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6370601058006287
7879;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5977551937103271
7880;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5794380307197571
7881;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6175469160079956
7882;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5469038486480713
7883;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5362152457237244
7884;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.8203655481338501
7885;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.7290717959403992
7886;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6176160573959351
7887;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.566214919090271
7888;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5473092794418335
7889;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6134579181671143
7890;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6200439929962158
7891;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5850920081138611
7892;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5261533260345459
7893;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6008021831512451
7894;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6313366889953613
7895;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7087195515632629
7896;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6420215368270874
7897;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5410535931587219
7898;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5172083377838135
7899;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5059752464294434
7900;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5032792091369629
7901;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5998876690864563
7902;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.533785343170166
7903;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5037214756011963
7904;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5351262092590332
7905;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5694410800933838
7906;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5438780784606934
7907;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5308979153633118
7908;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5571517944335938
7909;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5269898772239685
7910;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5981409549713135
7911;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6045259237289429
7912;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5529261827468872
7913;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6410253047943115
7914;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6145009994506836
7915;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7208669185638428
7916;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5956196188926697
7917;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5675649642944336
7918;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5345760583877563
7919;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5481821298599243
7920;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6947121620178223
7921;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5140081644058228
7922;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5550789833068848
7923;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6555020809173584
7924;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5618253946304321
7925;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5728548765182495
7926;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5386312007904053
7927;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5913529396057129
7928;can be slightly faster too;skip almost-full freelist pages completely;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5175341367721558
7929;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5965982675552368
7930;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5489501953125
7931;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.698905885219574
7932;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5094524025917053
7933;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5873398780822754
7934;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5010702610015869
7935;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6610053181648254
7936;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.614595890045166
7937;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6951006650924683
7938;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5035500526428223
7939;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6882513761520386
7940;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6736687421798706
7941;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.5292142033576965
7942;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Similar;0.6939777731895447
7943;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5499143600463867
7944;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5252658128738403
7945;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6242039799690247
7946;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5733203291893005
7947;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5159846544265747
7948;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6604804992675781
7949;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6940250396728516
7950;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6093096733093262
7951;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6297057867050171
7952;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7235427498817444
7953;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5453635454177856
7954;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.7249648571014404
7955;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5279649496078491
7956;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5547429323196411
7957;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5905061364173889
7958;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6097280383110046
7959;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.618201494216919
7960;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5040844678878784
7961;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5724660158157349
7962;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6070868968963623
7963;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5734671354293823
7964;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5336501598358154
7965;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5701292753219604
7966;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5505618453025818
7967;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7324494123458862
7968;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6026749610900879
7969;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6824935078620911
7970;Code size goes up about 1K;dynamic memory usage should be lower even on relatively small memory systems;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5393450260162354
7971;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Similar;0.5764120221138
7972;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.6124634742736816
7973;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Similar;0.5575757622718811
7974;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5529290437698364
7975;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.6767969727516174
7976;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5588077306747437
7977;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6770630478858948
7978;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5353723168373108
7979;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5852134823799133
7980;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5139896273612976
7981;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5408638119697571
7982;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5988516211509705
7983;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5597349405288696
7984;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5411133766174316
7985;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.7463010549545288
7986;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5546952486038208
7987;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5283493995666504
7988;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5690815448760986
7989;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.625076174736023
7990;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6137710213661194
7991;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5252019166946411
7992;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6494982242584229
7993;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6189633011817932
7994;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6835027933120728
7995;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5031075477600098
7996;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6099697947502136
7997;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.543790340423584
7998;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5007708668708801
7999;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5860936641693115
8000;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6216602325439453
8001;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6033684015274048
8002;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5084109902381897
8003;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.528947114944458
8004;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.5036923289299011
8005;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.5220754146575928
8006;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6128886938095093
8007;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6931465864181519
8008;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.5560100078582764
8009;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6093624830245972
8010;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5640023946762085
8011;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5377361178398132
8012;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5590227842330933
8013;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.7485079765319824
8014;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6277427077293396
8015;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6382821202278137
8016;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.7580345869064331
8017;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Similar;0.680827260017395
8018;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6071174144744873
8019;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.5232030749320984
8020;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6341683268547058
8021;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6489236950874329
8022;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.570929765701294
8023;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.526619553565979
8024;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5568275451660156
8025;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.7183567881584167
8026;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6289718151092529
8027;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5240165591239929
8028;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5154430866241455
8029;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5092983245849609
8030;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Similar;0.6056227684020996
8031;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.7043258547782898
8032;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5357798933982849
8033;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.556359589099884
8034;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6010540127754211
8035;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6722124218940735
8036;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5724549293518066
8037;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.7089695930480957
8038;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6300684213638306
8039;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5252799987792969
8040;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6374378204345703
8041;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6315358877182007
8042;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.598459005355835
8043;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5316319465637207
8044;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Similar;0.6819397807121277
8045;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.531326413154602
8046;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6414902210235596
8047;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.6124061346054077
8048;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6632611751556396
8049;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5007439851760864
8050;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6773940324783325
8051;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5174039602279663
8052;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6867232918739319
8053;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5389322638511658
8054;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5624812245368958
8055;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7302661538124084
8056;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5867489576339722
8057;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5052375793457031
8058;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Similar;0.6133708357810974
8059;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5076306462287903
8060;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6232635974884033
8061;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5508100986480713
8062;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5478643178939819
8063;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6134809851646423
8064;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6198041439056396
8065;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6117315292358398
8066;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5425312519073486
8067;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5429873466491699
8068;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5680865049362183
8069;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6677430272102356
8070;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5982533097267151
8071;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6839190721511841
8072;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6787188053131104
8073;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Similar;0.5402557849884033
8074;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5497841835021973
8075;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.558230996131897
8076;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5791857242584229
8077;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.6405228972434998
8078;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.6005606055259705
8079;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.6247386932373047
8080;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5763066411018372
8081;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5308641791343689
8082;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5515652894973755
8083;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6034368872642517
8084;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.6892554759979248
8085;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.7408126592636108
8086;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6661182641983032
8087;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5655742883682251
8088;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5154925584793091
8089;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5021470785140991
8090;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5776498317718506
8091;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5881868600845337
8092;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.753875732421875
8093;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Similar;0.5428023338317871
8094;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5693780183792114
8095;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.6626077890396118
8096;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5670061111450195
8097;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6310261487960815
8098;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5572385787963867
8099;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.618495762348175
8100;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Similar;0.5196956396102905
8101;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.5928129553794861
8102;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5089219808578491
8103;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Similar;0.7410144805908203
8104;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.62159663438797
8105;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7124669551849365
8106;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5909818410873413
8107;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.554796576499939
8108;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.623164176940918
8109;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.6046826243400574
8110;Redo a lot of comments;Also;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5710586905479431
8111;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Similar;0.5393209457397461
8112;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5227445363998413
8113;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5652545690536499
8114;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5238366723060608
8115;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.511884331703186
8116;If it will be decided to BUG in this case, BUG should be put in generic code;put in generic code;https://github.com/torvalds/linux/commit/133d205a18b7a4d8cb52959c5310f6664277cf61;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.6681174039840698
8117;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Similar;0.5982012748718262
8118;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.6977354884147644
8119;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5713806748390198
8120;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.5430497527122498
8121;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.7866841554641724
8122;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.619371771812439
8123;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Similar;0.7272013425827026
8124;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5399655699729919
8125;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Similar;0.5279186964035034
8126;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5695160627365112
8127;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5444735884666443
8128;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5074789524078369
8129;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5466260313987732
8130;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Fix 32-bitness bugs in mm/slob.c;bugs;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Similar;0.5033378601074219
