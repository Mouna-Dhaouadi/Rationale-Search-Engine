;Decision1;Rationale1;URL1;Decision2;Rationale2;URL2;Relationship;Alpha;similarity_rationales
0;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8184511065483093;0.3307259976863861
1;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9546252489089966;0.550234317779541
2;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9623862504959106;0.386731207370758
3;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.966339647769928;0.3904288709163666
4;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9795199632644652;0.3544168174266815
5;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Contradicts;0.9056867957115172;0.4392522275447845
6;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9757909178733826;0.1886307150125503
7;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.8599486351013184;0.4066273272037506
8;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9037435054779052;0.4111992418766022
9;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8492074608802795;0.6179263591766357
10;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8476876616477966;0.620715856552124
11;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9802173376083374;0.5195223093032837
12;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9744083881378174;0.4854811728000641
13;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.912096917629242;0.3100763261318207
14;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9772728085517884;0.251278817653656
15;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8100513219833374;0.4381863474845886
16;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9337910413742064;0.4110824167728424
17;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.907028317451477;0.3994548320770263
18;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8679873943328857;0.4880761802196502
19;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8502709865570068;0.210945725440979
20;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.92641019821167;0.3576965034008026
21;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.909446895122528;0.2846159934997558
22;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8094385862350464;0.4035355448722839
23;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.933911383152008;0.5714247822761536
24;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9524972438812256;0.3554353713989258
25;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9083121418952942;0.4016026258468628
26;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9846328496932985;0.0978209897875785
27;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8734322190284729;0.4168884754180908
28;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8188288807868958;0.872414231300354
29;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9324833154678344;0.6700795888900757
30;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8906416296958923;0.2156147956848144
31;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8381441831588745;0.673957109451294
32;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9264259338378906;0.5682151317596436
33;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9250497221946716;0.678627073764801
34;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8365750908851624;0.5859299898147583
35;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.908570408821106;0.312495470046997
36;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8351673483848572;0.5674521923065186
37;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9137552976608276;-0.0233910344541072
38;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9267287850379944;0.6270622611045837
39;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8069032430648804;0.434836208820343
40;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.873107373714447;0.4686316251754761
41;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.898834228515625;0.517853319644928
42;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9781634211540222;0.1357274204492569
43;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9275133609771729;0.4024276435375213
44;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9352408051490784;0.546926736831665
45;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8928127884864807;0.5493872165679932
46;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9376110434532166;0.3422982096672058
47;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8587898015975952;0.3834032416343689
48;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9707039594650269;0.0428968742489814
49;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9647458791732788;0.5393664836883545
50;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.8333035111427307;0.67307049036026
51;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8416944742202759;0.7350378036499023
52;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8524829745292664;0.4168884754180908
53;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9491190910339355;0.160839632153511
54;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9774367809295654;0.528471827507019
55;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.944092333316803;0.5203257203102112
56;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8705927133560181;0.5591379404067993
57;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.8636457920074463;0.402469664812088
58;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Contradicts;0.8497216105461121;0.3799120485782623
59;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.962471842765808;0.6024171113967896
60;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9691905975341796;0.3663308322429657
61;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9512932896614076;0.2779416143894195
62;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9260067343711852;0.3150734603404999
63;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Contradicts;0.8542044758796692;0.5955944061279297
64;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.8807080984115601;0.4380305111408233
65;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.8021864891052246;0.5279307961463928
66;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9579660892486572;0.5576825141906738
67;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9537898898124696;0.3604636788368225
68;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9784733057022096;0.4750832617282867
69;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9758762717247008;0.1394931972026825
70;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8074954152107239;0.4636745452880859
71;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8011776208877563;0.68255215883255
72;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8919273614883423;0.571667492389679
73;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.9435585141181946;0.7107151746749878
74;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8028975129127502;0.3817563056945801
75;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8899502754211426;0.4717026054859161
76;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9698386788368224;0.2198901325464248
77;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.8366007208824158;0.5273250341415405
78;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.9900942444801332;0.2804147899150848
79;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9990659356117249;0.3652446568012237
80;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.8965041041374207;0.4909248948097229
81;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8760831952095032;0.2832043766975403
82;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.9510998129844666;0.4418749213218689
83;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9818750023841858;0.4177387952804565
84;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9342201948165894;0.4443759620189667
85;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9939306974411012;0.3088061809539795
86;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.856963574886322;0.4111190140247345
87;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8987814784049988;0.3913585245609283
88;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8838474154472351;0.5703030824661255
89;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9128775596618652;0.5767441987991333
90;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9881039261817932;0.162156879901886
91;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8505476713180542;0.4965949952602386
92;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8358720541000366;0.5742344260215759
93;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.989068567752838;0.6332048177719116
94;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.8253954648971558;0.40130814909935
95;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9674761295318604;0.1358599364757537
96;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9028729796409608;0.5905473828315735
97;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.8014223575592041;0.5042703747749329
98;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.891501247882843;0.6572788953781128
99;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.9094549417495728;0.547309160232544
100;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9979288578033448;0.072838544845581
101;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.9902605414390564;0.5591809749603271
102;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9369899034500122;0.5038456320762634
103;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8265944123268127;0.7624736428260803
104;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9059980511665344;0.4226154685020447
105;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9611005783081056;0.2581795156002044
106;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.8145231604576111;0.2242254763841629
107;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.964247703552246;0.5306829214096069
108;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8914187550544739;0.487815111875534
109;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9921751618385316;0.5748453736305237
110;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9993209838867188;0.0841692388057708
111;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9068729877471924;0.3580186665058136
112;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9303285479545592;0.5668988227844238
113;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.9797922372817992;0.610467255115509
114;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.8060001730918884;0.4618017077445984
115;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8010009527206421;0.4237115085124969
116;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.986481785774231;0.6060459613800049
117;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.953311800956726;0.4121634364128113
118;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Contradicts;0.9639650583267212;0.5444033145904541
119;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.9176321029663086;0.6102646589279175
120;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8713335990905762;0.419603019952774
121;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.8567066192626953;0.6256098747253418
122;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.845459520816803;0.3393151760101318
123;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8488527536392212;0.3408535718917846
124;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9121804237365724;0.3582954406738281
125;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8399131298065186;0.0769425109028816
126;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.8828772902488708;0.7368803024291992
127;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.969732403755188;0.4191205501556396
128;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9167347550392152;0.4825071096420288
129;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8786198496818542;0.3586698770523071
130;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.909539759159088;0.6960606575012207
131;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9943108558654784;0.2028613686561584
132;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9480730295181274;0.3936967849731445
133;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.929329514503479;0.3656203150749206
134;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8475188612937927;0.6858303546905518
135;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.9141575694084167;0.2694389522075653
136;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8615742921829224;0.3830276429653168
137;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.8855900168418884;0.5132333040237427
138;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9473156332969666;0.2794389426708221
139;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.904276728630066;0.4136781692504883
140;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9652844071388244;0.1206282377243042
141;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.8581426739692688;0.4853910505771637
142;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8893717527389526;0.646524965763092
143;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9612968564033508;0.2955676317214966
144;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9930033087730408;0.3253893256187439
145;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9937343001365662;0.2591657638549804
146;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8081879615783691;0.5859980583190918
147;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8666681051254272;0.6735293865203857
148;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.8736962676048279;0.724648654460907
149;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9878675937652588;0.0557585917413234
150;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9552050828933716;0.6172048449516296
151;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9920023679733276;0.4693133234977722
152;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8461611270904541;0.5453370809555054
153;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9072942733764648;0.2124897390604019
154;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8916429281234741;0.3884209394454956
155;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8074012398719788;0.6523714065551758
156;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9924339056015016;0.702843964099884
157;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9131327271461488;0.5194425582885742
158;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8327754735946655;0.2772951126098633
159;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9885826110839844;0.3724424540996551
160;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8558506965637207;0.3358995616436004
161;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.8967819809913635;0.4807174801826477
162;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9125401377677916;0.3024847507476806
163;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9123870730400084;0.3750241696834564
164;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.881475031375885;0.5591545104980469
165;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8295587301254272;0.4404399394989013
166;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9449973106384276;0.5035398006439209
167;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8804388046264648;0.3836753964424133
168;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.886951744556427;0.4127066135406494
169;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9373584985733032;0.3362221717834472
170;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.909846305847168;0.5019676685333252
171;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9215519428253174;0.4058196544647217
172;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9306683540344238;0.0838692262768745
173;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8930091261863708;0.6123212575912476
174;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9157143235206604;0.6835777759552002
175;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9583714604377748;0.3040386140346527
176;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8730669617652893;0.3795409500598907
177;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8965219259262085;0.292860746383667
178;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9131593704223632;0.2563188374042511
179;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8704993724822998;0.7638450860977173
180;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9276356101036072;0.4168884754180908
181;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9816285371780396;0.6700795888900757
182;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9215783476829528;0.4167324900627136
183;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.937440037727356;0.2840615510940552
184;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9146199822425842;0.4595785140991211
185;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9579802751541138;0.2836588323116302
186;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8857367634773254;0.4087503552436828
187;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8204348087310791;0.3344602584838867
188;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8308543562889099;0.0587177649140358
189;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9428834915161132;0.4551857113838196
190;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8043422698974609;0.4954634308815002
191;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9188286662101746;0.0892791152000427
192;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.9814220666885376;0.5106552243232727
193;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.9362034797668456;0.7206461429595947
194;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8332684636116028;0.7168364524841309
195;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8292407989501953;0.3910718560218811
196;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8553001880645752;0.7400645017623901
197;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.8780235648155212;0.1850628405809402
198;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.8735116124153137;0.4875973463058471
199;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9301564693450928;0.459592342376709
200;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9918644428253174;0.4208729565143585
201;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.9269780516624452;0.6851822137832642
202;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9941297769546508;0.496053397655487
203;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9656724333763124;0.1516814976930618
204;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.9246424436569214;0.4916360974311828
205;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.901145040988922;0.4837085306644439
206;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.826890230178833;0.4454779028892517
207;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8134469389915466;0.4278808832168579
208;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8087613582611084;0.3808425962924957
209;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8838971257209778;0.3161680400371551
210;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9388223886489868;0.5710241198539734
211;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8595430254936218;0.2245007753372192
212;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.824357807636261;0.1757569313049316
213;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9211874008178712;0.3658680915832519
214;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8764486908912659;0.3410108685493469
215;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9501873254776;0.3825390934944153
216;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9389086365699768;0.4600560665130615
217;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8065934181213379;0.7172035574913025
218;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.945139467716217;0.3226194679737091
219;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8495438098907471;0.2214696258306503
220;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8596804738044739;0.2782436907291412
221;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8418518900871277;0.2317248582839965
222;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9799485206604004;0.4220465421676636
223;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9665731191635132;0.3337828814983368
224;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8058668375015259;0.371455043554306
225;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.8056074380874634;0.4925465285778045
226;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9176263809204102;0.4277815818786621
227;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8234112858772278;0.1733766794204712
228;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Contradicts;0.9426321387290956;0.5225690603256226
229;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.9651522040367126;0.5982613563537598
230;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.8024079203605652;0.7288636565208435
231;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.8566843867301941;0.6601384282112122
232;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8074542880058289;0.73944091796875
233;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8738677501678467;0.51095050573349
234;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8790267109870911;0.6396075487136841
235;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.9148642420768738;0.4637831449508667
236;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Contradicts;0.8960066437721252;0.7425098419189453
237;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.95666241645813;0.66280198097229
238;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9131921529769896;0.3112326860427856
239;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9968679547309875;0.547675609588623
240;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Contradicts;0.9974291920661926;0.606464684009552
241;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8664659857749939;0.3554342985153198
242;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8551166653633118;0.4101543426513672
243;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8829828500747681;0.4260159730911255
244;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9354886412620544;0.5182249546051025
245;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8945327401161194;0.4395959675312042
246;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.8292170166969299;0.4352835416793823
247;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8872312307357788;0.534710168838501
248;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.8956598043441772;0.3595771491527557
249;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8894119262695312;0.3280473053455353
250;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9051123857498168;0.3325753509998321
251;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8720118403434753;0.4461100399494171
252;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8932028412818909;0.3997998237609863
253;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.816429853439331;0.4035207033157348
254;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8764646649360657;0.2718597650527954
255;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9720414876937866;0.4648072719573974
256;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8588226437568665;0.5668063163757324
257;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.941838800907135;0.3574228286743164
258;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9381111860275269;0.4993076920509338
259;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8510309457778931;0.5535233616828918
260;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8365981578826904;0.4232385158538818
261;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9604132771492004;0.4783210456371307
262;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8926836252212524;0.3223220109939575
263;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9139598608016968;0.4399695694446563
264;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9675874710083008;0.4545358419418335
265;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9282041788101196;0.532365083694458
266;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.8122329711914062;0.5568979978561401
267;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8578987717628479;0.4269436001777649
268;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.9372754693031312;0.1766074150800705
269;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8147100806236267;0.2997826933860779
270;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9600780606269836;0.4018104374408722
271;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.995528519153595;0.6076065897941589
272;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.950813889503479;0.3989871740341186
273;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.952382504940033;0.4053282141685486
274;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8202458024024963;0.4112611413002014
275;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8395751714706421;0.605022668838501
276;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8930714130401611;0.4828137457370758
277;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.8842617869377136;0.5274611711502075
278;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8849815130233765;0.4326738119125366
279;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8774846792221069;0.6079463362693787
280;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.955847144126892;0.4896213114261627
281;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8039181232452393;0.5512838363647461
282;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8014075756072998;0.4454540610313415
283;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.951223611831665;0.3586750030517578
284;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.855420708656311;0.5770800709724426
285;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8584675788879395;0.4068819284439087
286;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9551873207092284;0.5189645886421204
287;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8406051397323608;0.6251810789108276
288;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8603705167770386;0.4176274240016937
289;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.951394259929657;0.4421170353889465
290;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9024390578269958;0.3819005191326141
291;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9066739082336426;0.4196330308914184
292;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.8315215706825256;0.7114046216011047
293;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8638598918914795;0.3336418271064758
294;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9150137305259703;0.3711410164833069
295;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8447117209434509;0.556863009929657
296;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.9106647968292236;0.4062297940254211
297;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9913896918296814;0.4492502808570862
298;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9581893086433412;0.4575431048870086
299;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.8544133305549622;0.362611711025238
300;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8053083419799805;0.6235278248786926
301;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9009993076324464;0.3955358266830444
302;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8140078186988831;0.529131293296814
303;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8436808586120605;0.4064028561115265
304;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8692144751548767;0.4979187846183777
305;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8413199186325073;0.4577220976352691
306;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8314471244812012;0.3323270082473755
307;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8844156265258789;0.4919910728931427
308;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.870836079120636;0.4991486370563507
309;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9393587708473206;0.3971797823905945
310;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9136688113212584;0.3016936779022217
311;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9327415227890016;0.3304541110992431
312;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9752838015556335;0.4716218709945678
313;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9304190874099731;0.375029981136322
314;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9273539185523988;0.6365243196487427
315;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8945503830909729;0.529131293296814
316;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9427270889282228;0.3044694364070892
317;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8657596707344055;0.5821948647499084
318;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8766599297523499;0.5121827721595764
319;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8968831300735474;0.6841239333152771
320;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8391439914703369;0.4442949295043945
321;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8328971862792969;0.5852676630020142
322;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.823966920375824;0.6684971451759338
323;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9417216777801514;0.3242915570735931
324;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8442893028259277;0.6002691984176636
325;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8092226386070251;0.5804175734519958
326;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8624059557914734;0.4321464896202087
327;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8768030405044556;0.4278916120529175
328;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.9322961568832396;0.5780878067016602
329;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8521612286567688;0.4421170353889465
330;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9093944430351256;0.247194230556488
331;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8897520303726196;0.3830661177635193
332;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.895017147064209;0.4421170353889465
333;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.984571933746338;0.3824420869350433
334;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.954697847366333;0.4421170353889465
335;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9646127223968506;0.2823000848293304
336;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8450557589530945;0.4835533499717712
337;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.935022234916687;0.5138874053955078
338;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9720154404640198;0.2393634766340255
339;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9242939352989196;0.3307360410690307
340;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9680533409118652;0.5177901983261108
341;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9586025476455688;0.2883224785327911
342;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.93037611246109;0.4421170353889465
343;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9313117265701294;0.2914445698261261
344;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.8057064414024353;0.4241412878036499
345;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.919784665107727;0.4409262537956238
346;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8795691728591919;0.4005672931671142
347;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.956187903881073;0.538993239402771
348;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9893428087234496;0.4324886798858642
349;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9744053483009338;0.4592347145080566
350;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8264259696006775;0.5529754161834717
351;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9191607236862184;0.311578094959259
352;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8971897959709167;0.6136640906333923
353;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9983367919921876;0.4667733013629913
354;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.903165638446808;0.698976993560791
355;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.86277174949646;0.3776309490203857
356;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9730241894721984;0.6141707897186279
357;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9905718564987184;0.6239951848983765
358;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Contradicts;0.860260009765625;0.4795320332050323
359;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9885872602462769;0.468585193157196
360;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9510678648948668;0.4523807764053345
