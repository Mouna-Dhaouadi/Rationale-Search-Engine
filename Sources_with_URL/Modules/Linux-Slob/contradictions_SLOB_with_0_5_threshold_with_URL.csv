;Decision1;Rationale1;URL1;Decision2;Rationale2;URL2;Relationship;Alpha
0;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Contradicts;0.5373821258544922
1;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Contradicts;0.5667910575866699
2;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5729324221611023
3;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.656012237071991
4;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7366713881492615
5;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.6363679766654968
6;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7002514004707336
7;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.7060793042182922
8;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8184511065483093
9;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6195119619369507
10;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9546252489089966
11;__alloc_size attribute was added to allocators;In the effort to help the compiler reason about buffer sizes;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9623862504959106
12;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6917594075202942
13;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.966339647769928
14;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6582044959068298
15;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9795199632644652
16;For most allocations, this works well, as the vast majority of callers are not expecting to use more memory than what they asked for;The vast majority of callers are not expecting to use more memory than what they asked for;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6098948121070862
17;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Contradicts;0.9056867957115172
18;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Contradicts;0.5491878986358643
19;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Contradicts;0.7494640350341797
20;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.614800751209259
21;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5493662357330322
22;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7961413860321045
23;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.705373227596283
24;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7036742568016052
25;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9757909178733826
26;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.555792510509491
27;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6022250056266785
28;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.7438472509384155
29;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6169750690460205
30;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5884694457054138
31;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Contradicts;0.5356642007827759
32;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.8599486351013184
33;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9037435054779052
34;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7338818907737732
35;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8492074608802795
36;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8476876616477966
37;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9802173376083374
38;it wants to minimize the number of calls to krealloc(), so it just uses ksize() plus some additional bytes, forcing the realloc into the next bucket size  ;so it can learn how large it is now;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5649020671844482
39;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5885317921638489
40;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7174647450447083
41;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9744083881378174
42;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.912096917629242
43;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7014736533164978
44;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5201261043548584
45;Use all the space available in the chosen bucket immediately;to avoid needing to reallocate later;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5959196090698242
46;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.5286523699760437
47;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5880364179611206
48;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7675953507423401
49;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9772728085517884
50;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5656084418296814
51;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5663026571273804
52;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6108250021934509
53;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5719647407531738
54;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8100513219833374
55;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Contradicts;0.5597889423370361
56;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9337910413742064
57;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.907028317451477
58;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7482835650444031
59;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8679873943328857
60;kmalloc(size) might give us more room than requested;might give us more room than requested;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.615911602973938
61;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5381609201431274
62;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6735512614250183
63;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8502709865570068
64;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.92641019821167
65;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5670173764228821
66;Put skb_shared_info exactly at the end of allocated zone;to allow max possible filling before reallocation;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7268535494804382
67;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Contradicts;0.5630873441696167
68;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.670224666595459
69;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5122755765914917
70;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.909446895122528
71;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5204084515571594
72;"the ""how much was actually allocated?"" question is answered after the allocation";the compiler hinting is not in an easy place to make the association any more;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8094385862350464
73;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Contradicts;0.5849506855010986
74;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.6967347860336304
75;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.933911383152008
76;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6803680658340454
77;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5430221557617188
78;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.754400908946991
79;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6404414176940918
80;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5198154449462891
81;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6182847619056702
82;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.6590659022331238
83;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6865615248680115
84;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Contradicts;0.5827713012695312
85;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7085406184196472
86;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.7374900579452515
87;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.5764950513839722
88;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9524972438812256
89;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6711031794548035
90;This mismatch between the compilers view of the buffer length and the codes intention about how much it is going to actually use has already caused problems;caused problems;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7781780362129211
91;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6319221258163452
92;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5221922993659973
93;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5748732089996338
94;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6216422915458679
95;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6219873428344727
96;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5325931310653687
97;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9083121418952942
98;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7084787487983704
99;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5075159668922424
100;"reordering the use of the ""actual size"" information";fix this;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6562978029251099
101;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Contradicts;0.6498215794563293
102;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5804431438446045
103;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6533037424087524
104;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6327791213989258
105;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9846328496932985
106;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.6537258625030518
107;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5799632668495178
108;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5021377205848694
109;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.7915301322937012
110;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.5716122984886169
111;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5314375162124634
112;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8734322190284729
113;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7923702001571655
114;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5184332728385925
115;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8188288807868958
116;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9324833154678344
117;"Code can ask ""how large an allocation would I get for a given size?""";instead;https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.70900559425354
118;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6633997559547424
119;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7286154627799988
120;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8906416296958923
121;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6244518756866455
122;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8381441831588745
123;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7269384264945984
124;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6385684013366699
125;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9264259338378906
126;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.5953770875930786
127;Introduce kmalloc_size_roundup();"serve this function so we can start replacing the ""anticipatory resizing"" uses of ksize()";https://github.com/torvalds/linux/commit/05a940656e1eb2026d9ee31019d5b47e9545124d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9250497221946716
128;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7740892767906189
129;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5861098170280457
130;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8365750908851624
131;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.512437105178833
132;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.6811966896057129
133;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.7161940932273865
134;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.702516496181488
135;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.908570408821106
136;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6093275547027588
137;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.761355996131897
138;Remove export symbol and move declaration to mm/slab.h  ;we dont want to grow its callers;https://github.com/torvalds/linux/commit/8dfa9d554061873f96335730fb1d403698b2b1b4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6843248605728149
139;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6588835120201111
140;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7486365437507629
141;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5463024973869324
142;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5152578353881836
143;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6414958834648132
144;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7300122976303101
145;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.7853326797485352
146;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5453510880470276
147;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7450764775276184
148;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5505293011665344
149;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8351673483848572
150;unify NUMA and UMA version of tracepoints;mm/slab_common;https://github.com/torvalds/linux/commit/11e9734bcb6a7361943f993eba4e97f5812120d8;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7479442954063416
151;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Contradicts;0.6735952496528625
152;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Contradicts;0.7078264951705933
153;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5031030178070068
154;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9137552976608276
155;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5446622371673584
156;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5402049422264099
157;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6308030486106873
158;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5081981420516968
159;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5122838616371155
160;Make kmalloc_track_caller() wrapper of kmalloc_node_track_caller();-;https://github.com/torvalds/linux/commit/c45248db04f8e3aca4798d67a394fb9cc2168118;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9267287850379944
161;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6540933847427368
162;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7861581444740295
163;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.7073764801025391
164;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5495207905769348
165;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8069032430648804
166;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5080752372741699
167;Remove CONFIG_NUMA ifdefs for common kmalloc functions;Now that slab_alloc_node() is available for SLAB when CONFIG_NUMA=n;https://github.com/torvalds/linux/commit/f78a03f6e28be0283f73d3c18b54837b638a8ccf;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.5009456872940063
168;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.5992593765258789
169;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5852388143539429
170;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6295731067657471
171;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6251569986343384
172;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7029181122779846
173;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.873107373714447
174;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5799148678779602
175;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.7812344431877136
176;Slab caches marked with SLAB_ACCOUNT force accounting for every allocation from this cache  ;even if __GFP_ACCOUNT flag is not passed;https://github.com/torvalds/linux/commit/b347aa7b57477f71c740e2bbc6d1078a7109ba23;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.898834228515625
177;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6147570013999939
178;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9781634211540222
179;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.780529260635376
180;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9275133609771729
181;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7328052520751953
182;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.650513768196106
183;increase the minimum slab alignment to 16;When CONFIG_KASAN_HW_TAGS is enabled;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9352408051490784
184;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.517669677734375
185;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5366774797439575
186;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6970361471176147
187;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8928127884864807
188;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6181172132492065
189;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5690077543258667
190;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6367822289466858
191;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5405483841896057
192;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.646992564201355
193;This happens even if MTE is not supported in hardware or disabled via kasan=off;which creates an unnecessary memory overhead in those cases;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6205485463142395
194;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7817453742027283
195;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6614412665367126
196;waiting for quiescence after a full Android boot;with a kernel built with CONFIG_KASAN_HW_TAGS;https://github.com/torvalds/linux/commit/d949a8155d139aa890795b802004a196b7f00598;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9376110434532166
197;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Contradicts;0.5054463744163513
198;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.6988194584846497
199;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.5366728901863098
200;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Contradicts;0.5320817232131958
201;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Contradicts;0.5874436497688293
202;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8587898015975952
203;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Contradicts;0.5840904116630554
204;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5026701092720032
205;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.6366188526153564
206;list_lru does not need the capability of tracking every memcg on every superblock;For these systems with huge container counts;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5297974348068237
207;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Contradicts;0.583296000957489
208;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Contradicts;0.520256519317627
209;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Contradicts;0.5823036432266235
210;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.5422288179397583
211;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Contradicts;0.654743492603302
212;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6261645555496216
213;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9707039594650269
214;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Contradicts;0.6132687926292419
215;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.6651018261909485
216;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6727170348167419
217;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6837533116340637
218;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9647458791732788
219;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Contradicts;0.5511481761932373
220;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7455199956893921
221;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.8333035111427307
222;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6079309582710266
223;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6419770121574402
224;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.5340884923934937
225;Introduce kmem_cache_alloc_lru to allocate objects and its list_lru;to allocate objects;https://github.com/torvalds/linux/commit/88f2ef73fd66491a2f9a82373d22ca6540f23c62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6795235276222229
226;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.569562554359436
227;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.549922525882721
228;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8416944742202759
229;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.6517841815948486
230;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.5223180055618286
231;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.6013787388801575
232;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6960336565971375
233;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5389007329940796
234;Remove unnecessary page_mapcount_reset() function call;unnecessary;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5152730941772461
235;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8524829745292664
236;Use unused field for units;instead;https://github.com/torvalds/linux/commit/b01af5c0b0414f96e6c3891e704d1c40faa18813;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5687386393547058
237;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6123788356781006
238;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Contradicts;0.5546106696128845
239;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9491190910339355
240;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5498842000961304
241;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9774367809295654
242;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.944092333316803
243;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5017993450164795
244;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8705927133560181
245;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5129035711288452
246;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5466601848602295
247;use struct folio instead of struct page;Where non-slab page can appear;https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7118566036224365
248;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6095916032791138
249;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Contradicts;0.6267157793045044
250;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Contradicts;0.6631324887275696
251;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5032385587692261
252;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6460573673248291
253;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5964913964271545
254;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6349412202835083
255;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.8636457920074463
256;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Contradicts;0.7843788862228394
257;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Contradicts;0.6080183386802673
258;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.5186110734939575
259;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5167804956436157
260;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Contradicts;0.8497216105461121
261;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Contradicts;0.6073328852653503
262;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6834676861763
263;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Contradicts;0.5404009222984314
264;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.7381487488746643
265;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6074941754341125
266;dont introduce wrappers for PageSlobFree in mm/slab.h;"just for the single callers being wrappers in mm/slob.c

Decision: fix NULL pointer deference";https://github.com/torvalds/linux/commit/50757018b4c9b02dbf7fcc0514e0fc45b8689c62;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.962471842765808
267;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6284649968147278
268;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6448370218276978
269;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9691905975341796
270;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9512932896614076
271;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Contradicts;0.5311436653137207
272;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9260067343711852
273;By using the slab type instead of the page type  ;we make it obvious that this can only be called for slabs;https://github.com/torvalds/linux/commit/7213230af5e1e83ff010b3448260b9d3f95dd036;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5726661682128906
274;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.5973784327507019
275;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.5802240371704102
276;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Contradicts;0.6377613544464111
277;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7234016060829163
278;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Contradicts;0.6934769749641418
279;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.6050968170166016
280;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Contradicts;0.8542044758796692
281;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.8807080984115601
282;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Contradicts;0.5406239032745361
283;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.7257320880889893
284;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.637483537197113
285;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5031119585037231
286;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.8021864891052246
287;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6261801719665527
288;Dont build mm_dump_obj() on CONFIG_PRINTK=n kernels;CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.6465439200401306
289;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.521523118019104
290;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Contradicts;0.60051029920578
291;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7704411745071411
292;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5724986791610718
293;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6568197011947632
294;mem_dump_obj() messages will be suppressed;kernels built with CONFIG_PRINTK=n;https://github.com/torvalds/linux/commit/5bb1bb353cfe343fc3c84faf06f72ba309fde541;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6140856742858887
295;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7075103521347046
296;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5265877842903137
297;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.7260324954986572
298;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.5293133854866028
299;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.6319335103034973
300;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7477927207946777
301;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9579660892486572
302;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9537898898124696
303;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7516125440597534
304;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5699414610862732
305;This patch adds the slab name to trace_kmem_cache_free();to trace_kmem_cache_free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9784733057022096
306;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Contradicts;0.5342904329299927
307;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7169405817985535
308;kmem_cache_free;We can use it to understand what the RCU core is going to free;https://github.com/torvalds/linux/commit/3544de8ee6e4817278b15fe08658de49abf58954;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5564562082290649
309;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5529880523681641
310;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6409107446670532
311;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9758762717247008
312;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.7403663396835327
313;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.5097987055778503
314;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5430025458335876
315;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8074954152107239
316;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.5677950978279114
317;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8011776208877563
318;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5245586037635803
319;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.6772862672805786
320;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6542348265647888
321;Add mem_dump_obj() to print source of memory block;to print source of memory block;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8919273614883423
322;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5780690312385559
323;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6534929871559143
324;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.9435585141181946
325;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5362494587898254
326;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6875821352005005
327;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7980445623397827
328;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.594833493232727
329;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5388739109039307
330;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8028975129127502
331;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5936536192893982
332;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.5882992744445801
333;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5832322835922241
334;There are kernel facilities such as per-CPU reference counts that give error messages in generic handlers or callbacks  ;messages are unenlightening;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8899502754211426
335;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6091472506523132
336;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7419548034667969
337;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9698386788368224
338;this is not a problem when creating a new use of this facility  ;the bug is almost certainly in the code implementing that new use;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6730575561523438
339;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.8366007208824158
340;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.758578360080719
341;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5042306780815125
342;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.9900942444801332
343;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Contradicts;0.6763970851898193
344;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7772019505500793
345;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9990659356117249
346;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.6361181735992432
347;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.8965041041374207
348;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.7901772856712341
349;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.7489897012710571
350;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8760831952095032
351;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.7072638869285583
352;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6387489438056946
353;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.9510998129844666
354;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Contradicts;0.5053648352622986
355;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.7171129584312439
356;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Contradicts;0.5417203307151794
357;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9818750023841858
358;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Contradicts;0.5266987085342407
359;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.7818430066108704
360;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5983770489692688
361;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7928907871246338
362;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7909368276596069
363;"This pointer can reference the middle of the block as well as the beginning of the block, as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is
";as needed by things like RCU callback functions and timer handlers that might not know where the beginning of the memory block is;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9342201948165894
364;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5504202246665955
365;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5759872198104858
366;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9939306974411012
367;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.856963574886322
368;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.7559564709663391
369;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Contradicts;0.5941762924194336
370;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5597943663597107
371;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.736060380935669
372;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6149070858955383
373;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7269843220710754
374;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.630947470664978
375;These functions and handlers can use mem_dump_obj();to print out better hints as to where the problem might lie;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7089410424232483
376;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5766916871070862
377;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7215110063552856
378;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6906814575195312
379;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6753068566322327
380;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5272973775863647
381;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.6360561847686768
382;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8987814784049988
383;The information printed can depend on kernel configuration;depend on kernel configuration;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8838474154472351
384;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5693950653076172
385;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.5554159879684448
386;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5214090347290039
387;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.685538649559021
388;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5166023969650269
389;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5231490135192871
390;the allocation return address can be printed only for slab and slub  ;only when the necessary debug has been enabled;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9128775596618652
391;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Contradicts;0.736480176448822
392;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.6250584125518799
393;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6022226214408875
394;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Contradicts;0.5676056146621704
395;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Contradicts;0.5453376173973083
396;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6376349329948425
397;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5662810206413269
398;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Contradicts;0.5190911293029785
399;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6481877565383911
400;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9881039261817932
401;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.6454864740371704
402;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.7488633990287781
403;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5951479077339172
404;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7022290229797363
405;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8505476713180542
406;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Contradicts;0.5153448581695557
407;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7760168313980103
408;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6871570944786072
409;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Contradicts;0.5886619687080383
410;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8358720541000366
411;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5808694958686829
412;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.5014193654060364
413;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.989068567752838
414;build with CONFIG_DEBUG_SLAB=y and either use sizes with ample space to the next power of two or use the SLAB_STORE_USER when creating the kmem_cache structure;For slab;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5214962363243103
415;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.8253954648971558
416;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9674761295318604
417;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5350973010063171
418;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6644866466522217
419;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6177457571029663
420;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6003393530845642
421;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9028729796409608
422;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Contradicts;0.5395117998123169
423;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.5589329600334167
424;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.8014223575592041
425;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7572370171546936
426;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.5245348215103149
427;Use CONFIG_STACKTRACE for slub  ;to enable printing of the allocation-time stack trace.;https://github.com/torvalds/linux/commit/8e7f37f2aaa56b723a24f6872817cf9c6410b613;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.891501247882843
428;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Contradicts;0.5873603224754333
429;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.9094549417495728
430;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9979288578033448
431;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.9902605414390564
432;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6078111529350281
433;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7265130281448364
434;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5718245506286621
435;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Contradicts;0.6740401983261108
436;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9369899034500122
437;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8265944123268127
438;have some use eventually for annotations in drivers/gpu;I might;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6823614835739136
439;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5022885203361511
440;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.594865620136261
441;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.544318437576294
442;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9059980511665344
443;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5549352765083313
444;Updates gfpflags_allow_blocking();Theres a ton of callers all over the place for that already.;https://github.com/torvalds/linux/commit/95d6c701f4ca7c44dc148d664f604541266a2333;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7020624876022339
445;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.7234941124916077
446;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6536169648170471
447;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7639827132225037
448;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9611005783081056
449;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.8145231604576111
450;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.964247703552246
451;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6339960694313049
452;Slab pages will be shared between multiple cgroups;global and node counters will reflect the total number of slab pages;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6342512369155884
453;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Contradicts;0.5189151167869568
454;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6230747699737549
455;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8914187550544739
456;The size of slab memory shouldnt exceed 4Gb on 32-bit machines;it will fit into atomic_long_t we use for vmstats;https://github.com/torvalds/linux/commit/d42f3245c7e299e017213fa028c319316bcdb7f4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9921751618385316
457;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.624894380569458
458;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6230041980743408
459;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5813269019126892
460;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9993209838867188
461;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.6804606318473816
462;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6076342463493347
463;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6797012090682983
464;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5473997592926025
465;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Contradicts;0.6803785562515259
466;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Contradicts;0.5537043213844299
467;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9068729877471924
468;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7163862586021423
469;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.514095664024353
470;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7491453289985657
471;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9303285479545592
472;I want to use this in a memory allocation tracker in drm for stuff thats tied to the lifetime of a drm_device, not the underlying struct device;slab does this already;https://github.com/torvalds/linux/commit/fd7cb5753ef49964ea9db5121c3fc9a4ec21ed8e;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.7608565092086792
473;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Contradicts;0.9797922372817992
474;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5717662572860718
475;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.642184317111969
476;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Contradicts;0.5707431435585022
477;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6487889289855957
478;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.8060001730918884
479;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.7842060923576355
480;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5382251143455505
481;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5640799403190613
482;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.5491282343864441
483;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8010009527206421
484;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5021255612373352
485;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5761238932609558
486;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.6581331491470337
487;CONFIG_SLUB_DEBUG or CONFIG_SLOB, and blocks stop being aligned  ;blocks stop being aligned;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.986481785774231
488;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.7878105044364929
489;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.628864586353302
490;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.953311800956726
491;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Contradicts;0.9639650583267212
492;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.5558034777641296
493;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.9176321029663086
494;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7218859791755676
495;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8713335990905762
496;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.8567066192626953
497;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.845459520816803
498;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.785898745059967
499;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8488527536392212
500;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6910046339035034
501;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.6154543161392212
502;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5122910737991333
503;make the kmalloc() alignment to size explicitly guaranteed for power-of-two sizes under all configurations;provide to mm users what they need without difficult workarounds or own reimplementations;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9121804237365724
504;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.6612666249275208
505;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.558165967464447
506;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8399131298065186
507;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5313376188278198
508;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.681245744228363
509;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.8828772902488708
510;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.969732403755188
511;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6046679615974426
512;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7870621085166931
513;patch ensures alignment on all arches and cache sizes;Still;https://github.com/torvalds/linux/commit/59bb47985c1db229ccff8c5deebecd54fc77d2a9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9167347550392152
514;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5117638111114502
515;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8786198496818542
516;improve memory accounting;improve;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7035133242607117
517;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Contradicts;0.5319294333457947
518;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7306126356124878
519;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.909539759159088
520;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9943108558654784
521;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5175560712814331
522;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.6897056698799133
523;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.5759497880935669
524;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5307762026786804
525;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6560696959495544
526;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6171524524688721
527;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.7941218018531799
528;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Contradicts;0.687408447265625
529;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9480730295181274
530;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7125806212425232
531;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7737246155738831
532;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6867711544036865
533;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7781996726989746
534;Modifying a counter on page allocation and freeing should be acceptable even for the small system scenarios SLOB is intended for;SLOB is intended for;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5331627726554871
535;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7228286862373352
536;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.7530319690704346
537;it might look like a memory leak  ;As they also dont appear in /proc/slabinfo;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.929329514503479
538;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.7358561754226685
539;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8475188612937927
540;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5408115386962891
541;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.5730726718902588
542;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.5239942073822021
543;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5510035157203674
544;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5485532283782959
545;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5719630718231201
546;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6755780577659607
547;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7657079100608826
548;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5476763248443604
549;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.515902042388916
550;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7089638113975525
551;"SLAB doesnt actually use page allocator directly
";no change there;https://github.com/torvalds/linux/commit/6a486c0ad4dcdee3946842c64884d2978bfe2602;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5601615309715271
552;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5970277190208435
553;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.9141575694084167
554;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.7896054983139038
555;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5447145104408264
556;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8615742921829224
557;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.8855900168418884
558;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5375852584838867
559;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.515866219997406
560;add three helpers, convert the appropriate places;these three patches;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5394725799560547
561;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9473156332969666
562;to find out the size of a potentially huge page;Its unnecessarily hard;https://github.com/torvalds/linux/commit/a50b854e073cd3335bbbada8dcff83a857297dd7;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7331249713897705
563;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.754418671131134
564;union of slab_list and lru;slab_list and lru are the same bits;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.904276728630066
565;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5081178545951843
566;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5747276544570923
567;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7371703386306763
568;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9652844071388244
569;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.6463083624839783
570;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.8581426739692688
571;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8893717527389526
572;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5065914392471313
573;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9612968564033508
574;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6457554697990417
575;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5540286302566528
576;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.5893628597259521
577;verify that this change is safe to do by examining the object file produced from slob.c before and after this patch is applied;safe to do;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9930033087730408
578;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5417665839195251
579;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9937343001365662
580;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6773340106010437
581;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7937030792236328
582;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.754704475402832
583;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8081879615783691
584;configure and build (select SLOB allocator);SLOB allocator;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8666681051254272
585;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.8736962676048279
586;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5459408760070801
587;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9878675937652588
588;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7922229766845703
589;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.6603769063949585
590;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9552050828933716
591;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.9920023679733276
592;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5527316331863403
593;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Contradicts;0.5253307819366455
594;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.6452850699424744
595;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7805050015449524
596;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5674906969070435
597;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.5382775664329529
598;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.578328013420105
599;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.7679585218429565
600;Use slab_list list_head instead of the lru list_head for maintaining lists of slabs  ;maintain;https://github.com/torvalds/linux/commit/adab7b68189d14504e9f690ee7eb7e98af68301b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8461611270904541
601;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6771941184997559
602;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9072942733764648
603;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5081700086593628
604;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Contradicts;0.6733141541481018
605;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.530040442943573
606;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8916429281234741
607;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6060529351234436
608;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8074012398719788
609;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5047765970230103
610;Add a return parameter to slob_page_alloc();to signal that the list was modified;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9924339056015016
611;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.725719153881073
612;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9131327271461488
613;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5644760131835938
614;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8327754735946655
615;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5560277104377747
616;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6006276607513428
617;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5902146697044373
618;Add a return parameter to slob_page_alloc()  ;to signal that the allocation used up the whole page and that the page was removed from the free list;https://github.com/torvalds/linux/commit/130e8e09e2675bbc484581825fe29e2e5a6b8b0a;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9885826110839844
619;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6727736592292786
620;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7527661919593811
621;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8558506965637207
622;remove an unnecessary check for __GFP_ZERO;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5397602319717407
623;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.6589553356170654
624;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6756705641746521
625;Remove the unnecessary NULL pointer check;unnecessary;https://github.com/torvalds/linux/commit/9f88faee3ff7d6e8b09c9d23b7d4ac0c15a3eae9;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5166616439819336
626;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.8967819809913635
627;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5037083625793457
628;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9125401377677916
629;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5249657034873962
630;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6061062216758728
631;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5397496819496155
632;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5206802487373352
633;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9123870730400084
634;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7008822560310364
635;Add SPDX GPL-2.0 license identifier to files with no license;License cleanup;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.881475031375885
636;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.5485494136810303
637;to be applied to the file;a file by file comparison of the scanner;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8295587301254272
638;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Contradicts;0.690517246723175
639;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7348293662071228
640;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.793546199798584
641;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.7454689741134644
642;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7392256855964661
643;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6462834477424622
644;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9449973106384276
645;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5248233079910278
646;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5504686236381531
647;Make and config files were included as candidates if they contained >5 lines of source;File already had some variant of a license header in it (even if <5 lines);https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8804388046264648
648;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.504959762096405
649;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Contradicts;0.5079247355461121
650;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5033729076385498
651;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.886951744556427
652;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5015905499458313
653;All documentation files were explicitly excluded;explicitly excluded;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.726546049118042
654;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6073489785194397
655;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6357958316802979
656;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9373584985733032
657;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5959734916687012
658;the top level COPYING file license applied;both scanners couldnt find any license traces, file was considered to have no license information;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7189528942108154
659;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5344982743263245
660;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.909846305847168
661;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.595429539680481
662;For non */uapi/* files;that summary was;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6594884991645813
663;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5571992993354797
664;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6410925984382629
665;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6323954463005066
666;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5360458493232727
667;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Contradicts;0.5212987661361694
668;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9215519428253174
669;Kate also obtained a third independent scan of the 4.13 code base from FOSSology, and compared selected files where the other two scanners disagreed against that SPDX file;to see if there was new insights;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6188861727714539
670;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5727008581161499
671;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9306683540344238
672;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5482572317123413
673;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.6512941718101501
674;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6703615188598633
675;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5810028910636902
676;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.608063817024231
677;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.7673028111457825
678;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7760758996009827
679;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5152733325958252
680;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.600004255771637
681;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8930091261863708
682;Thomas wrote a script to parse the csv files and add the proper SPDX tag to the file  ;in the format that the file expected;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9157143235206604
683;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5856475830078125
684;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5749587416648865
685;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9583714604377748
686;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.569076418876648
687;Greg ran the script using the .csv files to generate the patches;to detect more types of files automatically and to distinguish between header and source .c files;https://github.com/torvalds/linux/commit/b24413180f5600bcb3bb70fbed5cf186b60864bd;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7311025261878967
688;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5566115379333496
689;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5111323595046997
690;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8730669617652893
691;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6488645672798157
692;reducing the irq states;allows reducing the irq states and will reduce the amount of __bfs() lookups we do;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5325916409492493
693;And by moving this annotation out of the lockdep code;it becomes easier for the mm people to extend;https://github.com/torvalds/linux/commit/d92a8cfcb37ecd1315269dab741f073b63b3a8b6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8965219259262085
694;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7841262221336365
695;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.5241100192070007
696;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6924890875816345
697;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7038708329200745
698;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Contradicts;0.5829500555992126
699;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.6108285784721375
700;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9131593704223632
701;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7587686777114868
702;"reported chasing a bug
";their assumption that SLAB_DESTROY_BY_RCU provided an existence guarantee;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5494828820228577
703;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8704993724822998
704;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5151524543762207
705;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Contradicts;0.5766794085502625
706;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9276356101036072
707;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6622934341430664
708;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.6956628561019897
709;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9816285371780396
710;SLAB_DESTROY_BY_RCU only prevents freeing of an entire slab of blocks;Instead;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Contradicts;0.5293071269989014
711;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5298765301704407
712;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9215783476829528
713;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.6011541485786438
714;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.693871021270752
715;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.6243740916252136
716;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.937440037727356
717;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Contradicts;0.5160273909568787
718;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6464129090309143
719;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Contradicts;0.6779058575630188
720;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.6990261077880859
721;renames SLAB_DESTROY_BY_RCU to SLAB_TYPESAFE_BY_RCU;to avoid future instances of this sort of confusion;https://github.com/torvalds/linux/commit/5f0d5a3ae7cff0d7fa943c199c3a2e44f23e1fac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9146199822425842
722;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5208610892295837
723;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9579802751541138
724;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7354674339294434
725;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5173448920249939
726;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7325337529182434
727;call synchronize_sched() just once;its enough to call it just once - after setting cpu_partial for all caches and before shrinking them;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.5032926797866821
728;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8857367634773254
729;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8204348087310791
730;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.501798152923584
731;move it out of the slab_mutex  ;which we have to hold for iterating over the slab cache list;https://github.com/torvalds/linux/commit/89e364db71fb5e7fc8d93228152abfa67daf35fa;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7229248881340027
732;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5762251019477844
733;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7151997685432434
734;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.6354071497917175
735;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7848641276359558
736;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5994874238967896
737;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5738013386726379
738;Adjust API to return type int instead of previously type bool;previously type bool;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6166908144950867
739;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6100432872772217
740;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6129622459411621
741;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8308543562889099
742;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9428834915161132
743;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6625176668167114
744;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6634401679039001
745;allow future extension of the bulk alloc API;is done to;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5431903004646301
746;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7766534090042114
747;We always end up returning some objects at the cost of another cmpxchg  ;Else;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5481492877006531
748;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8043422698974609
749;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9188286662101746
750;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.602617084980011
751;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Contradicts;0.5314247608184814
752;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.641045331954956
753;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.9814220666885376
754;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.9362034797668456
755;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8332684636116028
756;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8292407989501953
757;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Contradicts;0.5396087169647217
758;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8553001880645752
759;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.8780235648155212
760;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6988031268119812
761;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.8735116124153137
762;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Contradicts;0.5983997583389282
763;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.7552961111068726
764;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9301564693450928
765;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5776052474975586
766;"To keep compatible with future users of this API linking against an older kernel when using the new flag, we need to return the number of allocated objects with this API change.
";to keep compatible;https://github.com/torvalds/linux/commit/865762a8119e74b5f0e236d2d8eaaf8be9292a06;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9918644428253174
767;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.5409283638000488
768;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5838075280189514
769;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.9269780516624452
770;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9941297769546508
771;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7045354247093201
772;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6764026880264282
773;hiding potentially buggy callers;except temporarily;https://github.com/torvalds/linux/commit/96db800f5d73cd5c49461253d45766e094f0f8c2;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5500184297561646
774;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9656724333763124
775;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.9246424436569214
776;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.901145040988922
777;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6958662867546082
778;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.826890230178833
779;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8134469389915466
780;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5178853869438171
781;Add the basic infrastructure for alloc/free operations on pointer arrays;for alloc/free operations on pointer arrays;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8087613582611084
782;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8838971257209778
783;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5179818868637085
784;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9388223886489868
785;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.8595430254936218
786;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.6262189745903015
787;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5053678154945374
788;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.824357807636261
789;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9211874008178712
790;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5621338486671448
791;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.784638524055481
792;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7444119453430176
793;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.7989118695259094
794;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.5318984389305115
795;These optimizations may avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;avoid taking locks repeatedly and bypass metadata creation if all objects in slab pages can be used to provide the objects required;https://github.com/torvalds/linux/commit/484748f0b65a1950b2b93f444a2287e8dd2cedd6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8764486908912659
796;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9501873254776
797;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5276462435722351
798;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7513158321380615
799;Make dead caches discard free slabs immediately;slub;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5623407363891602
800;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5625158548355103
801;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.6629330515861511
802;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.647179901599884
803;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.6227638721466064
804;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.592022716999054
805;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6545658111572266
806;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Contradicts;0.5208913087844849
807;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6854087114334106
808;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Contradicts;0.5111916065216064
809;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.536994993686676
810;SLUB may store empty slabs in per cpu/node partial lists instead of freeing them immediately;To speed up further allocations;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9389086365699768
811;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8065934181213379
812;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6027023792266846
813;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6720295548439026
814;resurrects approach first proposed in [1];To fix this issue;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6707009673118591
815;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.7313470244407654
816;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.5158522725105286
817;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.945139467716217
818;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5741432905197144
819;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.7476227283477783
820;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8495438098907471
821;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5676925182342529
822;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6128057241439819
823;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.7823872566223145
824;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7422247529029846
825;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8596804738044739
826;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8418518900871277
827;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.7109384536743164
828;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9799485206604004
829;setting kmem_caches cpu_partial and min_partial constants to 0 and tuning put_cpu_partial();Achieving dropping frozen empty slabs immediately if cpu_partial = 0;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Contradicts;0.5053730607032776
830;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Contradicts;0.9665731191635132
831;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.6140462756156921
832;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6510019898414612
833;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5019355416297913
834;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8058668375015259
835;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5748278498649597
836;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Contradicts;0.5136386752128601
837;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6368547677993774
838;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7657750248908997
839;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.8056074380874634
840;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.5120747685432434
841;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9176263809204102
842;make put_cpu_partial() call unfreeze_partials() after freezing a slab that belongs to an offline memory cgroup;touch relatively cold functions, only make this specific call;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.6918994188308716
843;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7756388783454895
844;slab freezing exists;to avoid moving slabs from/to a partial list on free/alloc;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7750696539878845
845;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Contradicts;0.5473054647445679
846;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;Contradicts;0.6514778733253479
847;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5279905200004578
848;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8234112858772278
849;I do not see it as an option;SLUB shrinker would be too costly to call since SLUB does not keep free slabs on a separate list;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6267034411430359
850;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Contradicts;0.9426321387290956
851;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.7881226539611816
852;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.621435284614563
853;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.9651522040367126
854;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Contradicts;0.5617202520370483
855;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.5950132012367249
856;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.6882387399673462
857;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.8024079203605652
858;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.8566843867301941
859;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8074542880058289
860;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.7574340105056763
861;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8738677501678467
862;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Contradicts;0.747775673866272
863;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8790267109870911
864;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;Contradicts;0.7582770586013794
865;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Contradicts;0.5666072964668274
866;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Contradicts;0.7725284695625305
867;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Contradicts;0.7068670988082886
868;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6842060685157776
869;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.9148642420768738
870;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.6112834215164185
871;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6181765198707581
872;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.6555438041687012
873;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Contradicts;0.8960066437721252
874;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.95666241645813
875;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.5553997755050659
876;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6557457447052002
877;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9131921529769896
878;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9968679547309875
879;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Contradicts;0.9974291920661926
880;"Introduce much more complexity to both SLUB and memcg
";than this small patch;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.7484807968139648
881;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Contradicts;0.5345221161842346
882;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5636863112449646
883;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8664659857749939
884;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6455520987510681
885;Thanks to list_lru reparenting, we no longer keep entries for offline cgroups in per-memcg arrays;We do not have to bother if a per-memcg cache will be shrunk a bit later than it could be;https://github.com/torvalds/linux/commit/d6e0b7fa11862433773d986b5f995ffdf47ce672;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8551166653633118
886;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8829828500747681
887;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.9354886412620544
888;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8945327401161194
889;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.8292170166969299
890;Track caller if tracing or slab debugging is enabled;Tracing or slab debugging is enabled;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8872312307357788
891;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.8956598043441772
892;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8894119262695312
893;its okay to change this situation;default slab allocator, SLUB, doesnt use this technique;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5174862742424011
894;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Contradicts;0.5123478770256042
895;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5158497095108032
896;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7959843277931213
897;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9051123857498168
898;turn on/off CONFIG_DEBUG_SLAB without full kernel build and remove some complicated #if defintion;After this change, simplify the process and reduce complexity;https://github.com/torvalds/linux/commit/61f47105a2c9c60e950ca808b7560f776f9bfa31;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8720118403434753
899;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.6635454297065735
900;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5426254868507385
901;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.6435367465019226
902;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.6255995035171509
903;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7273305654525757
904;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.5152056217193604
905;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Contradicts;0.6056306958198547
906;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.7300044298171997
907;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.7568955421447754
908;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8932028412818909
909;slab_mutex for kmem_cache_shrink is removed;after its applied, there is no need in taking the slab_mutex;https://github.com/torvalds/linux/commit/03afc0e25f7fc03537014a770f4c54ebbe63a24c;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5649142861366272
910;unioned together;Conveniently;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.816429853439331
911;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5370222926139832
912;That code can use them interchangeably;Gets horribly confusing like with this nugget from slab.c;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8764646649360657
913;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5746685266494751
914;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.517264187335968
915;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.653580904006958
916;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5721811056137085
917;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9720414876937866
918;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6374254822731018
919;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.5518561601638794
920;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.5324779152870178
921;This patch makes the slab and slub code use page->lru universally instead of mixing ->list and ->lru;mixing ->list and ->lru;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8588226437568665
922;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.941838800907135
923;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7371642589569092
924;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6032487154006958
925;The new rule is: page->lru is what you use;if you want to keep your page on a list;https://github.com/torvalds/linux/commit/34bf6ef94a835a8f1d8abd3e7d38c6c08d205867;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7414581775665283
926;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Contradicts;0.5279755592346191
927;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.5363600254058838
928;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9381111860275269
929;function naming changes;requires some;https://github.com/torvalds/linux/commit/f1b6eb6e6be149b40ebb013f5bfe2ac86b6f1c1b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6821291446685791
930;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5370556116104126
931;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.5158014893531799
932;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.765215277671814
933;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8510309457778931
934;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6950199007987976
935;Call the ctor() method only if allocation succeeded;The solution is to only call the ctor() method if allocation succeeded;https://github.com/torvalds/linux/commit/c1e854e924f354657ea2ad08fd7b38aac81c59b1;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6993089318275452
936;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.6333078145980835
937;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Contradicts;0.701798141002655
938;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Contradicts;0.762467086315155
939;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6988510489463806
940;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6806787252426147
941;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5147769451141357
942;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5870480537414551
943;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.746446430683136
944;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8365981578826904
945;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7204014658927917
946;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.5963924527168274
947;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9604132771492004
948;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Contradicts;0.5985427498817444
949;Rename the function names page_xchg_last_nid(), page_last_nid(), and reset_page_last_nid() to a struct_field_op style pattern;The function names were judged to be inconsistent;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Compare the sizes of vmlinux-slab and vmlinux-slob;to analyze memory consumption;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Contradicts;0.6800087094306946
950;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6184072494506836
951;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8926836252212524
952;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5800727009773254
953;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.647499144077301
954;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.5343320965766907
955;rename reset_page_mapcount() to page_mapcount_reset();it looked jarring to have them beside each other;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9139598608016968
956;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9675874710083008
957;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6299936771392822
958;a rename would likely cause more conflicts than it is worth  ;as it is used throughout the arch code;https://github.com/torvalds/linux/commit/22b751c3d0376e86a377e3a0aa2ddbbe9d2eefc1;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9282041788101196
959;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Contradicts;0.5434845685958862
960;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.8122329711914062
961;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.6557981967926025
962;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Contradicts;0.5564919710159302
963;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7624412178993225
964;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5684237480163574
965;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.8578987717628479
966;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;Contradicts;0.9372754693031312
967;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7998515367507935
968;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7244152426719666
969;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7139215469360352
970;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6027430891990662
971;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5945587754249573
972;If we start chaining caches, this information will always be more trustworthy than whatever is passed into the function.;this information will always be more trustworthy;https://github.com/torvalds/linux/commit/b9ce5ef49f00daf2254c6953c8d31f79aabccd34;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8147100806236267
973;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5783350467681885
974;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Contradicts;0.5579327940940857
975;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9600780606269836
976;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Contradicts;0.5057023763656616
977;The definition of ARCH_SLAB_MINALIGN is architecture dependent and can be either of type size_t or int;architecture dependent;https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.995528519153595
978;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.950813889503479
979;using the size_t type to compare them is safe  ;"both are always small positive integer numbers; gets rid of the warning";https://github.com/torvalds/linux/commit/789306e5ad6b3051c263ac2478875efa8bc07462;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5301423072814941
980;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5403754711151123
981;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5234773755073547
982;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.952382504940033
983;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.552786111831665
984;this patch also drops the EXPORT_SYMBOL tag;Since now its static, inline, header-defined function;https://github.com/torvalds/linux/commit/242860a47a75b933a79a30f6a40bf4858f4a3ecc;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6314594149589539
985;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8202458024024963
986;Improve trace accuracy;by correctly tracing reported size;https://github.com/torvalds/linux/commit/fe74fe2bf293d061826f0d7afc2ca8456bdbb40e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5111565589904785
987;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Contradicts;0.5034830570220947
988;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6304504871368408
989;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8395751714706421
990;ksize() can simply return PAGE_SIZE << compound_order(page);There is no need to store the allocated size;https://github.com/torvalds/linux/commit/999d8795d438d396936811b185428d70b7b7de6d;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6171324253082275
991;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5829350352287292
992;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.5881181359291077
993;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Contradicts;0.5549830794334412
994;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.5877450108528137
995;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8930714130401611
996;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5703516006469727
997;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7214019894599915
998;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5011724829673767
999;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.8842617869377136
1000;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8849815130233765
1001;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5190150141716003
1002;Add the function `__kmalloc_track_caller()`  ;This breaks Pekkas slab/next tree;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8774846792221069
1003;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.792232096195221
1004;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.955847144126892
1005;Fix build breakage in __kmalloc_node_track_caller;gfp is undeclared;https://github.com/torvalds/linux/commit/82bd5508b4080e851ac1a9b62bed6d727b1b4a84;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6755674481391907
1006;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.8039181232452393
1007;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8014075756072998
1008;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5399473905563354
1009;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7625993490219116
1010;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6648181676864624
1011;kmalloc_track_caller() is correctly implemented;tracing the specified caller;https://github.com/torvalds/linux/commit/f3f741019595f1e73564d985f5fe8abcbb98c769;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.5404911041259766
1012;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5993545651435852
1013;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Contradicts;0.5044237375259399
1014;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.7482886910438538
1015;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.951223611831665
1016;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.855420708656311
1017;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5630333423614502
1018;This will allow us to push more processing into common code later;improve readability;https://github.com/torvalds/linux/commit/8a13a4cc80bb25c9eab2e7e56bab724fcfa55fce;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8584675788879395
1019;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5554064512252808
1020;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7073094844818115
1021;can be done in __kmem_cache_shutdown;What is done there;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5757401585578918
1022;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Contradicts;0.5525497198104858
1023;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6168181896209717
1024;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9551873207092284
1025;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8406051397323608
1026;This affects RCU handling;somewhat;https://github.com/torvalds/linux/commit/12c3667fb780e20360ad0bde32dfb3591ef609ad;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Contradicts;0.5302174687385559
1027;This is possible now;the acquisition of the mutex was moved into kmem_cache_create();https://github.com/torvalds/linux/commit/7c9adf5a5471647f392169ef19d3e81dcfa76045;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8603705167770386
1028;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6362166404724121
1029;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.951394259929657
1030;Fix early boot kernel crash;Slob;https://github.com/torvalds/linux/commit/44a8bdea19dff1abcdc4528e5f7e038b18ee5255;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.503980815410614
1031;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7540931701660156
1032;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6401636004447937
1033;Remove various small accessors;various small;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6076209545135498
1034;They are no longer needed;They have become so simple;https://github.com/torvalds/linux/commit/b5568280c9b9162b384be9d447013b74d682d4b3;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9024390578269958
1035;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.6084077954292297
1036;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9066739082336426
1037;No need to zero mapping since it is no longer in use;it is no longer in use;https://github.com/torvalds/linux/commit/690d5777392180fdc05a82c0c7979e50e8d93de8;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.8315215706825256
1038;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Contradicts;0.581570029258728
1039;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.8638598918914795
1040;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9150137305259703
1041;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.58708655834198
1042;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8447117209434509
1043;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.9106647968292236
1044;This cleans up numerous of typecasts in slob.c and makes readers aware of slobs use of page struct fields;makes readers aware of slobs use of page struct fields;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9913896918296814
1045;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5542585849761963
1046;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9581893086433412
1047;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5868945121765137
1048;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.8544133305549622
1049;cleans up some bitrot in slob.c;Also;https://github.com/torvalds/linux/commit/b8c24c4aef94b1f0daafb450363fef13a1163780;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8053083419799805
1050;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9009993076324464
1051;move duplicated code in <asm/atomic.h> to <linux/atomic.h>;to avoid duplication of code;https://github.com/torvalds/linux/commit/60063497a95e716c9a689af3be2687d261f115b4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5687344074249268
1052;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.6634016036987305
1053;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8140078186988831
1054;Fix gfp flags passed to lockdep;lockdep;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.584738552570343
1055;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.5990659594535828
1056;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8436808586120605
1057;Ran a ktest.pl config_bisect;Came up with this config as the problem;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6624770760536194
1058;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7902057766914368
1059;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5171304941177368
1060;Adding this mask;fixes the bug;https://github.com/torvalds/linux/commit/bd50cfa89153a67429935a15e577a5eb5f10dd1b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7333119511604309
1061;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.544495165348053
1062;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8692144751548767
1063;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5473839640617371
1064;fix gfp flags for order-0 page allocations  ;fix for order-0 page allocations;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6033430695533752
1065;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Contradicts;0.7813575863838196
1066;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5044665336608887
1067;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8413199186325073
1068;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7132235169410706
1069;The bit should be passed to trace_kmalloc_node()  ;as well;https://github.com/torvalds/linux/commit/8df275af8db8220d7e3f1bf97b6ac7aad05f96f0;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5955972075462341
1070;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;Contradicts;0.672950029373169
1071;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8314471244812012
1072;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5937869548797607
1073;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.57355135679245
1074;The result shows an improvement of 1 MB!;tested it on a embeded system with 64 MB, found this path is never called during kernel bootup.;https://github.com/torvalds/linux/commit/d602dabaeba79df90cc67c32d5fe4ee0d5e2b73a;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6143234968185425
1075;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7774407267570496
1076;we dont care about the RCU head state before passing it to call_rcu();anyway;https://github.com/torvalds/linux/commit/875352c94224c88f5aa28cb77206f993bd31b7a2;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7597309350967407
1077;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Contradicts;0.7739337682723999
1078;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.5664041042327881
1079;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.6371341943740845
1080;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8844156265258789
1081;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6120425462722778
1082;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5536534190177917
1083;Remove kmemtrace ftrace plugin;tracing;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.7418060898780823
1084;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Contradicts;0.5279965400695801
1085;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Contradicts;0.6681429743766785
1086;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.870836079120636
1087;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.7187740206718445
1088;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.6217154264450073
1089;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.6409737467765808
1090;We remove kmemtrace  ;kmemtrace has been superseded by kmem trace events and perf-kmem;https://github.com/torvalds/linux/commit/039ca4e74a1cf60bd7487324a564ecf5c981f254;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.6253171563148499
1091;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Contradicts;0.500083327293396
1092;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9393587708473206
1093;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5513806939125061
1094;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.5229687690734863
1095;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.756755530834198
1096;fix RCU-callback-after-kmem_cache_destroy problem in sl[aou]b  ;to address the issue;https://github.com/torvalds/linux/commit/7ed9f7e5db58c6e8c2b4b738a75d5dcd8e17aad5;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5974043607711792
1097;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9136688113212584
1098;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6744027137756348
1099;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7634913325309753
1100;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.6483657956123352
1101;adds alloc_pages_exact_node() that only checks the nid;To avoid a comparison and branch, this patch;https://github.com/torvalds/linux/commit/6484eb3e2a81807722c5f28efef94d8338b7b996;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.5581068396568298
1102;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9327415227890016
1103;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5121643543243408
1104;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6010063290596008
1105;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9752838015556335
1106;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Contradicts;0.6180646419525146
1107;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.505351185798645
1108;SLOB does not correctly account reclaim_state.reclaimed_slab, so it will break memory reclaim;SLOB does not correctly account reclaim_state.reclaimed_slab;https://github.com/torvalds/linux/commit/1f0532eb617d28f65c93593a1491f662f14f7eac;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Contradicts;0.633465051651001
1109;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9304190874099731
1110;refactor code for future changes;Impact;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6091002225875854
1111;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7852595448493958
1112;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5213374495506287
1113;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5406312942504883
1114;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.514861524105072
1115;include/linux/kmemtrace.h: header file for kmemtrace, include/trace/kmem.h: definition of kmem tracepoints;header file for kmemtrace, definition of kmem tracepoints;https://github.com/torvalds/linux/commit/02af61bb50f5d5f0322dbe5ab2a0d75808d25c7b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9273539185523988
1116;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7131224274635315
1117;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6647970080375671
1118;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.7228700518608093
1119;use tracepoints;kmemtrace;https://github.com/torvalds/linux/commit/ca2b84cb3c4a0d4d2143b46ec072cdff5d1b3b87;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7184819579124451
1120;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8945503830909729
1121;annotate reclaim context (__GFP_NOFS), fix SLOB;lockdep;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5956865549087524
1122;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Contradicts;0.5914949774742126
1123;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.6314852237701416
1124;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9427270889282228
1125;fix typo in mm/slob.c;build fix;https://github.com/torvalds/linux/commit/19cefdffbfe0f7e280f21e80875937e8700e99e2;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8657596707344055
1126;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8766599297523499
1127;fix lockup in slob_free()  ;lockup;https://github.com/torvalds/linux/commit/6fb8f424393025674fde7869b59f485d1e352182;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8968831300735474
1128;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.758252739906311
1129;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.6062957644462585
1130;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5279821157455444
1131;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5958897471427917
1132;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.6351557970046997
1133;added reclaim context annotation to kswapd, and allocation tracing to slab allocators  ;which may only ever reach the page allocator in rare cases, so it is good to put annotations here too;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7836580276489258
1134;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.5783387422561646
1135;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6118874549865723
1136;have some improvement  ;the concept is no less complete than discovery of a locks interrupt contexts;https://github.com/torvalds/linux/commit/cf40bd16fdad42c053040bcd3988f5fdedbb6c57;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5198522806167603
1137;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Contradicts;0.5220407843589783
1138;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8391439914703369
1139;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.666449785232544
1140;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6247799396514893
1141;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.8328971862792969
1142;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.5477482676506042
1143;"Commit 7b2cd92adc5430b0c1adeb120971852b4ea1ab08 (""crypto: api - Fix zeroing on free"")";added modular user of ksize();https://github.com/torvalds/linux/commit/b1aabecd55931ee754f6a913969516b26a0e682e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.823966920375824
1144;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Contradicts;0.5828122496604919
1145;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9417216777801514
1146;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6803611516952515
1147;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6690926551818848
1148;This patch adapts kmemtrace raw events tracing to the unified tracing API;Impact: new tracer plugin;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6276599168777466
1149;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.5218458771705627
1150;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8442893028259277
1151;enable and use this tracer;To enable and use this tracer;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8092226386070251
1152;I find it more readable  ;personal opinion;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8624059557914734
1153;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8768030405044556
1154;Drop it  ;if you want;https://github.com/torvalds/linux/commit/36994e58a48fb8f9651c7dc845a6de298aba5bfc;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.9322961568832396
1155;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8521612286567688
1156;fix bogus ksize calculation fix  ;SLOB;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.501695454120636
1157;fixes the previous fix  ;completely wrong on closer inspection;https://github.com/torvalds/linux/commit/70096a561d1e09120bae1f293f3632cedbfd5c68;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9093944430351256
1158;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.8897520303726196
1159;fix bogus ksize calculation;bogus;https://github.com/torvalds/linux/commit/85ba94ba0592296053f7f2846812173424afe1cb;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5025617480278015
1160;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.728186845779419
1161;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6203986406326294
1162;removes the obsolete and no longer used exports of ksize  ;obsolete and no longer used;https://github.com/torvalds/linux/commit/231367fd9bccbb36309ab5bf5012e11a84231031;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.6560018658638
1163;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Contradicts;0.532447874546051
1164;Pass only pointer to the object  ;"Nobody uses this ""feature"", nor does anybody use passed kmem cache in a non-trivial way";https://github.com/torvalds/linux/commit/51cc50685a4275c6a02653670af9f108a64e01cf;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6523771286010742
1165;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.895017147064209
1166;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.6913235187530518
1167;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Contradicts;0.5226145386695862
1168;record page flag overlays explicitly;slob;https://github.com/torvalds/linux/commit/9023cb7e8564d95a1893f8cb6895a293be9a71fe;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6058667302131653
1169;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6606596112251282
1170;Fix to return wrong pointer;Fix;https://github.com/torvalds/linux/commit/239f49c0800778c863585a103805c58afbad6748;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5295740365982056
1171;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.7783966064453125
1172;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7283831834793091
1173;"slob: fix bug - when slob allocates ""struct kmem_cache"", it does not force alignment";it does not force alignment;https://github.com/torvalds/linux/commit/0701a9e649bf0ffdac0a761d3c3d1041f5375d90;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.984571933746338
1174;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.954697847366333
1175;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7362632751464844
1176;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.5063672065734863
1177;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.6298173666000366
1178;reduce external fragmentation by using three free lists;slob;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6669073104858398
1179;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;Contradicts;0.5037733912467957
1180;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9646127223968506
1181;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.6475198864936829
1182;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.688663899898529
1183;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.6746546030044556
1184;By putting smaller objects on their own list, we greatly reduce overall external fragmentation and increase repeatability;we greatly reduce overall external fragmentation and increase repeatability;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8450557589530945
1185;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.935022234916687
1186;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.7351899147033691
1187;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.6325991153717041
1188;This reduces total SLOB overhead;from > 50% to ~6% on a simple boot test;https://github.com/torvalds/linux/commit/20cecbae44528d347c46e71f40650b75e0dcbc8e;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9720154404640198
1189;fix memory corruption;memory corruption;https://github.com/torvalds/linux/commit/d32ddd8f20e7d7a49c45c337c2079be03c77dc41;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9242939352989196
1190;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.667277455329895
1191;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.578799307346344
1192;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5040264129638672
1193;remove useless ctor parameter and reorder parameters;useless;https://github.com/torvalds/linux/commit/4ba9b9d0ba0a49d91fa6417c7510ee36f48cf957;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6713718175888062
1194;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.737639844417572
1195;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9680533409118652
1196;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7707422971725464
1197;Handle that separately in krealloc();separately;https://github.com/torvalds/linux/commit/ef8b4520bd9f8294ffce9abd6158085bde5dc902;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.756890594959259
1198;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.6361454129219055
1199;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.7728796601295471
1200;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.7171235680580139
1201;lets use unlikely() for the condition check in SLUBs and SLOBs kfree();Considering kfree(NULL) would normally occur only in error paths and kfree(ZERO_SIZE_PTR) is uncommon as well, so lets use unlikely() to optimize for the common case;https://github.com/torvalds/linux/commit/2408c55037c3f7d51a8a100025c47595e71b838c;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9586025476455688
1202;reduce list scanning;slob;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.93037611246109
1203;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Contradicts;0.9313117265701294
1204;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Contradicts;0.5542938113212585
1205;starting each page search where the last one left off;to evenly distribute the allocations and greatly shorten the average search;https://github.com/torvalds/linux/commit/d6269543ef24aa012aa228c27af3adb074f7b36b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.525165855884552
1206;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;remove bigblock tracking;slob;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Contradicts;0.5879347324371338
1207;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;SLOB to be used on SMP  ;allows;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Contradicts;0.7328894138336182
1208;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Contradicts;0.8057064414024353
1209;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6435019969940186
1210;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.919784665107727
1211;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.6308109760284424
1212;This rips out support for the dtor pointer from kmem_cache_create() completely and fixes up every single callsite in the kernel  ;there were about 224 callsites;https://github.com/torvalds/linux/commit/20c2df83d25c6a95affe6157a4c9cac4cf5ffaac;fix;SLOB=y && SMP=y fix;https://github.com/torvalds/linux/commit/9934a7939e1cdce62ece9ef7d25ebb3c55547fac;Contradicts;0.7815169095993042
1213;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.586736798286438
1214;Cleanup zeroing allocations;Slab allocators;https://github.com/torvalds/linux/commit/81cda6626178cd55297831296ba8ecedbfd8b52d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5298706293106079
1215;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.8795691728591919
1216;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5337818264961243
1217;add the necessary logic to all slab allocators to support __GFP_ZERO;support __GFP_ZERO;https://github.com/torvalds/linux/commit/d07dbea46405b37d59495eb4de9d1056dcfb7c6d;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.956187903881073
1218;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5543853044509888
1219;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7466922998428345
1220;Make slub return NULL like the other allocators if a too large memory segment is requested via __kmalloc;other allocators;https://github.com/torvalds/linux/commit/6cb8f91320d3e720351c21741da795fed580b21b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9893428087234496
1221;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.743992269039154
1222;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.6778901815414429
1223;improved alignment handling;improved;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7094081044197083
1224;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.667225182056427
1225;Use __alignof__ (unsigned long) for the default alignment  ;This allows relaxed alignment architectures to take better advantage of SLOBs small minimum alignment;https://github.com/torvalds/linux/commit/553948491c18413928b85a9025b92af80e7d61d6;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.618537425994873
1226;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Contradicts;0.9744053483009338
1227;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7924201488494873
1228;Allocation size is stored in page->private;makes ksize more accurate than it previously was;https://github.com/torvalds/linux/commit/d87a133fc21d842e3cc285e6bbff727181abec81;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5467556715011597
1229;rework freelist handling;slob;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.531612753868103
1230;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6581851840019226
1231;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7539620995521545
1232;we dont encode seperate size and next fields into each slob block;"use the sign bit to distinguish between ""size"" or ""next""";https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Introduce a memory-zeroing variant of kmem_cache_alloc;memory-zeroing variant;https://github.com/torvalds/linux/commit/a8c0f9a41f88da703ade33f9c1626a55c786e8bb;Contradicts;0.5710402131080627
1233;"size 1 blocks contain a ""next"" offset; others contain the ""size"" in the first unit and ""next"" in the second unit  ";description of how the blocks are structured;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8264259696006775
1234;"align them to word size
";it is best in practice;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6560104489326477
1235;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Contradicts;0.5673632025718689
1236;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.531838595867157
1237;make kmalloc use its own slob_block at the front of the allocation  ;to encode allocation size, rather than rely on not overwriting slobs existing header block;https://github.com/torvalds/linux/commit/95b35127f13661abb0dc3459042cdb417d21e692;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7188541293144226
1238;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9191607236862184
1239;"Taking a spinlock in a destructor is a bit risky
";since the slab allocators may run the destructors anytime they decide a slab is no longer needed;https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;simplifies SLOB;at this point slob may be broken;https://github.com/torvalds/linux/commit/d00bcc98d7ec2c87391c9d9e1cca519ef64d33ef;Contradicts;0.5700864791870117
1240;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.6897792816162109
1241;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Contradicts;0.681026816368103
1242;"
Use a destructor will BUG()
";"
Any attempt to";https://github.com/torvalds/linux/commit/c59def9f222d44bb7e2f0a559f2906191a0862d7;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.8971897959709167
1243;The SLOB allocator should implement SLAB_DESTROY_BY_RCU correctly;even on UP, RCU freeing semantics are not equivalent to simply freeing immediately;https://github.com/torvalds/linux/commit/afc0cedbe9138e3e8b38bfa1e4dfd01a2c537d62;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9983367919921876
1244;fix page order calculation on not 4KB page;-;https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6554731130599976
1245;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Contradicts;0.5293784141540527
1246;This patch fixes it with using get_order() instead of find_order()  ;which is SLOB version of get_order();https://github.com/torvalds/linux/commit/4ab688c51226188f2d4ad4f789032c107944ef89;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7595569491386414
1247;Remove obsolete SLAB_MUST_HWCACHE_ALIGN;obsolete;https://github.com/torvalds/linux/commit/5af60839909b8e3b28ca7cd7912fa0b23475617f;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.5346745252609253
1248;handle SLAB_PANIC flag;slob;https://github.com/torvalds/linux/commit/bc0055aee40ba40627361d8ffd8530d315920f18;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.903165638446808
1249;Introduce krealloc();reallocates memory while keeping the contents unchanged;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.86277174949646
1250;added a simple non-optimized version for mm/slob.c for compatibility;compatibility;https://github.com/torvalds/linux/commit/fd76bab2fa6d8f3ef6b326a4c6ae442fa21d30a4;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7817730903625488
1251;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9730241894721984
1252;[PATCH] MM: SLOB is broken by recent cleanup of slab.h;recent cleanup of slab.h;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;SLOB saving nearly half a megabyte of RAM;Comparison for otherwise identical builds;https://github.com/torvalds/linux/commit/10cef6029502915bdb3cf0821d425cf9dc30c817;Contradicts;0.7170750498771667
1253;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.6959581971168518
1254;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9905718564987184
1255;"This routine cannot be removed after init in the case of slob.c -- it serves as a timer callback
";it serves as a timer callback;https://github.com/torvalds/linux/commit/bcb4ddb46a4c66d64d091e7ffa951b2aa1ba537f;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;Contradicts;0.860260009765625
1256;Cleanup slab headers / API  ;to allow easy addition of new slab allocators;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.7300252318382263
1257;This patch cleans up the slab header definitions;cleans up the slab header definitions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9885872602462769
1258;add several empty functions to slob.c and rename slobs kmalloc to __kmalloc;In order to get a greater set of common functions;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Slob does not need any special definitions;since we introduce a fallback case;https://github.com/torvalds/linux/commit/2e892f43ccb602e8ffad73396a1000f2040c9e0b;Contradicts;0.9510678648948668
1259;Remove the atomic counter for slab_reclaim_pages and replace the counter and NR_SLAB with two ZVC counter that account for unreclaimable and reclaimable slab pages: NR_SLAB_RECLAIMABLE and NR_SLAB_UNRECLAIMABLE;account for unreclaimable and reclaimable slab pages;https://github.com/torvalds/linux/commit/972d1a7b140569084439a81265a0f15b74e924e0;[PATCH] mm/slob.c: for_each_possible_cpu(), not NR_CPUS  ;correction in function call;https://github.com/torvalds/linux/commit/75129e297e861e6c61038aa4cdbf604b022de4ff;Contradicts;0.6343171000480652
