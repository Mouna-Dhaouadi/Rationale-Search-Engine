;Decision1;Rationale1;URL1;Decision2;Rationale2;URL2;Relationship;Alpha;similarity_rationales;contradiction_rationales
0;"fix
";use find_lock_task_mm too;https://github.com/torvalds/linux/commit/c81fac5cb8c92b8b4795ac250a46c7514d1fce06;Fix it.;Fixes;https://github.com/torvalds/linux/commit/7c59aec830c7ed6c745bd513982cee3563ed20c1;Similar;0.9647775888442992;0.6427177786827087;
1;"fix
";use find_lock_task_mm too;https://github.com/torvalds/linux/commit/c81fac5cb8c92b8b4795ac250a46c7514d1fce06;fix it;fix;https://github.com/torvalds/linux/commit/96ac5913f4e45c6a1b98350f2c0a8bb3abe2646a;Similar;0.9727684259414672;0.6310828328132629;
2;"Remove the ""if (!p->mm)"" check in select_bad_process()";it is just wrong;https://github.com/torvalds/linux/commit/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03;Remove the redundancy in __oom_kill_task();redundancy;https://github.com/torvalds/linux/commit/b940fd703572f7f9e5f894c682c91c3cbd84c11e;Similar;0.9039254784584044;0.566910445690155;
3;"Remove the ""if (!p->mm)"" check in select_bad_process()";it is just wrong;https://github.com/torvalds/linux/commit/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03;remove redundant OOM score normalization in select_bad_process();redundant OOM score normalization;https://github.com/torvalds/linux/commit/2c207985f354dfb549e5a543102a3e084eea81f6;Similar;0.9306643009185792;0.5595449805259705;
4;Add the new helper, find_lock_task_mm();"finds the live thread which uses the memory and takes task_lock() to pin ->mm

Decision: change oom_badness()";https://github.com/torvalds/linux/commit/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03;use the newly added pidfd_get_task() helper;Instead of duplicating the same code in two places;https://github.com/torvalds/linux/commit/ee9955d61a0a770152f9c3af470bd1689f034c74;Similar;0.9038145542144777;0.382981538772583;0.6044740080833435
5;moves oomkilladj (now more appropriately named oom_adj) from struct task_struct to struct signal_struct;more appropriately named;https://github.com/torvalds/linux/commit/28b83c5193e7ab951e402252278f2cc79dc4d298;Move oomkilladj (now more appropriately named oom_adj) from struct task_struct to struct mm_struct;more appropriately named;https://github.com/torvalds/linux/commit/2ff05b2b4eac2e63d345fc731ea151a060247f53;Similar;0.9773755073547364;1.0000001192092896;
6;fix possible oom_dump_tasks NULL pointer;possible oom_dump_tasks NULL pointer;https://github.com/torvalds/linux/commit/6d2661ede5f20f968422e790af3334908c3bc857;fix NULL pointer dereference;NULL pointer dereference;https://github.com/torvalds/linux/commit/be71cf2202971e50ce4953d473649c724799eb8a;Similar;0.9276682138442992;0.8698433637619019;
7;There is no need to call for int_sqrt;if argument is 0;https://github.com/torvalds/linux/commit/a12888f772dab4bf5e6f73668dc4f5f6026a7014;Theres no need to fill the ring buffer with this information;if its already been printed and the condition that triggered the previous OOM killer has not yet been alleviated.;https://github.com/torvalds/linux/commit/7213f5066fc8a17c78389fe245de522b5cf0648a;Similar;0.9147766828536988;0.4368751943111419;
8;There is no need to call for int_sqrt;if argument is 0;https://github.com/torvalds/linux/commit/a12888f772dab4bf5e6f73668dc4f5f6026a7014;Theres no need to call schedule_timeout_interruptible();task must die ASAP;https://github.com/torvalds/linux/commit/2f659f462d2ab519068d0e2bb677d7a700decb8d;Similar;0.9592934846878052;0.6303914785385132;
9;Fix it.;Fixes;https://github.com/torvalds/linux/commit/7c59aec830c7ed6c745bd513982cee3563ed20c1;fix it;fix;https://github.com/torvalds/linux/commit/96ac5913f4e45c6a1b98350f2c0a8bb3abe2646a;Similar;0.9912862181663512;0.9597496390342712;
10;Remove the redundancy in __oom_kill_task();redundancy;https://github.com/torvalds/linux/commit/b940fd703572f7f9e5f894c682c91c3cbd84c11e;remove redundant OOM score normalization in select_bad_process();redundant OOM score normalization;https://github.com/torvalds/linux/commit/2c207985f354dfb549e5a543102a3e084eea81f6;Similar;0.9078729152679444;0.7048869132995605;
11;Remove this dubious PF_EXITING check;dubious;https://github.com/torvalds/linux/commit/cef1d3523d33ebc35fc29e454b1f4bab953fabbf;remove unnecessary exit_state check;unnecessary;https://github.com/torvalds/linux/commit/fb794bcbb4e5552242f9a4c5e1ffe4c6da29a968;Similar;0.914885640144348;0.8506293892860413;
12;do not attempt to reap a task more than twice;do not attempt to reap a task more than twice;https://github.com/torvalds/linux/commit/11a410d516e89320fe0817606eeab58f36c22968;do not attempt to reap a task twice;do not attempt to reap a task twice;https://github.com/torvalds/linux/commit/8496afaba93ece80a83cbd096f0675a1020ddfc4;Similar;0.978988230228424;0.978988230228424;
13;remove unused argument from oom_scan_process_thread();unused argument;https://github.com/torvalds/linux/commit/fbe84a09da746f781553051bb3dbc63f7b0a5162;Remove the PT_TRACE_EXIT check in oom_scan_process_thread();"It was added to handle the case when coredumping was ""frozen"" by ptrace, but it doesnt really work";https://github.com/torvalds/linux/commit/6a2d5679b4a852a3bf80c570644456ab466ab714;Similar;0.9157769083976746;0.3677940964698791;
14;remove unused argument from oom_scan_process_thread();unused argument;https://github.com/torvalds/linux/commit/fbe84a09da746f781553051bb3dbc63f7b0a5162;Remove unused start/end arguments from tlb_finish_mmu();unused;https://github.com/torvalds/linux/commit/ae8eba8b5d723a4ca543024b6e51f4d0f4fb6b6b;Similar;0.9289190769195556;0.9252907633781432;
15;remove deprecated oom_adj;deprecated;https://github.com/torvalds/linux/commit/01dc52ebdf472f77cca623ca693ca24cfc0f1bbe;remove task_t, convert to struct task_struct;cleanup, remove;https://github.com/torvalds/linux/commit/36c8b586896f60cb91a4fd526233190b34316baf;Similar;0.9025689363479614;0.77170729637146;
16;remove deprecated oom_adj;deprecated;https://github.com/torvalds/linux/commit/01dc52ebdf472f77cca623ca693ca24cfc0f1bbe;Remove the parameter @mem;removed since v2.6.26;https://github.com/torvalds/linux/commit/fbdd12676c83df77480f00ebd32fc98fbe3bf836;Similar;0.902563214302063;0.6619846820831299;
17;remove deprecated oom_adj;deprecated;https://github.com/torvalds/linux/commit/01dc52ebdf472f77cca623ca693ca24cfc0f1bbe;removes PF_OOM_ORIGIN;behavior is equivalent to setting the processs oom_score_adj to OOM_SCORE_ADJ_MAX;https://github.com/torvalds/linux/commit/72788c385604523422592249c19cba0187021e9b;Similar;0.9209129214286804;0.3943180441856384;
18;Theres no need to fill the ring buffer with this information;if its already been printed and the condition that triggered the previous OOM killer has not yet been alleviated.;https://github.com/torvalds/linux/commit/7213f5066fc8a17c78389fe245de522b5cf0648a;Theres no need to call schedule_timeout_interruptible();task must die ASAP;https://github.com/torvalds/linux/commit/2f659f462d2ab519068d0e2bb677d7a700decb8d;Similar;0.917081356048584;0.5518538355827332;
19;Prepare for new header dependencies before moving code to <linux/sched/coredump.h>;Prepare for new header dependencies;https://github.com/torvalds/linux/commit/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92;Prepare for new header dependencies before moving code to <linux/sched/mm.h>;Prepare for new header dependencies;https://github.com/torvalds/linux/commit/6e84f31522f931027bf695752087ece278c10d3f;Similar;0.992728590965271;1.0;
20;Create a trivial placeholder <linux/sched/coredump.h> file that just maps to <linux/sched.h>;to make this patch obviously correct and bisectable;https://github.com/torvalds/linux/commit/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92;Create a trivial placeholder <linux/sched/mm.h> file;to make this patch obviously correct and bisectable;https://github.com/torvalds/linux/commit/6e84f31522f931027bf695752087ece278c10d3f;Similar;0.942794680595398;0.9999998807907104;
21;Include the new header in the files that are going to need it;files that are going to need it;https://github.com/torvalds/linux/commit/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92;Include the new header in the files that are going to need it;that are going to need it;https://github.com/torvalds/linux/commit/6e84f31522f931027bf695752087ece278c10d3f;Similar;0.9999998211860656;0.868226170539856;
22;removes the __GFP_NOFAIL special case;more clear semantic without surprising side effects;https://github.com/torvalds/linux/commit/06ad276ac18742c6b281698d41b27a290cd42407;removes PF_OOM_ORIGIN;behavior is equivalent to setting the processs oom_score_adj to OOM_SCORE_ADJ_MAX;https://github.com/torvalds/linux/commit/72788c385604523422592249c19cba0187021e9b;Similar;0.9080530405044556;0.3565303981304168;
23;Remove unnecessary locking in exit_oom_victim();unnecessary locking in exit_oom_victim();https://github.com/torvalds/linux/commit/da51b14adb671829077da3aeb9e9edd6f8c80afe;remove unnecessary exit_state check;unnecessary;https://github.com/torvalds/linux/commit/fb794bcbb4e5552242f9a4c5e1ffe4c6da29a968;Similar;0.910933256149292;0.7077181935310364;
24;Remove unnecessary locking in exit_oom_victim();unnecessary locking in exit_oom_victim();https://github.com/torvalds/linux/commit/da51b14adb671829077da3aeb9e9edd6f8c80afe;remove unnecessary locking in oom_enable();unnecessary locking in oom_enable();https://github.com/torvalds/linux/commit/3f5ab8cfbf15e8e02838ffc3549191351305df0e;Similar;0.9311291575431824;0.9233592748641968;
25;fix for this bug;fix;https://github.com/torvalds/linux/commit/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed;Fix this bug;"using an approach used by commit 855b018325737f76 (""oom, oom_reaper: disable oom_reaper for oom_kill_allocating_task"")";https://github.com/torvalds/linux/commit/9bcdeb51bd7d2ae9fe65ea4d60643d2aeef5bfe3;Similar;0.9740132093429564;0.2972374260425567;
26;remove task_t, convert to struct task_struct;cleanup, remove;https://github.com/torvalds/linux/commit/36c8b586896f60cb91a4fd526233190b34316baf;Remove the parameter @mem;removed since v2.6.26;https://github.com/torvalds/linux/commit/fbdd12676c83df77480f00ebd32fc98fbe3bf836;Similar;0.9023247957229614;0.575302243232727;
27;Remove the unused arguments and update all callers.;unused.;https://github.com/torvalds/linux/commit/a72afd873089c697053e9daa85ff343b3140d2e7;Remove the unused arguments and update all callers.;unused;https://github.com/torvalds/linux/commit/ae8eba8b5d723a4ca543024b6e51f4d0f4fb6b6b;Similar;0.9999998807907104;0.9890319108963012;
28;fix typo in comment;typo in comment;https://github.com/torvalds/linux/commit/bdddbcd45fd191a0213e6d2a032eb55d18bd1fc0;fix typos in comments;typos in comments;https://github.com/torvalds/linux/commit/f0953a1bbaca71e1ebbcb9864eb1b273156157ed;Similar;0.9594662189483644;0.9390376806259156;
