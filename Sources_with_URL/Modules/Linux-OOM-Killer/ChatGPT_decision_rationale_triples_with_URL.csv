level_0;index;message_preprocessed;Decision;Rationale;URL;web_url
0;0;mm: reduce noise in show_mem for lowmem allocations;reduce noise in show_mem for lowmem allocations;lowmem allocations;https://api.github.com/repos/torvalds/linux/git/commits/974f4367dd315acc15ad4a6453f8304aea60dfbd;https://github.com/torvalds/linux/commit/974f4367dd315acc15ad4a6453f8304aea60dfbd
1;3;"This is an attempt to reduce the ballast that doesn't provide any relevant
information for those allocation failures investigation";Reduce the ballast;Doesn't provide any relevant information;https://api.github.com/repos/torvalds/linux/git/commits/974f4367dd315acc15ad4a6453f8304aea60dfbd;https://github.com/torvalds/linux/commit/974f4367dd315acc15ad4a6453f8304aea60dfbd
3;8;"Munlock code is no longer a problem since [3] and there shouldn't be any
blocking operation before the memory is unmapped by exit_mmap so the oom
reaper invocation can be dropped";the oom reaper invocation can be dropped;Munlock code is no longer a problem and there shouldn't be any blocking operation before the memory is unmapped by exit_mmap;https://api.github.com/repos/torvalds/linux/git/commits/bf3980c85212fc71512d27a46f5aab66f46ca284;https://github.com/torvalds/linux/commit/bf3980c85212fc71512d27a46f5aab66f46ca284
4;10;"Remove the oom_reaper from exit_mmap which will make the code easier to
read";Remove the oom_reaper from exit_mmap;make the code easier to read;https://api.github.com/repos/torvalds/linux/git/commits/bf3980c85212fc71512d27a46f5aab66f46ca284;https://github.com/torvalds/linux/commit/bf3980c85212fc71512d27a46f5aab66f46ca284
5;11;" This is really unlikely to make any observable difference although
some microbenchmarks could benefit from one less branch that needs to be
evaluated even though it almost never is true.";This is really unlikely to make any observable difference;some microbenchmarks could benefit from one less branch that needs to be evaluated even though it almost never is true;https://api.github.com/repos/torvalds/linux/git/commits/bf3980c85212fc71512d27a46f5aab66f46ca284;https://github.com/torvalds/linux/commit/bf3980c85212fc71512d27a46f5aab66f46ca284
6;12;mm/oom_kill.c: fix vm_oom_kill_table[] ifdeffery;fix vm_oom_kill_table[];ifdeffery;https://api.github.com/repos/torvalds/linux/git/commits/a19cad0691597eb79c123b8a19a9faba5ab7d90e;https://github.com/torvalds/linux/commit/a19cad0691597eb79c123b8a19a9faba5ab7d90e
7;15;" Which removes the need for munlock_vma_pages_all()
on mlocked vmas when munmapping or exiting: eliminating the catastrophic
contention on i_mmap_rwsem, and the need for page lock on the pages";removes the need for munlock_vma_pages_all();eliminating the catastrophic contention on i_mmap_rwsem, and the need for page lock on the pages;https://api.github.com/repos/torvalds/linux/git/commits/a213e5cf71cbcea4b23caedcb8fe6629a333b275;https://github.com/torvalds/linux/commit/a213e5cf71cbcea4b23caedcb8fe6629a333b275
8;16;"There is still a need to update locked_vm accounting according to the
munmapped vmas when munmapping: do that in detach_vmas_to_be_unmapped()";update locked_vm accounting according to the munmapped vmas when munmapping;There is still a need to perform this action;https://api.github.com/repos/torvalds/linux/git/commits/a213e5cf71cbcea4b23caedcb8fe6629a333b275;https://github.com/torvalds/linux/commit/a213e5cf71cbcea4b23caedcb8fe6629a333b275
9;17;exit_mmap() does not need locked_vm updates, so delete unlock_range();delete unlock_range();exit_mmap() does not need locked_vm updates;https://api.github.com/repos/torvalds/linux/git/commits/a213e5cf71cbcea4b23caedcb8fe6629a333b275;https://github.com/torvalds/linux/commit/a213e5cf71cbcea4b23caedcb8fe6629a333b275
10;18;"And wasn't I the one who forbade the OOM reaper to attack mlocked vmas,
because of the uncertainty in blocking on all those page locks?
No fear of that now, so permit the OOM reaper on mlocked vmas.";Permit the OOM reaper on mlocked vmas;No fear of blocking on all those page locks anymore;https://api.github.com/repos/torvalds/linux/git/commits/a213e5cf71cbcea4b23caedcb8fe6629a333b275;https://github.com/torvalds/linux/commit/a213e5cf71cbcea4b23caedcb8fe6629a333b275
11;21;" The change prevents process_mrelease from calling
the last mmput, which can lead to waiting for IO completion in exit_aio.";The change prevents process_mrelease from calling;which can lead to waiting for IO completion in exit_aio.;https://api.github.com/repos/torvalds/linux/git/commits/ba535c1caf3ee78aa7719e9e4b07a0dc1d153b9e;https://github.com/torvalds/linux/commit/ba535c1caf3ee78aa7719e9e4b07a0dc1d153b9e
12;23;"Our container agent wants to know when a container exits if it was OOM
killed or not to report to the user";Our container agent wants to know when a container exits if it was OOM killed or not;to report to the user;https://api.github.com/repos/torvalds/linux/git/commits/b6bf9abb0aa44e53ffe9c1e6e1d32568f5b25e4a;https://github.com/torvalds/linux/commit/b6bf9abb0aa44e53ffe9c1e6e1d32568f5b25e4a
13;27;"This is erroneous in
   some cases where containers create their children cgroups with
   memory.oom.group=1 as such OOM kills will get counted against the
   container cgroup's oom_kill counter despite not actually OOM killing
   the entire container";OOM kills will get counted against the container cgroup's oom_kill counter despite not actually OOM killing the entire container.;some cases where containers create their children cgroups with memory.oom.group=1;https://api.github.com/repos/torvalds/linux/git/commits/b6bf9abb0aa44e53ffe9c1e6e1d32568f5b25e4a;https://github.com/torvalds/linux/commit/b6bf9abb0aa44e53ffe9c1e6e1d32568f5b25e4a
14;29;"This patch adds a new oom_group_kill event when memory.oom.group
triggers to allow userspace to cleanly identify when an entire cgroup is
oom killed.";This patch adds a new oom_group_kill event;to allow userspace to cleanly identify when an entire cgroup is oom killed.;https://api.github.com/repos/torvalds/linux/git/commits/b6bf9abb0aa44e53ffe9c1e6e1d32568f5b25e4a;https://github.com/torvalds/linux/commit/b6bf9abb0aa44e53ffe9c1e6e1d32568f5b25e4a
15;31;"In preparation for removing the flag SIGNAL_GROUP_COREDUMP, change
__task_will_free_mem to test signal->core_state instead of the flag
SIGNAL_GROUP_COREDUMP";Change __task_will_free_mem to test signal->core_state instead of the flag SIGNAL_GROUP_COREDUMP;In preparation for removing the flag SIGNAL_GROUP_COREDUMP;https://api.github.com/repos/torvalds/linux/git/commits/98b24b16b2aebffabf5b8670f44f19666c1e029f;https://github.com/torvalds/linux/commit/98b24b16b2aebffabf5b8670f44f19666c1e029f
16;38;"Fix this by adding a set_freezable() call which will clear the
PF_NOFREEZE flag and thus make the OOM reaper visible to the freezer";Adding a set_freezable() call;will clear the PF_NOFREEZE flag and thus make the OOM reaper visible to the freezer;https://api.github.com/repos/torvalds/linux/git/commits/3723929eb0f50e2101de739cdb66458a4f1f4b27;https://github.com/torvalds/linux/commit/3723929eb0f50e2101de739cdb66458a4f1f4b27
17;45;" Anyway, if the OOM killer has been already invoked there
is no reason to invoke it again from the #PF path";no reason to invoke it again from the #PF path;if the OOM killer has been already invoked;https://api.github.com/repos/torvalds/linux/git/commits/60e2793d440a3ec95abb5d6d4fc034a4b480472d;https://github.com/torvalds/linux/commit/60e2793d440a3ec95abb5d6d4fc034a4b480472d
18;48;"This all suggests that there is no legitimate reason to trigger
out_of_memory from pagefault_out_of_memory so drop it";Drop triggering out_of_memory from pagefault_out_of_memory;There is no legitimate reason ;https://api.github.com/repos/torvalds/linux/git/commits/60e2793d440a3ec95abb5d6d4fc034a4b480472d;https://github.com/torvalds/linux/commit/60e2793d440a3ec95abb5d6d4fc034a4b480472d
20;55;" This patch fixes the problem and should be backported
into stable/LTS.]";This patch fixes the problem and should be backported into stable/LTS.;Fixes the problem, should be backported into stable/LTS.;https://api.github.com/repos/torvalds/linux/git/commits/60e2793d440a3ec95abb5d6d4fc034a4b480472d;https://github.com/torvalds/linux/commit/60e2793d440a3ec95abb5d6d4fc034a4b480472d
22;60;" Fix this race
by elevating mm->mm_users and preventing exit_mmap from executing until
process_mrelease is finished";Fix this race by elevating mm->mm_users and preventing exit_mmap from executing until process_mrelease is finished;preventing exit_mmap from executing until process_mrelease is finished;https://api.github.com/repos/torvalds/linux/git/commits/337546e83fc7e50917f44846beee936abb9c9f1f;https://github.com/torvalds/linux/commit/337546e83fc7e50917f44846beee936abb9c9f1f
23;61;" Patch slightly refactors the code to
adapt for a possible mmget_not_zero failure";Patch slightly refactors the code;to adapt for a possible mmget_not_zero failure;https://api.github.com/repos/torvalds/linux/git/commits/337546e83fc7e50917f44846beee936abb9c9f1f;https://github.com/torvalds/linux/commit/337546e83fc7e50917f44846beee936abb9c9f1f
24;62;"This fix has considerable negative impact on process_mrelease
performance and will likely need later optimization.";This fix has considerable negative impact on process_mrelease performance;will likely need later optimization;https://api.github.com/repos/torvalds/linux/git/commits/337546e83fc7e50917f44846beee936abb9c9f1f;https://github.com/torvalds/linux/commit/337546e83fc7e50917f44846beee936abb9c9f1f
25;64;"Instead of duplicating the same code in two places use the newly added
pidfd_get_task() helper";use the newly added pidfd_get_task() helper;Instead of duplicating the same code in two places;https://api.github.com/repos/torvalds/linux/git/commits/ee9955d61a0a770152f9c3af470bd1689f034c74;https://github.com/torvalds/linux/commit/ee9955d61a0a770152f9c3af470bd1689f034c74
26;65;"This fixes an (unimportant for now) bug where
PIDTYPE_PID is used whereas PIDTYPE_TGID should have been used.";This fixes an unimportant bug where PIDTYPE_PID is used whereas PIDTYPE_TGID should have been used.;unimportant;https://api.github.com/repos/torvalds/linux/git/commits/ee9955d61a0a770152f9c3af470bd1689f034c74;https://github.com/torvalds/linux/commit/ee9955d61a0a770152f9c3af470bd1689f034c74
27;68;" This ensures that an accurate copy of the process can be
captured in the coredump as no cleanup for the process happens before
the coredump completes";This ensures that an accurate copy of the process can be captured in the coredump;no cleanup for the process happens before the coredump completes;https://api.github.com/repos/torvalds/linux/git/commits/92307383082daff5df884a25df9e283efb7ef261;https://github.com/torvalds/linux/commit/92307383082daff5df884a25df9e283efb7ef261
28;69;" This also ensures that PTRACE_EVENT_EXIT
will not be visited by any thread until the coredump is complete";ensures that PTRACE_EVENT_EXIT will not be visited by any thread until the coredump is complete;This also;https://api.github.com/repos/torvalds/linux/git/commits/92307383082daff5df884a25df9e283efb7ef261;https://github.com/torvalds/linux/commit/92307383082daff5df884a25df9e283efb7ef261
29;70;"Add a new flag PF_POSTCOREDUMP so that tasks that have passed through
coredump_task_exit can be recognized and ignored in zap_process";Add a new flag PF_POSTCOREDUMP;so that tasks that have passed through coredump_task_exit can be recognized and ignored in zap_process;https://api.github.com/repos/torvalds/linux/git/commits/92307383082daff5df884a25df9e283efb7ef261;https://github.com/torvalds/linux/commit/92307383082daff5df884a25df9e283efb7ef261
30;72;"Replace ""may_ptrace_stop()"" with a simple test of ""current->ptrace""";"Replace ""may_ptrace_stop()"" with a simple test of ""current->ptrace""";"a simple test of ""current->ptrace"" is more efficient and clear";https://api.github.com/repos/torvalds/linux/git/commits/92307383082daff5df884a25df9e283efb7ef261;https://github.com/torvalds/linux/commit/92307383082daff5df884a25df9e283efb7ef261
31;74;" These tests are no longer necessary as it is now
guaranteed that fatal_signal_pending will be set if the code enters
ptrace_stop during a coredump";These tests are no longer necessary;it is now guaranteed that fatal_signal_pending will be set if the code enters ptrace_stop during a coredump;https://api.github.com/repos/torvalds/linux/git/commits/92307383082daff5df884a25df9e283efb7ef261;https://github.com/torvalds/linux/commit/92307383082daff5df884a25df9e283efb7ef261
35;88;" This way the memory is freed in a
more controllable way with CPU affinity and priority of the caller";This way the memory is freed in a more controllable way with CPU affinity and priority of the caller;more controllable way with CPU affinity and priority of the caller;https://api.github.com/repos/torvalds/linux/git/commits/884a7e5964e06ed93c7771c0d7cf19c09a8946f1;https://github.com/torvalds/linux/commit/884a7e5964e06ed93c7771c0d7cf19c09a8946f1
36;91;"After previous discussions [1, 2, 3] the decision was made [4] to
introduce a dedicated system call to cover this use case";introduce a dedicated system call to cover this use case;to cover this use case;https://api.github.com/repos/torvalds/linux/git/commits/884a7e5964e06ed93c7771c0d7cf19c09a8946f1;https://github.com/torvalds/linux/commit/884a7e5964e06ed93c7771c0d7cf19c09a8946f1
39;98;" The oom proper is the only existing user so rename the
function to make that purpose explicit";Rename the function to make that purpose explicit;The oom proper is the only existing user;https://api.github.com/repos/torvalds/linux/git/commits/b26e517a058bd40c790a1d9868c896842f2e4155;https://github.com/torvalds/linux/commit/b26e517a058bd40c790a1d9868c896842f2e4155
40;99;"While at it drop the MPOL_INTERLEAVE as those allocations never has a
nodemask defined (see alloc_page_interleave) so this is a dead code and
a confusing one because MPOL_INTERLEAVE is a hint rather than a hard
requirement so it shouldn't be considered during the OOM";Drop the MPOL_INTERLEAVE;Those allocations never have a nodemask defined (see alloc_page_interleave), so this is a dead code and a confusing one because MPOL_INTERLEAVE is a hint rather than a hard requirement, so it shouldn't be considered during the OOM.;https://api.github.com/repos/torvalds/linux/git/commits/b26e517a058bd40c790a1d9868c896842f2e4155;https://github.com/torvalds/linux/commit/b26e517a058bd40c790a1d9868c896842f2e4155
41;100;"The final code can be reduced to a check for MPOL_BIND which is the
only memory policy that is a hard requirement and thus relevant to a
constrained OOM logic.";The final code can be reduced to a check for MPOL_BIND;MPOL_BIND is the only memory policy that is a hard requirement and thus relevant to a constrained OOM logic;https://api.github.com/repos/torvalds/linux/git/commits/b26e517a058bd40c790a1d9868c896842f2e4155;https://github.com/torvalds/linux/commit/b26e517a058bd40c790a1d9868c896842f2e4155
42;101;rcu: Fix typo in comment: kthead -> kthread;Fix typo in comment: kthead -> kthread;typo;https://api.github.com/repos/torvalds/linux/git/commits/4c9c3809ae2ecfcece9acb3f51427e617d21fafb;https://github.com/torvalds/linux/commit/4c9c3809ae2ecfcece9acb3f51427e617d21fafb
43;102;mm: fix typos in comments;fix typos in comments;typos in comments;https://api.github.com/repos/torvalds/linux/git/commits/f0953a1bbaca71e1ebbcb9864eb1b273156157ed;https://github.com/torvalds/linux/commit/f0953a1bbaca71e1ebbcb9864eb1b273156157ed
44;103;"Fix ~94 single-word typos in locking code comments, plus a few
very obvious grammar mistakes.";Fix ~94 single-word typos in locking code comments, plus a few very obvious grammar mistakes.;Improve code quality and readability.;https://api.github.com/repos/torvalds/linux/git/commits/f0953a1bbaca71e1ebbcb9864eb1b273156157ed;https://github.com/torvalds/linux/commit/f0953a1bbaca71e1ebbcb9864eb1b273156157ed
46;105;Various coding style tweaks to various files under mm/;Various coding style tweaks to various files under mm/;coding style tweaks;https://api.github.com/repos/torvalds/linux/git/commits/68d68ff6ebbf69d02511dd48f16b3795671c9b0b;https://github.com/torvalds/linux/commit/68d68ff6ebbf69d02511dd48f16b3795671c9b0b
47;107;"Fix stray kernel-doc warnings in mm/ due to mis-typed or missing function
names";Fix stray kernel-doc warnings in mm/;mis-typed or missing function names;https://api.github.com/repos/torvalds/linux/git/commits/845be1cd34464620861b457b808e5fb2115d06b0;https://github.com/torvalds/linux/commit/845be1cd34464620861b457b808e5fb2115d06b0
49;109;"If p is a kthread, it will be checked in oom_unkillable_task() so
we can delete the corresponding comment.";delete the corresponding comment;it will be checked in oom_unkillable_task();https://api.github.com/repos/torvalds/linux/git/commits/f8159c13905bba26f3e1782a521dacf7a66fc1ce;https://github.com/torvalds/linux/commit/f8159c13905bba26f3e1782a521dacf7a66fc1ce
50;112;Remove the unused arguments and update all callers.;Remove the unused arguments and update all callers.;unused.;https://api.github.com/repos/torvalds/linux/git/commits/a72afd873089c697053e9daa85ff343b3140d2e7;https://github.com/torvalds/linux/commit/a72afd873089c697053e9daa85ff343b3140d2e7
51;113;tlb: mmu_gather: Remove unused start/end arguments from tlb_finish_mmu();Remove unused start/end arguments from tlb_finish_mmu();unused;https://api.github.com/repos/torvalds/linux/git/commits/ae8eba8b5d723a4ca543024b6e51f4d0f4fb6b6b;https://github.com/torvalds/linux/commit/ae8eba8b5d723a4ca543024b6e51f4d0f4fb6b6b
52;115;Remove the unused arguments and update all callers.;Remove the unused arguments and update all callers.;unused;https://api.github.com/repos/torvalds/linux/git/commits/ae8eba8b5d723a4ca543024b6e51f4d0f4fb6b6b;https://github.com/torvalds/linux/commit/ae8eba8b5d723a4ca543024b6e51f4d0f4fb6b6b
53;119;" We'd better show some
helpful information to indicate why this happens.";Show some helpful information;to indicate why this happens;https://api.github.com/repos/torvalds/linux/git/commits/619b5b469bcab84ea3bee1d8d04451c781d23feb;https://github.com/torvalds/linux/commit/619b5b469bcab84ea3bee1d8d04451c781d23feb
54;120;mm, oom: make the calculation of oom badness more accurate;make the calculation of oom badness more accurate;more accurate;https://api.github.com/repos/torvalds/linux/git/commits/9066e5cfb73cdbcdbb49e87999482ab615e9fc76;https://github.com/torvalds/linux/commit/9066e5cfb73cdbcdbb49e87999482ab615e9fc76
55;129;"To fix this issue, we should make the calculation of oom point more
accurate";To fix this issue;make the calculation of oom point more accurate;https://api.github.com/repos/torvalds/linux/git/commits/9066e5cfb73cdbcdbb49e87999482ab615e9fc76;https://github.com/torvalds/linux/commit/9066e5cfb73cdbcdbb49e87999482ab615e9fc76
57;133;Also give the functions a kthread_ prefix to better document the use case.;give the functions a kthread_ prefix;to better document the use case;https://api.github.com/repos/torvalds/linux/git/commits/f5678e7f2ac31c270334b936352f0ef2fe7dd2b3;https://github.com/torvalds/linux/commit/f5678e7f2ac31c270334b936352f0ef2fe7dd2b3
61;143;" So, integrate
them and add some comment to struct alloc_context in order to reduce
future confusion about the meaning of this variable";integrate them and add some comment to struct alloc_context;reduce future confusion about the meaning of this variable;https://api.github.com/repos/torvalds/linux/git/commits/97a225e69a1f880886f33d2e65a7ace13f152caa;https://github.com/torvalds/linux/commit/97a225e69a1f880886f33d2e65a7ace13f152caa
62;144;"The accessor, ac_classzone_idx() is also removed since it isn't needed
after integration";The accessor, ac_classzone_idx() is also removed;it isn't needed after integration;https://api.github.com/repos/torvalds/linux/git/commits/97a225e69a1f880886f33d2e65a7ace13f152caa;https://github.com/torvalds/linux/commit/97a225e69a1f880886f33d2e65a7ace13f152caa
63;145;"In addition to integration, this patch also renames high_zoneidx to
highest_zoneidx since it represents more precise meaning.";Renames high_zoneidx to highest_zoneidx;Represents more precise meaning;https://api.github.com/repos/torvalds/linux/git/commits/97a225e69a1f880886f33d2e65a7ace13f152caa;https://github.com/torvalds/linux/commit/97a225e69a1f880886f33d2e65a7ace13f152caa
64;146;mm, oom: dump stack of victim when reaping failed;dump stack of victim when reaping failed;reaping failed;https://api.github.com/repos/torvalds/linux/git/commits/8a7ff02acabbd877669fecb0a2e75d0930b62c85;https://github.com/torvalds/linux/commit/8a7ff02acabbd877669fecb0a2e75d0930b62c85
65;149;" If the stack trace is dumped, we have the ability to find
related occurrences in the same kernel code and hopefully solve the
issue that is making it wedged";Dump the stack trace;Find related occurrences in the same kernel code and hopefully solve the issue that is making it wedged;https://api.github.com/repos/torvalds/linux/git/commits/8a7ff02acabbd877669fecb0a2e75d0930b62c85;https://github.com/torvalds/linux/commit/8a7ff02acabbd877669fecb0a2e75d0930b62c85
66;151;mm/oom: fix pgtables units mismatch in Killed process message;fix pgtables units mismatch in Killed process message;pgtables units mismatch in Killed process message;https://api.github.com/repos/torvalds/linux/git/commits/941f762bcb276259a78e7931674668874ccbda59;https://github.com/torvalds/linux/commit/941f762bcb276259a78e7931674668874ccbda59
67;153;"As everything else is printed in kB, I chose to fix the value rather than
the string";fix the value rather than the string;everything else is printed in kB;https://api.github.com/repos/torvalds/linux/git/commits/941f762bcb276259a78e7931674668874ccbda59;https://github.com/torvalds/linux/commit/941f762bcb276259a78e7931674668874ccbda59
72;170;To achieve the goal, the patchset introduce two new options for madvise;Introduce two new options for madvise;To achieve the goal;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
75;173;" MADV_PAGEOUT is similar to
MADV_DONTNEED in a way that it hints the kernel that memory region is not
currently needed and should be reclaimed immediately; MADV_COLD is similar
to MADV_FREE in a way that it hints the kernel that memory region is not
currently needed and should be reclaimed when memory pressure rises";"
MADV_PAGEOUT is similar to MADV_DONTNEED 
MADV_COLD is similar to MADV_FREE 
";"
it hints the kernel that memory region is not currently needed and should be reclaimed immediately 
it hints the kernel that memory region is not currently needed and should be reclaimed when memory pressure rises";https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
76;177;"MADV_COLD can be used by a process to mark a memory range as not expected
to be used in the near future";MADV_COLD can be used by a process to mark a memory range as not expected to be used in the near future;not expected to be used in the near future;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
77;178;" The hint can help kernel in deciding which
pages to evict early during memory pressure";deciding which pages to evict early during memory pressure;The hint can help kernel in early eviction during memory pressure;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
79;180;"IOW, It moves
	active file page -> inactive file LRU
	active anon page -> inacdtive anon LRU
Unlike MADV_FREE, it doesn't move active anonymous pages to inactive file
LRU's head because MADV_COLD is a little bit different symantic";It moves active file page -> inactive file LRU, active anon page -> inactive anon LRU;MADV_FREE doesn't move active anonymous pages to inactive file LRU's head, because MADV_COLD is a little bit different semantic.;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
80;181;"MADV_FREE means it's okay to discard when the memory pressure because the
content of the page is *garbage* so freeing such pages is almost zero
overhead since we don't need to swap out and access afterward causes just
minor fault";MADV_FREE means it's okay to discard when the memory pressure because the content of the page is garbage so freeing such pages is almost zero overhead;we don't need to swap out and access afterward causes just minor fault;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
81;182;" Thus, it would make sense to put those freeable pages in
inactive file LRU to compete other used-once pages";put those freeable pages in inactive file LRU;it would make sense to;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
83;184;" Even, it could give a bonus to make
them be reclaimed on swapless system";give a bonus to make them be reclaimed on swapless system;could;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
84;185;" However, MADV_COLD doesn't mean
garbage so reclaiming them requires swap-out/in in the end so it's bigger
cost";reclaiming them requires swap-out/in in the end;it's bigger cost;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
85;186;" Since we have designed VM LRU aging based on cost-model, anonymous
cold pages would be better to position inactive anon's LRU list, not file
LRU";better to position inactive anon's LRU list;based on cost-model, anonymous cold pages would be better;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
86;187;" Furthermore, it would help to avoid unnecessary scanning if system
doesn't have a swap device";avoid unnecessary scanning;help to avoid unnecessary scanning if system doesn't have a swap device;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
87;188;" Let's start simpler way without adding
complexity at this moment";Let's start simpler way without adding complexity at this moment;without adding complexity at this moment;https://api.github.com/repos/torvalds/linux/git/commits/9c276cc65a58faf98be8e56962745ec99ab87636;https://github.com/torvalds/linux/commit/9c276cc65a58faf98be8e56962745ec99ab87636
89;198;"For an OOM event: print oom_score_adj value for the OOM Killed process to
document what the oom score adjust value was at the time the process was
OOM Killed";Print oom_score_adj value for the OOM Killed process to document what the oom score adjust value was at the time the process was OOM Killed ;To document what the oom score adjust value was at the time the process was OOM Killed;https://api.github.com/repos/torvalds/linux/git/commits/70cb6d2677905121bfc7fdf5babfd8444218edd9;https://github.com/torvalds/linux/commit/70cb6d2677905121bfc7fdf5babfd8444218edd9
90;200;"When eligible tasks are not printed (sysctl oom_dump_tasks = 0) printing
this value is the only documentation of the value for the process being
killed";printing this value;the only documentation of the value for the process being killed;https://api.github.com/repos/torvalds/linux/git/commits/70cb6d2677905121bfc7fdf5babfd8444218edd9;https://github.com/torvalds/linux/commit/70cb6d2677905121bfc7fdf5babfd8444218edd9
92;207;"The addition of the pgtables_bytes shows page table usage by the process
and is a useful measure of the memory size of the process.";The addition of the pgtables_bytes ;is a useful measure of the memory size of the process.;https://api.github.com/repos/torvalds/linux/git/commits/70cb6d2677905121bfc7fdf5babfd8444218edd9;https://github.com/torvalds/linux/commit/70cb6d2677905121bfc7fdf5babfd8444218edd9
95;220;" Users, especially system administrators, will find
it useful to immediately see the UID of the process";Users, especially system administrators, will find it useful to immediately see the UID of the process;it useful to immediately see the UID of the process;https://api.github.com/repos/torvalds/linux/git/commits/8ac3f8fe91a2119522a73fbc41d354057054e6ed;https://github.com/torvalds/linux/commit/8ac3f8fe91a2119522a73fbc41d354057054e6ed
96;224;mm/oom_kill.c: remove redundant OOM score normalization in select_bad_process();remove redundant OOM score normalization in select_bad_process();redundant OOM score normalization;https://api.github.com/repos/torvalds/linux/git/commits/2c207985f354dfb549e5a543102a3e084eea81f6;https://github.com/torvalds/linux/commit/2c207985f354dfb549e5a543102a3e084eea81f6
98;234;mm, oom: remove redundant task_in_mem_cgroup() check;remove redundant task_in_mem_cgroup() check;redundant;https://api.github.com/repos/torvalds/linux/git/commits/6ba749ee78ef42ffdf4b95c042fc574a37d229d9;https://github.com/torvalds/linux/commit/6ba749ee78ef42ffdf4b95c042fc574a37d229d9
99;242;"Since commit c03cd7738a83 (""cgroup: Include dying leaders with live
threads in PROCS iterations"") corrected how CSS_TASK_ITER_PROCS works,
mem_cgroup_scan_tasks() can use CSS_TASK_ITER_PROCS in order to check
only one thread from each thread group.";mem_cgroup_scan_tasks() can use CSS_TASK_ITER_PROCS in order to check only one thread from each thread group;"Since commit c03cd7738a83 (""cgroup: Include dying leaders with live threads in PROCS iterations"") corrected how CSS_TASK_ITER_PROCS works";https://api.github.com/repos/torvalds/linux/git/commits/f168a9a54ec39b3f832c353733898b713b6b5c1f;https://github.com/torvalds/linux/commit/f168a9a54ec39b3f832c353733898b713b6b5c1f
100;243;mm/oom_kill.c: fix uninitialized oc->constraint;fix uninitialized oc->constraint;uninitialized;https://api.github.com/repos/torvalds/linux/git/commits/432b1de0de02a83f64695e69a2d83cbee10c236f;https://github.com/torvalds/linux/commit/432b1de0de02a83f64695e69a2d83cbee10c236f
101;246; We should inititialize it before;initialize it before;should;https://api.github.com/repos/torvalds/linux/git/commits/432b1de0de02a83f64695e69a2d83cbee10c236f;https://github.com/torvalds/linux/commit/432b1de0de02a83f64695e69a2d83cbee10c236f
102;248;treewide: Add SPDX license identifier for missed files;Add SPDX license identifier for missed files;SPDX license identifier for missed files;https://api.github.com/repos/torvalds/linux/git/commits/457c89965399115e5cd8bf38f9c597293405703d;https://github.com/torvalds/linux/commit/457c89965399115e5cd8bf38f9c597293405703d
103;250;" - Have no license information of any form
 - Have EXPORT_.*_SYMBOL_GPL inside which was used in the
   initial scan/conversion to ignore the file
These files fall under the project license, GPL v2 only";Have no license information of any form;GPL v2 only;https://api.github.com/repos/torvalds/linux/git/commits/457c89965399115e5cd8bf38f9c597293405703d;https://github.com/torvalds/linux/commit/457c89965399115e5cd8bf38f9c597293405703d
104;256;"This patchset do the initial mechanical convertion of all the places that
calls mmu_notifier_range_init to also provide the default MMU_NOTIFY_UNMAP
event as well as the vma if it is know (most invalidation happens against
a given vma)";"do the initial mechanical conversion of all the places that call mmu_notifier_range_init to also provide the default MMU_NOTIFY_UNMAP event as well as the vma
";most invalidation happens against a given vma;https://api.github.com/repos/torvalds/linux/git/commits/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131;https://github.com/torvalds/linux/commit/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131
105;257;" Passing down the vma allows the users of mmu notifier to
inspect the new vma page protection";Passing down the vma;allows the users of mmu notifier to inspect the new vma page protection;https://api.github.com/repos/torvalds/linux/git/commits/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131;https://github.com/torvalds/linux/commit/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131
106;258;"The MMU_NOTIFY_UNMAP is always the safe default as users of mmu notifier
should assume that every for the range is going away when that event
happens";The MMU_NOTIFY_UNMAP is always the safe default;users of mmu notifier should assume that every for the range is going away when that event happens;https://api.github.com/repos/torvalds/linux/git/commits/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131;https://github.com/torvalds/linux/commit/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131
107;260;"This is done as 2 patches so that no call site is forgotten especialy
as it uses this following coccinelle patch";This is done as 2 patches;so that no call site is forgotten especialy as it uses this following coccinelle patch;https://api.github.com/repos/torvalds/linux/git/commits/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131;https://github.com/torvalds/linux/commit/6f4f13e8d9e27cefd2cd88dd4fd80aa6d68b9131
108;262;"Since setting global init process to some memory cgroup is technically
possible, oom_kill_memcg_member() must check it";Check if setting global init process to some memory cgroup is technically possible;Possible;https://api.github.com/repos/torvalds/linux/git/commits/d342a0b38674867ea67fde47b0e1e60ffe9f17a2;https://github.com/torvalds/linux/commit/d342a0b38674867ea67fde47b0e1e60ffe9f17a2
109;276;mm, oom: fix use-after-free in oom_kill_process;fix use-after-free in oom_kill_process;use-after-free;https://api.github.com/repos/torvalds/linux/git/commits/cefc7ef3c87d02fc9307835868ff721ea12cc597;https://github.com/torvalds/linux/commit/cefc7ef3c87d02fc9307835868ff721ea12cc597
110;280;" The easiest fix is to do
get/put across the for_each_thread() on the selected task";Get/put across the for_each_thread() on the selected task;The easiest fix is;https://api.github.com/repos/torvalds/linux/git/commits/cefc7ef3c87d02fc9307835868ff721ea12cc597;https://github.com/torvalds/linux/commit/cefc7ef3c87d02fc9307835868ff721ea12cc597
112;289;"Fix this bug using an approach used by commit 855b018325737f76 (""oom,
oom_reaper: disable oom_reaper for oom_kill_allocating_task"")";Fix this bug;"using an approach used by commit 855b018325737f76 (""oom, oom_reaper: disable oom_reaper for oom_kill_allocating_task"")";https://api.github.com/repos/torvalds/linux/git/commits/9bcdeb51bd7d2ae9fe65ea4d60643d2aeef5bfe3;https://github.com/torvalds/linux/commit/9bcdeb51bd7d2ae9fe65ea4d60643d2aeef5bfe3
114;294;" Now that we have a single line for the oom
context, we can trivially add both the oom memcg (this can be either
global_oom or a specific memcg which hits its hard limits) and task_memcg
which is the victim's memcg";We can trivially add both the oom memcg and task_memcg.;Now that we have a single line for the oom context.;https://api.github.com/repos/torvalds/linux/git/commits/f0c867d9588d9efc10d6a55009c9560336673369;https://github.com/torvalds/linux/commit/f0c867d9588d9efc10d6a55009c9560336673369
116;305;"oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=/,mems_allowed=0-1,task=panic,pid=10737,uid=0
An admin can easily get the full oom context at a single line which
makes parsing much easier.";An admin can easily get the full oom context at a single line;makes parsing much easier;https://api.github.com/repos/torvalds/linux/git/commits/ef8444ea01d7442652f8e1b8a8b94278cb57eafd;https://github.com/torvalds/linux/commit/ef8444ea01d7442652f8e1b8a8b94278cb57eafd
117;306;mm, oom: fix missing tlb_finish_mmu() in __oom_reap_task_mm().;fix missing tlb_finish_mmu() in __oom_reap_task_mm();missing tlb_finish_mmu() in __oom_reap_task_mm();https://api.github.com/repos/torvalds/linux/git/commits/79cc81057eef7ad846588976296ab0f266c1a7a5;https://github.com/torvalds/linux/commit/79cc81057eef7ad846588976296ab0f266c1a7a5
118;310;" This alone is not harmful and it
seems there shouldn't be any such callers for oom victims at all but
there is no real reason to skip tlb_finish_mmu on early skip either so
call it.";call tlb_finish_mmu;there is no real reason to skip tlb_finish_mmu on early skip either;https://api.github.com/repos/torvalds/linux/git/commits/79cc81057eef7ad846588976296ab0f266c1a7a5;https://github.com/torvalds/linux/commit/79cc81057eef7ad846588976296ab0f266c1a7a5
123;319;"This commit splits oom_kill_process() with an intention to re-use the the
second half: __oom_kill_process()";Split oom_kill_process();With an intention to re-use the second half;https://api.github.com/repos/torvalds/linux/git/commits/5989ad7b5ede38d605c588981f634c08252abfc3;https://github.com/torvalds/linux/commit/5989ad7b5ede38d605c588981f634c08252abfc3
124;321;" We don't need to print the debug information for the each
task, as well as play with task selection (considering task's children),
so we can't use the existing oom_kill_process().";We don't need to print the debug information for the each task, as well as play with task selection (considering task's children), so we can't use the existing oom_kill_process();Not mentioned in the sentence;https://api.github.com/repos/torvalds/linux/git/commits/5989ad7b5ede38d605c588981f634c08252abfc3;https://github.com/torvalds/linux/commit/5989ad7b5ede38d605c588981f634c08252abfc3
126;327;" - Increases mmap_sem hold time a little by moving
   trace_finish_task_reaping() inside the locked region";Move trace_finish_task_reaping() inside the locked region;Increases mmap_sem hold time a little;https://api.github.com/repos/torvalds/linux/git/commits/431f42fdfdb36f06f43c711fc59be9b814d8fb22;https://github.com/torvalds/linux/commit/431f42fdfdb36f06f43c711fc59be9b814d8fb22
127;329;"Add a short explanation for the return value and fix the rest by
reorganizing the function a bit to have unified function exit paths.";Add a short explanation for the return value and fix the rest by reorganizing the function a bit to have unified function exit paths.;to have unified function exit paths;https://api.github.com/repos/torvalds/linux/git/commits/431f42fdfdb36f06f43c711fc59be9b814d8fb22;https://github.com/torvalds/linux/commit/431f42fdfdb36f06f43c711fc59be9b814d8fb22
129;332;" Add a small printk prior to the
task dump informing that the memory units are actually memory _pages_";Add a small printk prior to the task dump informing;that the memory units are actually memory _pages_;https://api.github.com/repos/torvalds/linux/git/commits/c3b78b11efbb2865433abf9d22c004ffe4a73f5c;https://github.com/torvalds/linux/commit/c3b78b11efbb2865433abf9d22c004ffe4a73f5c
130;333;Also extends PID field to align on up to 7 characters;extends PID field;align on up to 7 characters;https://api.github.com/repos/torvalds/linux/git/commits/c3b78b11efbb2865433abf9d22c004ffe4a73f5c;https://github.com/torvalds/linux/commit/c3b78b11efbb2865433abf9d22c004ffe4a73f5c
131;341;" Although this is possible in principle
let's wait for it to actually happen in real life before we make the
locking more complex again";let's wait for it to actually happen in real life before we make the locking more complex again;Although this is possible in principle;https://api.github.com/repos/torvalds/linux/git/commits/af5679fbc669f31f7ebd0d473bca76c24c07de30;https://github.com/torvalds/linux/commit/af5679fbc669f31f7ebd0d473bca76c24c07de30
134;356;"I think we can improve that even further because there is a common pattern
to do a range lookup first and then do something about that";improve that even further;there is a common pattern to do a range lookup first and then do something about that;https://api.github.com/repos/torvalds/linux/git/commits/93065ac753e4443840a057bfef4be71ec766fde9;https://github.com/torvalds/linux/commit/93065ac753e4443840a057bfef4be71ec766fde9
135;357;" The first
part can be done without a sleeping lock in most cases AFAICS";The first part can be done without a sleeping lock in most cases;AFAICS (As far as I can see);https://api.github.com/repos/torvalds/linux/git/commits/93065ac753e4443840a057bfef4be71ec766fde9;https://github.com/torvalds/linux/commit/93065ac753e4443840a057bfef4be71ec766fde9
137;365;Add comments describing oom_lock's scope.;Add comments describing oom_lock's scope;describing oom_lock's scope;https://api.github.com/repos/torvalds/linux/git/commits/a195d3f5b74f3f45a6742f9063b5e95a2522b46d;https://github.com/torvalds/linux/commit/a195d3f5b74f3f45a6742f9063b5e95a2522b46d
138;373;This should be solved in a more reasonable way (e.g;solve in a more reasonable way;more reasonable way;https://api.github.com/repos/torvalds/linux/git/commits/9bfe5ded054b8e28a94c78580f233d6879a00146;https://github.com/torvalds/linux/commit/9bfe5ded054b8e28a94c78580f233d6879a00146
140;375; This is a quick fixup to remove a stale code.;remove a stale code;quick fixup;https://api.github.com/repos/torvalds/linux/git/commits/9bfe5ded054b8e28a94c78580f233d6879a00146;https://github.com/torvalds/linux/commit/9bfe5ded054b8e28a94c78580f233d6879a00146
141;379;"  page_counter_limit() -> page_counter_set_max()
  mem_cgroup_get_limit() -> mem_cgroup_get_max()
  mem_cgroup_resize_limit() -> mem_cgroup_resize_max()
  memcg_update_kmem_limit() -> memcg_update_kmem_max()
  memcg_update_tcp_limit() -> memcg_update_tcp_max()
The idea behind this renaming is to have the direct matching
between memory cgroup knobs (low, high, max) and page_counters API";Rename page_counter_limit() to page_counter_set_max();The idea behind this renaming is to have the direct matching between memory cgroup knobs (low, high, max) and page_counters API;https://api.github.com/repos/torvalds/linux/git/commits/bbec2e15170aae3e084d7d9afc730aeebe01b654;https://github.com/torvalds/linux/commit/bbec2e15170aae3e084d7d9afc730aeebe01b654
142;380;This is pure renaming, this patch doesn't bring any functional change.;renaming;doesn't bring any functional change;https://api.github.com/repos/torvalds/linux/git/commits/bbec2e15170aae3e084d7d9afc730aeebe01b654;https://github.com/torvalds/linux/commit/bbec2e15170aae3e084d7d9afc730aeebe01b654
145;388;" The oom reaper can not
run on the mm anymore so the munlock is safe to do in exit_mmap()";The oom reaper cannot run on the mm anymore;the munlock is safe to do in exit_mmap();https://api.github.com/repos/torvalds/linux/git/commits/27ae357fa82be5ab73b2ef8d39dcb8ca2563483a;https://github.com/torvalds/linux/commit/27ae357fa82be5ab73b2ef8d39dcb8ca2563483a
146;389;" It
also matches the logic that the oom reaper currently uses for
determining when to set MMF_OOM_SKIP itself, so there's no new risk of
excessive oom killing";There is no clear decision in this sentence.;There is no clear rationale in this sentence.;https://api.github.com/repos/torvalds/linux/git/commits/27ae357fa82be5ab73b2ef8d39dcb8ca2563483a;https://github.com/torvalds/linux/commit/27ae357fa82be5ab73b2ef8d39dcb8ca2563483a
147;395;Remove the CAP_SYS_ADMIN bias so that all processes are treated equally;Remove the CAP_SYS_ADMIN bias;so that all processes are treated equally;https://api.github.com/repos/torvalds/linux/git/commits/d46078b2888947a86b6bb997cd5927e602e8fdc9;https://github.com/torvalds/linux/commit/d46078b2888947a86b6bb997cd5927e602e8fdc9
148;396;"If any CAP_SYS_ADMIN process would like to be biased against, it is
always allowed to adjust /proc/pid/oom_score_adj.";It is always allowed to adjust /proc/pid/oom_score_adj;If any CAP_SYS_ADMIN process would like to be biased against;https://api.github.com/repos/torvalds/linux/git/commits/d46078b2888947a86b6bb997cd5927e602e8fdc9;https://github.com/torvalds/linux/commit/d46078b2888947a86b6bb997cd5927e602e8fdc9
152;406;"The race would look like this
  oom_reaper		oom_victim		task
						mmget_not_zero
			do_exit
			  mmput
  __oom_reap_task_mm				mmput
  						  __mmput
						    exit_mmap
						      remove_vma
    unmap_page_range
Fix this issue by providing a new mm_is_oom_victim() helper which
operates on the mm struct rather than a task";Fix this issue by providing a new mm_is_oom_victim() helper;operates on the mm struct rather than a task;https://api.github.com/repos/torvalds/linux/git/commits/4837fe37adff1d159904f0c013471b1ecbcb455e;https://github.com/torvalds/linux/commit/4837fe37adff1d159904f0c013471b1ecbcb455e
153;407;" Any context which
operates on a remote mm struct should use this helper in place of
tsk_is_oom_victim";use this helper in place of tsk_is_oom_victim;Any context which operates on a remote mm struct should use this helper;https://api.github.com/repos/torvalds/linux/git/commits/4837fe37adff1d159904f0c013471b1ecbcb455e;https://github.com/torvalds/linux/commit/4837fe37adff1d159904f0c013471b1ecbcb455e
154;408;" The flag is set in mark_oom_victim and never cleared
so it is stable in the exit_mmap path";The flag is set in mark_oom_victim and never cleared;so it is stable in the exit_mmap path;https://api.github.com/repos/torvalds/linux/git/commits/4837fe37adff1d159904f0c013471b1ecbcb455e;https://github.com/torvalds/linux/commit/4837fe37adff1d159904f0c013471b1ecbcb455e
155;409;mm, oom_reaper: gather each vma to prevent leaking TLB entry;gather each vma to prevent leaking TLB entry;prevent leaking TLB entry;https://api.github.com/repos/torvalds/linux/git/commits/687cb0884a714ff484d038e9190edc874edcf146;https://github.com/torvalds/linux/commit/687cb0884a714ff484d038e9190edc874edcf146
156;425;" The behavior of oom reaper become similar
to munmapping before do_exit, which should be safe for all archs.";The behavior of oom reaper become similar to munmapping before do_exit;should be safe for all archs;https://api.github.com/repos/torvalds/linux/git/commits/687cb0884a714ff484d038e9190edc874edcf146;https://github.com/torvalds/linux/commit/687cb0884a714ff484d038e9190edc874edcf146
158;429;" printk
already handles NULL pointers properly so all we need is to teach
nodemask_pr_args to handle NULL nodemask carefully";Teach nodemask_pr_args to handle NULL nodemask carefully;printk already handles NULL pointers properly;https://api.github.com/repos/torvalds/linux/git/commits/0205f75571e3a70c35f0dd5e608773cce97d9dbb;https://github.com/torvalds/linux/commit/0205f75571e3a70c35f0dd5e608773cce97d9dbb
159;430;" This allows
simplification of both alloc_warn() and dump_header() and gets rid of
pr_cont altogether";Simplification of both alloc_warn() and dump_header() and getting rid of pr_cont altogether;Allows simplification;https://api.github.com/repos/torvalds/linux/git/commits/0205f75571e3a70c35f0dd5e608773cce97d9dbb;https://github.com/torvalds/linux/commit/0205f75571e3a70c35f0dd5e608773cce97d9dbb
160;432;mm,oom_reaper: remove pointless kthread_run() error check;remove pointless kthread_run() error check;pointless;https://api.github.com/repos/torvalds/linux/git/commits/c50842c8e1cddcdb69d3ece4f4df005a0e6c5ceb;https://github.com/torvalds/linux/commit/c50842c8e1cddcdb69d3ece4f4df005a0e6c5ceb
161;433;"Since oom_init() is called before userspace processes start, memory
allocation failure for creating the OOM reaper kernel thread will let
the OOM killer call panic() rather than wake up the OOM reaper.";"
Call panic() instead of waking up the OOM reaper
";"
Memory allocation failure for creating the OOM reaper kernel thread";https://api.github.com/repos/torvalds/linux/git/commits/c50842c8e1cddcdb69d3ece4f4df005a0e6c5ceb;https://github.com/torvalds/linux/commit/c50842c8e1cddcdb69d3ece4f4df005a0e6c5ceb
167;447;"Let's add wrappers for ->nr_ptes with the same interface as for nr_pmd
and nr_pud";add wrappers for ->nr_ptes with the same interface as for nr_pmd and nr_pud;same interface as for nr_pmd and nr_pud;https://api.github.com/repos/torvalds/linux/git/commits/c4812909f5d5a9b7f1c85a2d95be388a066cda52;https://github.com/torvalds/linux/commit/c4812909f5d5a9b7f1c85a2d95be388a066cda52
170;467;" In order to not fail too early make the
mm_has_notifiers check under the oom_lock and have a little nap before
failing to give the current oom victim some more time to exit.";make the mm_has_notifiers check under the oom_lock and have a little nap before failing to give the current oom victim some more time to exit.;to not fail too early;https://api.github.com/repos/torvalds/linux/git/commits/4d4bbd8526a8fbeb2c090ea360211fceff952383;https://github.com/torvalds/linux/commit/4d4bbd8526a8fbeb2c090ea360211fceff952383
173;474;"If the oom_reap_task() may be running concurrently during exit_mmap,
exit_mmap will wait it to finish in down_write (before taking down mm
structures that would make the oom_reap_task fail with use after free)";exit_mmap will wait for oom_reap_task() to finish in down_write;before taking down mm structures that would make the oom_reap_task fail with use after free;https://api.github.com/repos/torvalds/linux/git/commits/212925802454672e6cd2949a727f5e2c1377bf06;https://github.com/torvalds/linux/commit/212925802454672e6cd2949a727f5e2c1377bf06
174;482;" We have tried to reduce this risk by giving
TIF_MEMDIE only to the main thread and the currently allocating task but
that doesn't really solve this problem while it surely opens up a room
for corner cases - e.g";Giving TIF_MEMDIE only to the main thread and the currently allocating task;To reduce the risk ;https://api.github.com/repos/torvalds/linux/git/commits/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90;https://github.com/torvalds/linux/commit/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90
176;485;" We still want some access to reserves because we do not
want other consumers to eat up the victim's freed memory";"We still want some access to reserves
";we do not want other consumers to eat up the victim's freed memory;https://api.github.com/repos/torvalds/linux/git/commits/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90;https://github.com/torvalds/linux/commit/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90
179;489;" Also drop any usage
of TIF_MEMDIE from the page allocator proper and replace it by
tsk_is_oom_victim as well which will make page_alloc.c completely
TIF_MEMDIE free finally";Drop any usage of TIF_MEMDIE from the page allocator proper and replace it by tsk_is_oom_victim as well;Make page_alloc.c completely TIF_MEMDIE free finally;https://api.github.com/repos/torvalds/linux/git/commits/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90;https://github.com/torvalds/linux/commit/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90
180;490;"CONFIG_MMU=n doesn't have oom reaper so let's stick to the original
ALLOC_NO_WATERMARKS approach";CONFIG_MMU=n doesn't have oom reaper so let's stick to the original ALLOC_NO_WATERMARKS approach;CONFIG_MMU=n doesn't have oom reaper;https://api.github.com/repos/torvalds/linux/git/commits/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90;https://github.com/torvalds/linux/commit/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90
181;492;" This change will allow such a usecase
without worrying about complete memory reserves depletion.";This change ;will allow such a usecase without worrying about complete memory reserves depletion.;https://api.github.com/repos/torvalds/linux/git/commits/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90;https://github.com/torvalds/linux/commit/cd04ae1e2dc8e3651b8c427ec1b9500c6eed7b90
183;495;"So, I assume, that adding some tracepoints might help with debugging of
similar issues";adding some tracepoints ;might help with debugging of similar issues;https://api.github.com/repos/torvalds/linux/git/commits/422580c3cea7faaca67f6199375b79565d3d8ebd;https://github.com/torvalds/linux/commit/422580c3cea7faaca67f6199375b79565d3d8ebd
184;498;"How it works in practice? Below is an example which show how the problem
mentioned above can be found: one process is added twice to the
oom_reaper list";problem mentioned above can be found;How it works in practice;https://api.github.com/repos/torvalds/linux/git/commits/422580c3cea7faaca67f6199375b79565d3d8ebd;https://github.com/torvalds/linux/commit/422580c3cea7faaca67f6199375b79565d3d8ebd
187;508;" In
order to help distinguish first case from the second add printk to both
oom_killer_{enable,disable}";Add printk to both oom_killer_{enable,disable};Help distinguish first case from the second;https://api.github.com/repos/torvalds/linux/git/commits/d75da004c708c9fca7b53f7da293a295522414d9;https://github.com/torvalds/linux/commit/d75da004c708c9fca7b53f7da293a295522414d9
188;511;sched/headers: Prepare for new header dependencies before moving code to <linux/sched/coredump.h>;Prepare for new header dependencies before moving code to <linux/sched/coredump.h>;Prepare for new header dependencies;https://api.github.com/repos/torvalds/linux/git/commits/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92;https://github.com/torvalds/linux/commit/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92
189;513;"Create a trivial placeholder <linux/sched/coredump.h> file that just
maps to <linux/sched.h> to make this patch obviously correct and
bisectable";Create a trivial placeholder <linux/sched/coredump.h> file that just maps to <linux/sched.h>;to make this patch obviously correct and bisectable;https://api.github.com/repos/torvalds/linux/git/commits/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92;https://github.com/torvalds/linux/commit/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92
190;514;Include the new header in the files that are going to need it.;Include the new header in the files that are going to need it;files that are going to need it;https://api.github.com/repos/torvalds/linux/git/commits/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92;https://github.com/torvalds/linux/commit/f7ccbae45c5e2c1077654b0e857e7efb1aa31c92
191;515;sched/headers: Prepare for new header dependencies before moving code to <linux/sched/mm.h>;Prepare for new header dependencies before moving code to <linux/sched/mm.h>;Prepare for new header dependencies;https://api.github.com/repos/torvalds/linux/git/commits/6e84f31522f931027bf695752087ece278c10d3f;https://github.com/torvalds/linux/commit/6e84f31522f931027bf695752087ece278c10d3f
192;517;"Create a trivial placeholder <linux/sched/mm.h> file that just
maps to <linux/sched.h> to make this patch obviously correct and
bisectable";Create a trivial placeholder <linux/sched/mm.h> file;to make this patch obviously correct and bisectable;https://api.github.com/repos/torvalds/linux/git/commits/6e84f31522f931027bf695752087ece278c10d3f;https://github.com/torvalds/linux/commit/6e84f31522f931027bf695752087ece278c10d3f
193;519;"   mm_alloc()
   __mmdrop()
   mmdrop()
   mmdrop_async_fn()
   mmdrop_async()
   mmget_not_zero()
   mmput()
   mmput_async()
   get_task_mm()
   mm_access()
   mm_release()
Include the new header in the files that are going to need it.";Include the new header in the files that are going to need it;that are going to need it;https://api.github.com/repos/torvalds/linux/git/commits/6e84f31522f931027bf695752087ece278c10d3f;https://github.com/torvalds/linux/commit/6e84f31522f931027bf695752087ece278c10d3f
194;528;oom-reaper: use madvise_dontneed() logic to decide if unmap the VMA;use madvise_dontneed() logic to decide if unmap the VMA;to decide if unmap the VMA;https://api.github.com/repos/torvalds/linux/git/commits/235190738aba7c5c94300c8d882842a535280e5a;https://github.com/torvalds/linux/commit/235190738aba7c5c94300c8d882842a535280e5a
196;533;"detail == NULL would give the same functionality as
.check_swap_entries==true.";detail == NULL would give the same functionality as .check_swap_entries==true;give the same functionality as .check_swap_entries==true;https://api.github.com/repos/torvalds/linux/git/commits/3e8715fdc03e8df4d26d8e436166e44e3e416d3b;https://github.com/torvalds/linux/commit/3e8715fdc03e8df4d26d8e436166e44e3e416d3b
199;550;"This patch simply removes the __GFP_NOFAIL special case in order to have a
more clear semantic without surprising side effects.";removes the __GFP_NOFAIL special case;more clear semantic without surprising side effects;https://api.github.com/repos/torvalds/linux/git/commits/06ad276ac18742c6b281698d41b27a290cd42407;https://github.com/torvalds/linux/commit/06ad276ac18742c6b281698d41b27a290cd42407
200;556;"Get rid of this hardcoded behavior and push the allocation mask down the
show_mem path and use it instead of cpuset_current_mems_allowed";Get rid of this hardcoded behavior;push the allocation mask down the show_mem path and use it instead of cpuset_current_mems_allowed;https://api.github.com/repos/torvalds/linux/git/commits/9af744d743170b5f5ef70031dea8d772d166ab28;https://github.com/torvalds/linux/commit/9af744d743170b5f5ef70031dea8d772d166ab28
201;567;Fix this by always priting the nodemask;Fix this by always printing the nodemask;always printing the nodemask;https://api.github.com/repos/torvalds/linux/git/commits/82e7d3abec86cba9df945a765bba384f8ac113a7;https://github.com/torvalds/linux/commit/82e7d3abec86cba9df945a765bba384f8ac113a7
204;571;" To prevent from ugly ifdefs the mask is printed even for
!NUMA configurations but this should be OK (a single node will be
printed).";The mask is printed even for NUMA configurations ;To prevent ugly ifdefs;https://api.github.com/repos/torvalds/linux/git/commits/82e7d3abec86cba9df945a765bba384f8ac113a7;https://github.com/torvalds/linux/commit/82e7d3abec86cba9df945a765bba384f8ac113a7
207;581;"We are trying hard to not invoke OOM killer as much as possible but
there is simply no reliable way to detect whether more reclaim retries
make sense";not invoke OOM killer as much as possible;there is simply no reliable way to detect whether more reclaim retries make sense;https://api.github.com/repos/torvalds/linux/git/commits/9254990fb9f0f15f25605748da20cfbeced7c816;https://github.com/torvalds/linux/commit/9254990fb9f0f15f25605748da20cfbeced7c816
208;589;" This means that we can finally allow
oom reaper also to tasks which share their mm with kthreads.";allow oom reaper also to tasks which share their mm with kthreads;This means that we can finally allow;https://api.github.com/repos/torvalds/linux/git/commits/1b51e65eab64fac72cab009691e8ca9915624876;https://github.com/torvalds/linux/commit/1b51e65eab64fac72cab009691e8ca9915624876
209;590;mm: make sure that kthreads will not refault oom reaped memory;make sure that kthreads will not refault oom reaped memory;not refault oom reaped memory;https://api.github.com/repos/torvalds/linux/git/commits/3f70dc38cec2ad6e5355f80c4c7a15a3f7e97a19;https://github.com/torvalds/linux/commit/3f70dc38cec2ad6e5355f80c4c7a15a3f7e97a19
210;600;"Make sure that no kthread context (users of use_mm) can ever see
corrupted data because of the oom reaper and hook into the page fault
path by checking MMF_UNSTABLE mm flag";Make sure that no kthread context (users of use_mm) can ever see corrupted data because of the oom reaper and hook into the page fault path;checking MMF_UNSTABLE mm flag;https://api.github.com/repos/torvalds/linux/git/commits/3f70dc38cec2ad6e5355f80c4c7a15a3f7e97a19;https://github.com/torvalds/linux/commit/3f70dc38cec2ad6e5355f80c4c7a15a3f7e97a19
211;602;" If the flag is set then
SIGBUS is triggered so any g-u-p user will get a error code";SIGBUS is triggered;the flag is set;https://api.github.com/repos/torvalds/linux/git/commits/3f70dc38cec2ad6e5355f80c4c7a15a3f7e97a19;https://github.com/torvalds/linux/commit/3f70dc38cec2ad6e5355f80c4c7a15a3f7e97a19
213;606;"There are no users of exit_oom_victim on !current task anymore so enforce
the API to always work on the current.";Enforce the API to always work on the current;There are no users of exit_oom_victim on !current task anymore;https://api.github.com/repos/torvalds/linux/git/commits/38531201c12144cd7d96abfdfe7449c2b01375e8;https://github.com/torvalds/linux/commit/38531201c12144cd7d96abfdfe7449c2b01375e8
214;608;"After ""oom: keep mm of the killed task available"" we can safely detect
an oom victim by checking task->signal->oom_mm so we do not need the
signal_struct counter anymore so let's get rid of it";Let's get rid of the signal_struct counter;We do not need it anymore;https://api.github.com/repos/torvalds/linux/git/commits/862e3073b3eed13f17bd6be6ca6052db15c0b728;https://github.com/torvalds/linux/commit/862e3073b3eed13f17bd6be6ca6052db15c0b728
216;611;" We can reuse
MMF_OOM_REAPED and rename it to a more generic MMF_OOM_SKIP.";Rename MMF_OOM_REAPED to MMF_OOM_SKIP;Make it more generic;https://api.github.com/repos/torvalds/linux/git/commits/862e3073b3eed13f17bd6be6ca6052db15c0b728;https://github.com/torvalds/linux/commit/862e3073b3eed13f17bd6be6ca6052db15c0b728
217;623;" __oom_reap_task_mm as well as oom_scan_process_thread do not
have to rely on find_lock_task_mm anymore and they will have a reliable
reference to the mm struct";__oom_reap_task_mm as well as oom_scan_process_thread do not have to rely on find_lock_task_mm anymore;they will have a reliable reference to the mm struct;https://api.github.com/repos/torvalds/linux/git/commits/26db62f179d112d345031e14926a4cda9cd40d6e;https://github.com/torvalds/linux/commit/26db62f179d112d345031e14926a4cda9cd40d6e
219;625;"Increasing the signal_struct for something as unlikely as the oom killer
is far from ideal but this approach will make the code much more
reasonable and long term we even might want to move task->mm into the
signal_struct anyway";Increasing the signal_struct for something as unlikely as the oom killer;far from ideal but this approach will make the code much more reasonable and long term we even might want to move task->mm into the signal_struct anyway;https://api.github.com/repos/torvalds/linux/git/commits/26db62f179d112d345031e14926a4cda9cd40d6e;https://github.com/torvalds/linux/commit/26db62f179d112d345031e14926a4cda9cd40d6e
220;627;mm,oom_reaper: do not attempt to reap a task twice;do not attempt to reap a task twice;do not attempt to reap a task twice;https://api.github.com/repos/torvalds/linux/git/commits/8496afaba93ece80a83cbd096f0675a1020ddfc4;https://github.com/torvalds/linux/commit/8496afaba93ece80a83cbd096f0675a1020ddfc4
221;633;mm,oom_reaper: reduce find_lock_task_mm() usage;reduce find_lock_task_mm() usage;mm, oom_reaper;https://api.github.com/repos/torvalds/linux/git/commits/7ebffa45551fe7db86a2b32bf586f124ef484e6e;https://github.com/torvalds/linux/commit/7ebffa45551fe7db86a2b32bf586f124ef484e6e
222;636;"__oom_reap_task() can be simplified a bit if it receives a valid mm from
oom_reap_task() which also uses that mm when __oom_reap_task() failed";__oom_reap_task() can be simplified a bit if it receives a valid mm from oom_reap_task();also uses that mm when __oom_reap_task() failed;https://api.github.com/repos/torvalds/linux/git/commits/7ebffa45551fe7db86a2b32bf586f124ef484e6e;https://github.com/torvalds/linux/commit/7ebffa45551fe7db86a2b32bf586f124ef484e6e
224;639;" Pinning mm's mm_count for
longer time is not really harmful because this will not pin much memory";Pinning mm's mm_count for longer time;not really harmful because this will not pin much memory;https://api.github.com/repos/torvalds/linux/git/commits/7ebffa45551fe7db86a2b32bf586f124ef484e6e;https://github.com/torvalds/linux/commit/7ebffa45551fe7db86a2b32bf586f124ef484e6e
227;643;mm: oom: deduplicate victim selection code for memcg and global oom;deduplicate victim selection code for memcg and global oom;improve code efficiency and maintainability;https://api.github.com/repos/torvalds/linux/git/commits/7c5f64f84483bd13886348edda8b3e7b799a7fdb;https://github.com/torvalds/linux/commit/7c5f64f84483bd13886348edda8b3e7b799a7fdb
229;649;mm, oom: fix uninitialized ret in task_will_free_mem();fix uninitialized ret in task_will_free_mem();uninitialized ret in task_will_free_mem();https://api.github.com/repos/torvalds/linux/git/commits/f33e6f0671b3ba81acef4d7c078af86afcc855c4;https://github.com/torvalds/linux/commit/f33e6f0671b3ba81acef4d7c078af86afcc855c4
230;656;"In order to help forward progress for the OOM killer, make sure that
this really rare case will not get in the way - we do this by hiding the
mm from the oom killer by setting MMF_OOM_REAPED flag for it";hide the mm from the oom killer by setting MMF_OOM_REAPED flag for it;help forward progress for the OOM killer;https://api.github.com/repos/torvalds/linux/git/commits/a373966d1f64c04ba9d0159087f0fa1b5aac4c33;https://github.com/torvalds/linux/commit/a373966d1f64c04ba9d0159087f0fa1b5aac4c33
232;659;mm, oom_reaper: do not attempt to reap a task more than twice;do not attempt to reap a task more than twice;do not attempt to reap a task more than twice;https://api.github.com/repos/torvalds/linux/git/commits/11a410d516e89320fe0817606eeab58f36c22968;https://github.com/torvalds/linux/commit/11a410d516e89320fe0817606eeab58f36c22968
233;664;" If the flag is present after
the failure then we set MMF_OOM_REAPED to hide this mm from the oom
killer completely so it can go and chose another victim";set MMF_OOM_REAPED to hide this mm from the oom killer completely;hide this mm from the oom killer completely;https://api.github.com/repos/torvalds/linux/git/commits/11a410d516e89320fe0817606eeab58f36c22968;https://github.com/torvalds/linux/commit/11a410d516e89320fe0817606eeab58f36c22968
234;665;"As a result a risk of OOM deadlock when the oom victim would be blocked
indefinetly and so the oom killer cannot make any progress should be
mitigated considerably while we still try really hard to perform all
reclaim attempts and stay predictable in the behavior.";mitigate the risk of OOM deadlock;considerably while we still try really hard to perform all reclaim attempts and stay predictable in the behavior.;https://api.github.com/repos/torvalds/linux/git/commits/11a410d516e89320fe0817606eeab58f36c22968;https://github.com/torvalds/linux/commit/11a410d516e89320fe0817606eeab58f36c22968
235;670;" Teach task_will_free_mem to skip
over MMF_OOM_REAPED tasks as well because they will be unlikely to free
anything more";Teach task_will_free_mem to skip over MMF_OOM_REAPED tasks;because they will be unlikely to free anything more;https://api.github.com/repos/torvalds/linux/git/commits/696453e66630ad45e644c4571307fa3ebec9a835;https://github.com/torvalds/linux/commit/696453e66630ad45e644c4571307fa3ebec9a835
238;678;" This
will allow us to replace try_oom_reaper by wake_oom_reaper because
task_will_free_mem implies the task is reapable now";replace try_oom_reaper by wake_oom_reaper;task_will_free_mem implies the task is reapable now;https://api.github.com/repos/torvalds/linux/git/commits/1af8bb43269563e458ebcf0ece812e9a970864b3;https://github.com/torvalds/linux/commit/1af8bb43269563e458ebcf0ece812e9a970864b3
239;679;" Therefore all paths
which bypass the oom killer are now reapable and so they shouldn't lock up
the oom killer.";all paths which bypass the oom killer are now reapable;so they shouldn't lock up the oom killer;https://api.github.com/repos/torvalds/linux/git/commits/1af8bb43269563e458ebcf0ece812e9a970864b3;https://github.com/torvalds/linux/commit/1af8bb43269563e458ebcf0ece812e9a970864b3
241;684;" Killing such a task should be
acceptable because it is highly unlikely it has done anything useful
because it cannot modify any memory before it calls exec";Killing such a task should be acceptable;it is highly unlikely it has done anything useful because it cannot modify any memory before it calls exec;https://api.github.com/repos/torvalds/linux/git/commits/97fd49c2355ffdede6526afc0c72bc314d05f42a;https://github.com/torvalds/linux/commit/97fd49c2355ffdede6526afc0c72bc314d05f42a
243;686;"[rientjes@google.com - drop printk when OOM_SCORE_ADJ_MIN killed task
 the setting is inherently racy and we cannot do much about it without
 introducing locks in hot paths]";drop printk when OOM_SCORE_ADJ_MIN killed task;the setting is inherently racy and we cannot do much about it without introducing locks in hot paths;https://api.github.com/repos/torvalds/linux/git/commits/97fd49c2355ffdede6526afc0c72bc314d05f42a;https://github.com/torvalds/linux/commit/97fd49c2355ffdede6526afc0c72bc314d05f42a
244;701;" As a result all the processes will share the same
oom_score_adj";Share the same oom_score_adj;As a result;https://api.github.com/repos/torvalds/linux/git/commits/44a70adec910d6929689e42b6e5cee5b7d202d20;https://github.com/torvalds/linux/commit/44a70adec910d6929689e42b6e5cee5b7d202d20
245;703;mm, oom_reaper: make sure that mmput_async is called only when memory was reaped;make sure that mmput_async is called only when memory was reaped;to ensure that mmput_async is only called when memory was reaped;https://api.github.com/repos/torvalds/linux/git/commits/e5e3f4c4f0e95ecbad2f8d2f4f6a29bb8a90226b;https://github.com/torvalds/linux/commit/e5e3f4c4f0e95ecbad2f8d2f4f6a29bb8a90226b
246;707;"We can, however, make sure that the mmput_async is only called when we
do not back off and reap some memory";make sure that the mmput_async is only called;when we do not back off and reap some memory;https://api.github.com/repos/torvalds/linux/git/commits/e5e3f4c4f0e95ecbad2f8d2f4f6a29bb8a90226b;https://github.com/torvalds/linux/commit/e5e3f4c4f0e95ecbad2f8d2f4f6a29bb8a90226b
247;711;"It is not clear whether this race is possible at all but it is better to
be more robust and do not pin mm_users unless we are sure we are
actually doing some real work during __oom_reap_task.";be more robust and do not pin mm_users unless we are sure we are actually doing some real work during __oom_reap_task;It is not clear whether this race is possible at all;https://api.github.com/repos/torvalds/linux/git/commits/e5e3f4c4f0e95ecbad2f8d2f4f6a29bb8a90226b;https://github.com/torvalds/linux/commit/e5e3f4c4f0e95ecbad2f8d2f4f6a29bb8a90226b
248;712;mm,oom: remove unused argument from oom_scan_process_thread().;remove unused argument from oom_scan_process_thread();unused argument;https://api.github.com/repos/torvalds/linux/git/commits/fbe84a09da746f781553051bb3dbc63f7b0a5162;https://github.com/torvalds/linux/commit/fbe84a09da746f781553051bb3dbc63f7b0a5162
250;717;oom_reaper: avoid pointless atomic_inc_not_zero usage.;avoid pointless atomic_inc_not_zero usage;pointless;https://api.github.com/repos/torvalds/linux/git/commits/9df10fb7b80bc2f540956ba01b5e7ee1012001a5;https://github.com/torvalds/linux/commit/9df10fb7b80bc2f540956ba01b5e7ee1012001a5
255;732;mm,oom: speed up select_bad_process() loop;speed up select_bad_process() loop;mm, oom;https://api.github.com/repos/torvalds/linux/git/commits/f44666b04605d1c7fd94ab90b7ccf633e7eff228;https://github.com/torvalds/linux/commit/f44666b04605d1c7fd94ab90b7ccf633e7eff228
256;739;"If we track number of TIF_MEMDIE threads inside signal_struct, we don't
need to do TIF_MEMDIE test on each thread";Track number of TIF_MEMDIE threads inside signal_struct;We don't need to do TIF_MEMDIE test on each thread;https://api.github.com/repos/torvalds/linux/git/commits/f44666b04605d1c7fd94ab90b7ccf633e7eff228;https://github.com/torvalds/linux/commit/f44666b04605d1c7fd94ab90b7ccf633e7eff228
258;741;"This patch adds a counter to signal_struct for tracking how many
TIF_MEMDIE threads are in a given thread group, and check it at
oom_scan_process_thread() so that select_bad_process() can use
for_each_process() rather than for_each_process_thread().";"This patch adds a counter to signal_struct for tracking how many TIF_MEMDIE threads are in a given thread group, and check it at oom_scan_process_thread()
";so that select_bad_process() can use for_each_process() rather than for_each_process_thread();https://api.github.com/repos/torvalds/linux/git/commits/f44666b04605d1c7fd94ab90b7ccf633e7eff228;https://github.com/torvalds/linux/commit/f44666b04605d1c7fd94ab90b7ccf633e7eff228
259;746;" We should strive for making this context as reliable
and independent on other subsystems as much as possible";strive for making this context as reliable and independent on other subsystems;as much as possible;https://api.github.com/repos/torvalds/linux/git/commits/ec8d7c14ea14922fe21945b458a75e39f11dd832;https://github.com/torvalds/linux/commit/ec8d7c14ea14922fe21945b458a75e39f11dd832
265;760;" This patch adds try_oom_reaper which checks the given task and
queues it for the oom reaper if that is safe to be done meaning that the
task doesn't share the mm with an alive process";"This patch adds try_oom_reaper.
";The decision is made in order to check the given task and queue it for the oom reaper if it is safe to be done, meaning that the task doesn't share the mm with an alive process.;https://api.github.com/repos/torvalds/linux/git/commits/3ef22dfff2390e75b379f9715388a852aa56e0d5;https://github.com/torvalds/linux/commit/3ef22dfff2390e75b379f9715388a852aa56e0d5
266;766;" This patch doesn't
change this behavior because we are not ready to allow those allocation
requests to fail yet (and maybe we will face the reality that we will
never manage to safely fail these request)";This patch doesn't change this behavior;because we are not ready to allow those allocation requests to fail yet (and maybe we will face the reality that we will never manage to safely fail these request);https://api.github.com/repos/torvalds/linux/git/commits/3da88fb3bacfaa33ff9d13730d17110bb2d9604d;https://github.com/torvalds/linux/commit/3da88fb3bacfaa33ff9d13730d17110bb2d9604d
267;767;" Instead __GFP_FS check is
moved down to out_of_memory and prevent from OOM victim selection there";move the __GFP_FS check down to out_of_memory and prevent OOM victim selection there;prevent OOM victim selection;https://api.github.com/repos/torvalds/linux/git/commits/3da88fb3bacfaa33ff9d13730d17110bb2d9604d;https://github.com/torvalds/linux/commit/3da88fb3bacfaa33ff9d13730d17110bb2d9604d
268;769;"Keep a comment in __alloc_pages_may_oom to make sure we do not forget
how GFP_NOFS is special and that we really want to do something about
Note to the current oom_notifier users";Keep a comment in __alloc_pages_may_oom;to make sure we do not forget how GFP_NOFS is special and that we really want to do something about;https://api.github.com/repos/torvalds/linux/git/commits/3da88fb3bacfaa33ff9d13730d17110bb2d9604d;https://github.com/torvalds/linux/commit/3da88fb3bacfaa33ff9d13730d17110bb2d9604d
270;771;" Not that this would be allowed
today because that would just lockup machine in most of the cases and
ruling out the OOM killer along the way";ruling out the OOM killer;lockup machine in most of the cases;https://api.github.com/repos/torvalds/linux/git/commits/3da88fb3bacfaa33ff9d13730d17110bb2d9604d;https://github.com/torvalds/linux/commit/3da88fb3bacfaa33ff9d13730d17110bb2d9604d
271;772;" Another difference is that
callbacks might be invoked sooner now because GFP_NOFS is a weaker
reclaim context and so there could be reclaimable memory which is just
not reachable now";callbacks might be invoked sooner now;GFP_NOFS is a weaker reclaim context and so there could be reclaimable memory which is just not reachable now;https://api.github.com/repos/torvalds/linux/git/commits/3da88fb3bacfaa33ff9d13730d17110bb2d9604d;https://github.com/torvalds/linux/commit/3da88fb3bacfaa33ff9d13730d17110bb2d9604d
272;777; Fix the condition by checking for the head as well;Fix the condition by checking for the head as well;checking for the head as well;https://api.github.com/repos/torvalds/linux/git/commits/af8e15cc85a253155fdcea707588bf6ddfc0be2e;https://github.com/torvalds/linux/commit/af8e15cc85a253155fdcea707588bf6ddfc0be2e
273;778;"Fixes: bb29902a7515 (""oom, oom_reaper: protect oom_reaper_list using simpler way"")";"Fixes: bb29902a7515 (""oom, oom_reaper: protect oom_reaper_list using simpler way"")";protect oom_reaper_list using simpler way;https://api.github.com/repos/torvalds/linux/git/commits/af8e15cc85a253155fdcea707588bf6ddfc0be2e;https://github.com/torvalds/linux/commit/af8e15cc85a253155fdcea707588bf6ddfc0be2e
274;779;oom, oom_reaper: protect oom_reaper_list using simpler way;protect oom_reaper_list using simpler way;simpler way;https://api.github.com/repos/torvalds/linux/git/commits/bb29902a7515208846114b3b36a4281a9bbf766a;https://github.com/torvalds/linux/commit/bb29902a7515208846114b3b36a4281a9bbf766a
276;788;In order to close this race, make the oom_reaper thread freezable;make the oom_reaper thread freezable;In order to close this race;https://api.github.com/repos/torvalds/linux/git/commits/e26796066fdf929cbba22dabb801808f986acdb9;https://github.com/torvalds/linux/commit/e26796066fdf929cbba22dabb801808f986acdb9
278;791;"Entries are only added/removed from oom_reaper_list at head so we can
use a single linked list and hence save a word in task_struct.";Use a single linked list;Save a word in task_struct;https://api.github.com/repos/torvalds/linux/git/commits/29c696e1c6eceb5db6b21f0c89495fcfcd40c0eb;https://github.com/torvalds/linux/commit/29c696e1c6eceb5db6b21f0c89495fcfcd40c0eb
279;795;"This patch fixes the issue by introducing a new MMF_OOM_KILLED mm flag
which is set in oom_kill_process atomically and oom reaper is disabled
if the flag was already set.";This patch fixes the issue by introducing a new MMF_OOM_KILLED mm flag which is set in oom_kill_process atomically and oom reaper is disabled if the flag was already set.;Fixes the issue by introducing a new MMF_OOM_KILLED mm flag and disabling the oom reaper if the flag was already set.;https://api.github.com/repos/torvalds/linux/git/commits/855b018325737f7691f9b7d86339df40aa4e47c3;https://github.com/torvalds/linux/commit/855b018325737f7691f9b7d86339df40aa4e47c3
280;803;"The situation would improve considerably if wake_oom_reaper used a more
robust queuing";wake_oom_reaper used a more robust queuing;The situation would improve considerably;https://api.github.com/repos/torvalds/linux/git/commits/03049269de433cb5fe2859be9ae4469ceb1163ed;https://github.com/torvalds/linux/commit/03049269de433cb5fe2859be9ae4469ceb1163ed
283;808;"Inform about the successful/failed oom_reaper attempts and dump all the
held locks to tell us more who is blocking the progress.";Inform about the successful/failed oom_reaper attempts and dump all the held locks;to tell us more who is blocking the progress;https://api.github.com/repos/torvalds/linux/git/commits/bc448e897b6d24aae32701763b8a1fe15d29fa26;https://github.com/torvalds/linux/commit/bc448e897b6d24aae32701763b8a1fe15d29fa26
284;817;"This patch reduces the probability of such a lockup by introducing a
specialized kernel thread (oom_reaper) which tries to reclaim additional
memory by preemptively reaping the anonymous or swapped out memory owned
by the oom victim under an assumption that such a memory won't be needed
when its owner is killed and kicked from the userspace anyway";This patch reduces the probability of such a lockup by introducing a specialized kernel thread (oom_reaper) which tries to reclaim additional memory by preemptively reaping the anonymous or swapped out memory owned by the oom victim.;under an assumption that such a memory won't be needed when its owner is killed and kicked from the userspace anyway;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
285;819;" This is
considered a reasonable constrain because the overall system health is
more important than debugability of a particular application";considered a reasonable constrain;the overall system health is more important than debugability of a particular application;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
286;820;"A kernel thread has been chosen because we need a reliable way of
invocation so workqueue context is not appropriate because all the
workers might be busy (e.g";A kernel thread has been chosen;we need a reliable way of invocation so workqueue context is not appropriate because all the workers might be busy;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
288;822;" Kswapd which sounds
like another good fit is not appropriate as well because it might get
blocked on locks during reclaim as well";Kswapd which sounds like another good fit is not appropriate as well;it might get blocked on locks during reclaim as well;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
289;823;"oom_reaper has to take mmap_sem on the target task for reading so the
solution is not 100% because the semaphore might be held or blocked for
write but the probability is reduced considerably wrt";oom_reaper has to take mmap_sem on the target task for reading;the semaphore might be held or blocked for write but the probability is reduced considerably wrt;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
291;825;" In order to prevent
from blocking on the lock without any forward progress we are using only
a trylock and retry 10 times with a short sleep in between";Using only a trylock and retry 10 times with a short sleep in between;To prevent from blocking on the lock without any forward progress;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
292;826;" Users of
mmap_sem which need it for write should be carefully reviewed to use
_killable waiting as much as possible and reduce allocations requests
done with the lock held to absolute minimum to reduce the risk even
further";"Users of mmap_sem which need it for write should be carefully reviewed to use _killable waiting as much as possible and reduce allocations requests done with the lock held to absolute minimum
";to reduce the risk even further;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
293;830;" As the operation is potentially disruptive we are trying to
limit it to the ncessary minimum and the reaper blocks any updates while
it operates on an mm";limit it to the necessary minimum;the operation is potentially disruptive;https://api.github.com/repos/torvalds/linux/git/commits/aac453635549699c13a84ea1456d5b0e574ef855;https://github.com/torvalds/linux/commit/aac453635549699c13a84ea1456d5b0e574ef855
296;838;" - Add a missing newline
 - Realign arguments";Add a missing newline;missing;https://api.github.com/repos/torvalds/linux/git/commits/756a025f00091918d9d09ca3229defb160b409c0;https://github.com/torvalds/linux/commit/756a025f00091918d9d09ca3229defb160b409c0
297;852;" As a preparation to extend the userspace interfaces,
this patch adds MM_SHMEMPAGES counter to mm_rss_stat to account for
shmem pages separately from MM_FILEPAGES";adds MM_SHMEMPAGES counter to mm_rss_stat;to account for shmem pages separately from MM_FILEPAGES;https://api.github.com/repos/torvalds/linux/git/commits/eca56ff906bdd0239485e8b47154a6e73dd9a2f3;https://github.com/torvalds/linux/commit/eca56ff906bdd0239485e8b47154a6e73dd9a2f3
299;855;mm/oom_kill.c: avoid attempting to kill init sharing same memory;avoid attempting to kill init sharing same memory;avoid attempting to kill init;https://api.github.com/repos/torvalds/linux/git/commits/a2b829d95958da2025ef844c0f53ac15ad720fac;https://github.com/torvalds/linux/commit/a2b829d95958da2025ef844c0f53ac15ad720fac
301;862;"Introduce is_sysrq_oom helper function indicating oom kill triggered
by sysrq to improve readability";Introduce is_sysrq_oom helper function;to improve readability;https://api.github.com/repos/torvalds/linux/git/commits/db2a0dd7a43de595d3f0542986bb17ccb6cc364c;https://github.com/torvalds/linux/commit/db2a0dd7a43de595d3f0542986bb17ccb6cc364c
302;864;mm/oom_kill: fix the wrong task->mm == mm checks in oom_kill_process();fix the wrong task->mm == mm checks in oom_kill_process();wrong task->mm == mm checks;https://api.github.com/repos/torvalds/linux/git/commits/4d7b3394f76ed72cfdec23ca5571dbab6ec41793;https://github.com/torvalds/linux/commit/4d7b3394f76ed72cfdec23ca5571dbab6ec41793
304;874;" It is possible that the group leader
has the pending SIGKILL because its sub-thread originated the coredump, in
this case we must not skip this process";we must not skip this process;because its sub-thread originated the coredump;https://api.github.com/repos/torvalds/linux/git/commits/0c1b2d783cf3432490bf1e532c742fffeadc0bf3;https://github.com/torvalds/linux/commit/0c1b2d783cf3432490bf1e532c742fffeadc0bf3
305;875;"We could probably add the additional ->group_exit_task check but this
patch just removes the wrong check along with pr_info().";remove the wrong check along with pr_info();wrong check along with pr_info();https://api.github.com/repos/torvalds/linux/git/commits/0c1b2d783cf3432490bf1e532c742fffeadc0bf3;https://github.com/torvalds/linux/commit/0c1b2d783cf3432490bf1e532c742fffeadc0bf3
306;880;" We can tolerate a comm being printed that is in
the middle of an update to avoid taking the lock";We can tolerate a comm being printed that is in the middle of an update;to avoid taking the lock;https://api.github.com/repos/torvalds/linux/git/commits/da39da3a54fed88e29024f2f1f6cd7357cd03a44;https://github.com/torvalds/linux/commit/da39da3a54fed88e29024f2f1f6cd7357cd03a44
307;882;"mm/oom_kill.c: suppress unnecessary ""sharing same memory"" message";"suppress unnecessary ""sharing same memory"" message";"unnecessary ""sharing same memory""";https://api.github.com/repos/torvalds/linux/git/commits/840807a8f40bb25a8df5b6412bba6bc156643be5;https://github.com/torvalds/linux/commit/840807a8f40bb25a8df5b6412bba6bc156643be5
308;885;" This patch
reduces the ""Kill process"" lines by printing that line with info level
only if SIGKILL is not pending.";"reduces the ""Kill process"" lines by printing that line with info level";only if SIGKILL is not pending;https://api.github.com/repos/torvalds/linux/git/commits/840807a8f40bb25a8df5b6412bba6bc156643be5;https://github.com/torvalds/linux/commit/840807a8f40bb25a8df5b6412bba6bc156643be5
309;886;mm/oom_kill.c: fix potentially killing unrelated process;fix potentially killing unrelated process;potentially killing unrelated process;https://api.github.com/repos/torvalds/linux/git/commits/880b768937e90c433c0c8254a22b1eb63df005a4;https://github.com/torvalds/linux/commit/880b768937e90c433c0c8254a22b1eb63df005a4
310;891;" To make sure that the OOM victim's mm does not go away
until for_each_process() loop finishes, get a reference on the OOM
victim's mm before calling task_unlock(victim).";get a reference on the OOM victim's mm before calling task_unlock(victim);to make sure that the OOM victim's mm does not go away until for_each_process() loop finishes;https://api.github.com/repos/torvalds/linux/git/commits/880b768937e90c433c0c8254a22b1eb63df005a4;https://github.com/torvalds/linux/commit/880b768937e90c433c0c8254a22b1eb63df005a4
311;901;mm, oom: remove unnecessary variable;remove unnecessary variable;unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/75e8f8b24cb0dc4951267d31f0a49e5ce2f345c4;https://github.com/torvalds/linux/commit/75e8f8b24cb0dc4951267d31f0a49e5ce2f345c4
312;902;"The ""killed"" variable in out_of_memory() can be removed since the call to
oom_kill_process() where we should block to allow the process time to
exit is obvious.";"The ""killed"" variable in out_of_memory() can be removed";since the call to oom_kill_process() where we should block to allow the process time to exit is obvious.;https://api.github.com/repos/torvalds/linux/git/commits/75e8f8b24cb0dc4951267d31f0a49e5ce2f345c4;https://github.com/torvalds/linux/commit/75e8f8b24cb0dc4951267d31f0a49e5ce2f345c4
313;906;Avoid panicking the system for sysrq+f when no processes are killed.;Avoid panicking the system for sysrq+f when no processes are killed;no processes are killed;https://api.github.com/repos/torvalds/linux/git/commits/071a4befebb655d6b31bf5c6bacd5a6df035224d;https://github.com/torvalds/linux/commit/071a4befebb655d6b31bf5c6bacd5a6df035224d
315;913;"Organize these elements into a new struct, struct oom_control, that
specifies the context for an oom condition";Organize these elements into a new struct, struct oom_control;specifies the context for an oom condition;https://api.github.com/repos/torvalds/linux/git/commits/6e0fc46dc2152d3e2d25a5d5b640ae3586c247c6;https://github.com/torvalds/linux/commit/6e0fc46dc2152d3e2d25a5d5b640ae3586c247c6
318;925;"Replace both locking schemes with a single global mutex serializing OOM
kills regardless of context.";Replace both locking schemes with a single global mutex serializing OOM kills regardless of context.;regardless of context;https://api.github.com/repos/torvalds/linux/git/commits/dc56401fc9f25e8f93899991ec858c98a331d88c;https://github.com/torvalds/linux/commit/dc56401fc9f25e8f93899991ec858c98a331d88c
319;926;mm: oom_kill: remove unnecessary locking in exit_oom_victim();Remove unnecessary locking in exit_oom_victim();unnecessary locking in exit_oom_victim();https://api.github.com/repos/torvalds/linux/git/commits/da51b14adb671829077da3aeb9e9edd6f8c80afe;https://github.com/torvalds/linux/commit/da51b14adb671829077da3aeb9e9edd6f8c80afe
321;936;"This could have been replaced with waitqueue_active(), but it only saves
a few instructions in one of the coldest paths in the kernel";This could have been replaced with waitqueue_active();it only saves a few instructions in one of the coldest paths in the kernel;https://api.github.com/repos/torvalds/linux/git/commits/c38f1025f2910d6183e9923d4b4d5804474b50c5;https://github.com/torvalds/linux/commit/c38f1025f2910d6183e9923d4b4d5804474b50c5
325;945;"While at it, rename mark_tsk_oom_victim() to mark_oom_victim(), which
is easier on the eye.";Rename mark_tsk_oom_victim() to mark_oom_victim();which is easier on the eye.;https://api.github.com/repos/torvalds/linux/git/commits/16e951966f05da5ccd650104176f6ba289f7fa20;https://github.com/torvalds/linux/commit/16e951966f05da5ccd650104176f6ba289f7fa20
326;946;mm: oom_kill: remove unnecessary locking in oom_enable();remove unnecessary locking in oom_enable();unnecessary locking in oom_enable();https://api.github.com/repos/torvalds/linux/git/commits/3f5ab8cfbf15e8e02838ffc3549191351305df0e;https://github.com/torvalds/linux/commit/3f5ab8cfbf15e8e02838ffc3549191351305df0e
327;948;mm/oom_kill.c: fix typo in comment;fix typo in comment;typo in comment;https://api.github.com/repos/torvalds/linux/git/commits/bdddbcd45fd191a0213e6d2a032eb55d18bd1fc0;https://github.com/torvalds/linux/commit/bdddbcd45fd191a0213e6d2a032eb55d18bd1fc0
329;956;"	int main(void)
			addr = mmap(addr + PUD_SIZE, PUD_SIZE, PROT_WRITE|PROT_READ,
			mmap(addr, PMD_SIZE, PROT_WRITE|PROT_READ,
		printf(""PID %d consumed %lu KiB in PMD page tables\n"",
The patch addresses the issue by account PMD tables to the process the
same way we account PTE";The patch addresses the issue by account PMD tables to the process the same way we account PTE;addresses the issue by account PMD tables to the process the same way we account PTE;https://api.github.com/repos/torvalds/linux/git/commits/dc6c9a35b66b520cf67e05d8ca60ebecad3b0479;https://github.com/torvalds/linux/commit/dc6c9a35b66b520cf67e05d8ca60ebecad3b0479
331;967;oom, PM: make OOM detection in the freezer path raceless;make OOM detection in the freezer path raceless;raceless;https://api.github.com/repos/torvalds/linux/git/commits/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7;https://github.com/torvalds/linux/commit/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7
334;973;"oom_killer_disabled check is moved from the allocation path to the OOM
level and we take oom_sem for reading for both the check and the whole
OOM invocation";oom_killer_disabled check is moved from the allocation path to the OOM level;to take oom_sem for reading for both the check and the whole OOM invocation;https://api.github.com/repos/torvalds/linux/git/commits/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7;https://github.com/torvalds/linux/commit/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7
337;981;" As per Tejun, ""We used to have freezing points deep in file
system code which may be reacheable from page fault."" so it would be
better and more robust to not rely on freezing points here";it would be better and more robust to not rely on freezing points here;We used to have freezing points deep in file system code which may be reachable from page fault;https://api.github.com/repos/torvalds/linux/git/commits/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7;https://github.com/torvalds/linux/commit/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7
339;988;"This should complete in a finite
time, though, because
	- the victim cannot loop in the page fault handler (it would die
	  on the way out from the exception)
	- it cannot loop in the page allocator because all the further
	  allocation would fail and __GFP_NOFAIL allocations are not
	  acceptable at this stage
	- it shouldn't be blocked on any locks held by frozen tasks
	  (try_to_freeze expects lockless context) and kernel threads and
	  work queues are not frozen yet";This should complete in a finite time;The victim cannot loop in the page fault handler, it cannot loop in the page allocator, and it shouldn't be blocked on any locks held by frozen tasks or kernel threads and work queues are not frozen yet.;https://api.github.com/repos/torvalds/linux/git/commits/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7;https://github.com/torvalds/linux/commit/c32b3cbe0d067a9cfae85aa70ba1e97ceba0ced7
340;995;" We are not checking whether the task is frozen because that
would be racy and __thaw_task does that already";We are not checking whether the task is frozen;that would be racy and __thaw_task does that already;https://api.github.com/repos/torvalds/linux/git/commits/63a8ca9b2084fa5bd91aa380532f18e361764109;https://github.com/torvalds/linux/commit/63a8ca9b2084fa5bd91aa380532f18e361764109
341;996;" oom_scan_process_thread
doesn't need to care about freezer anymore as TIF_MEMDIE and freezer are
excluded completely now.";oom_scan_process_thread doesn't need to care about freezer anymore;TIF_MEMDIE and freezer are excluded completely now;https://api.github.com/repos/torvalds/linux/git/commits/63a8ca9b2084fa5bd91aa380532f18e361764109;https://github.com/torvalds/linux/commit/63a8ca9b2084fa5bd91aa380532f18e361764109
343;998;"This patchset addresses a race which was described in the changelog for
5695be142e20 (""OOM, PM: OOM killed task shouldn't escape PM suspend"")";This patchset addresses a race;"which was described in the changelog for 5695be142e20 (""OOM, PM: OOM killed task shouldn't escape PM suspend"")";https://api.github.com/repos/torvalds/linux/git/commits/49550b605587924b3336386caae53200c68969d3;https://github.com/torvalds/linux/commit/49550b605587924b3336386caae53200c68969d3
349;1012;"mark_tsk_oom_victim is now called under task_lock but
  I think this should be OK because __thaw_task shouldn't interfere with any
  locking down wake_up_process";mark_tsk_oom_victim is now called under task_lock;I think this should be OK because __thaw_task shouldn't interfere with any locking down wake_up_process;https://api.github.com/repos/torvalds/linux/git/commits/49550b605587924b3336386caae53200c68969d3;https://github.com/torvalds/linux/commit/49550b605587924b3336386caae53200c68969d3
352;1017;"Patches 3 and 4 are trivial printk -> pr_info conversion and they should
go in ditto";Patches 3 and 4 should go in ditto;trivial printk -> pr_info conversion;https://api.github.com/repos/torvalds/linux/git/commits/49550b605587924b3336386caae53200c68969d3;https://github.com/torvalds/linux/commit/49550b605587924b3336386caae53200c68969d3
354;1027;"The primary meaning is to give the oom
victim access to the memory reserves and that shouldn't be necessary
here.";Give the oom victim access to the memory reserves;That shouldn't be necessary;https://api.github.com/repos/torvalds/linux/git/commits/49550b605587924b3336386caae53200c68969d3;https://github.com/torvalds/linux/commit/49550b605587924b3336386caae53200c68969d3
355;1034;"Fix this by checking task->mm and setting TIF_MEMDIE flag under task_lock
which will serialize the OOM killer with exit_mm which sets task->mm to
NULL";checking task->mm and setting TIF_MEMDIE flag under task_lock;serialize the OOM killer with exit_mm which sets task->mm to NULL;https://api.github.com/repos/torvalds/linux/git/commits/83363b917a2982dd509a5e2125e905b6873505a3;https://github.com/torvalds/linux/commit/83363b917a2982dd509a5e2125e905b6873505a3
356;1035;" Setting the flag for current is not necessary because check and set
is not racy.";Setting the flag for current is not necessary;check and set is not racy;https://api.github.com/repos/torvalds/linux/git/commits/83363b917a2982dd509a5e2125e905b6873505a3;https://github.com/torvalds/linux/commit/83363b917a2982dd509a5e2125e905b6873505a3
357;1041;" It will trigger an
OOM livelock if its parent is unable to reap it due to doing an
allocation and waiting for the OOM killer to kill it.";It will trigger an OOM livelock;if its parent is unable to reap it due to doing an allocation and waiting for the OOM killer to kill it;https://api.github.com/repos/torvalds/linux/git/commits/d7a94e7e11badf8404d40b41e008c3131a3cebe3;https://github.com/torvalds/linux/commit/d7a94e7e11badf8404d40b41e008c3131a3cebe3
358;1042;oom: kill the insufficient and no longer needed PT_TRACE_EXIT check;kill the insufficient and no longer needed PT_TRACE_EXIT check;insufficient and no longer needed;https://api.github.com/repos/torvalds/linux/git/commits/6a2d5679b4a852a3bf80c570644456ab466ab714;https://github.com/torvalds/linux/commit/6a2d5679b4a852a3bf80c570644456ab466ab714
359;1043;"After the previous patch we can remove the PT_TRACE_EXIT check in
oom_scan_process_thread(), it was added to handle the case when the
coredumping was ""frozen"" by ptrace, but it doesn't really work";Remove the PT_TRACE_EXIT check in oom_scan_process_thread();"It was added to handle the case when coredumping was ""frozen"" by ptrace, but it doesn't really work";https://api.github.com/repos/torvalds/linux/git/commits/6a2d5679b4a852a3bf80c570644456ab466ab714;https://github.com/torvalds/linux/commit/6a2d5679b4a852a3bf80c570644456ab466ab714
360;1044;" If
nothing else, we would need to check all threads which could share the
same ->mm to make it more or less correct.";check all threads which could share the same ->mm;to make it more or less correct;https://api.github.com/repos/torvalds/linux/git/commits/6a2d5679b4a852a3bf80c570644456ab466ab714;https://github.com/torvalds/linux/commit/6a2d5679b4a852a3bf80c570644456ab466ab714
362;1052;"fatal_signal_pending() can be true because of SIGNAL_GROUP_COREDUMP so
out_of_memory() and mem_cgroup_out_of_memory() shouldn't blindly trust it";fatal_signal_pending() can be true;because of SIGNAL_GROUP_COREDUMP so out_of_memory() and mem_cgroup_out_of_memory() shouldn't blindly trust it;https://api.github.com/repos/torvalds/linux/git/commits/d003f371b27016354c392464819530d47a915765;https://github.com/torvalds/linux/commit/d003f371b27016354c392464819530d47a915765
364;1057;"To make the API change clear, rename the leftover helper to
mem_cgroup_is_descendant() to match cgroup_is_descendant().";Rename the leftover helper to mem_cgroup_is_descendant() to match cgroup_is_descendant();To make the API change clear;https://api.github.com/repos/torvalds/linux/git/commits/2314b42db67be30b747122d65c6cd2c85da34538;https://github.com/torvalds/linux/commit/2314b42db67be30b747122d65c6cd2c85da34538
366;1067;So let's simplify the API back to the single check.;simplify the API back to the single check;to simplify the API back;https://api.github.com/repos/torvalds/linux/git/commits/344736f29b359790facd0b7a521e367f1715c11c;https://github.com/torvalds/linux/commit/344736f29b359790facd0b7a521e367f1715c11c
367;1068;OOM, PM: OOM killed task shouldn't escape PM suspend;OOM killed task shouldn't escape PM suspend;OOM;https://api.github.com/repos/torvalds/linux/git/commits/5695be142e203167e3cb515ef86a88424f3524eb;https://github.com/torvalds/linux/commit/5695be142e203167e3cb515ef86a88424f3524eb
368;1073;"Reduce the race window by checking all tasks after OOM killer has been
disabled";Reduce the race window by checking all tasks after OOM killer has been disabled;checking all tasks after OOM killer has been disabled;https://api.github.com/repos/torvalds/linux/git/commits/5695be142e203167e3cb515ef86a88424f3524eb;https://github.com/torvalds/linux/commit/5695be142e203167e3cb515ef86a88424f3524eb
370;1075;"Full synchronization of OOM and freezer is,
however, too heavy weight for this highly unlikely case";Full synchronization of OOM and freezer is too heavy weight;for this highly unlikely case;https://api.github.com/repos/torvalds/linux/git/commits/5695be142e203167e3cb515ef86a88424f3524eb;https://github.com/torvalds/linux/commit/5695be142e203167e3cb515ef86a88424f3524eb
371;1077;"The counter
is updated so early to reduce the race window since allocator checked
oom_killer_disabled which is set by PM-freezing code";The counter is updated so early to reduce the race window;to reduce the race window;https://api.github.com/repos/torvalds/linux/git/commits/5695be142e203167e3cb515ef86a88424f3524eb;https://github.com/torvalds/linux/commit/5695be142e203167e3cb515ef86a88424f3524eb
372;1079;"Changes since v1
- push the re-check loop out of freeze_processes into
  check_frozen_processes and invert the condition to make the code more
  readable as per Rafael";push the re-check loop out of freeze_processes into check_frozen_processes;to make the code more readable as per Rafael;https://api.github.com/repos/torvalds/linux/git/commits/5695be142e203167e3cb515ef86a88424f3524eb;https://github.com/torvalds/linux/commit/5695be142e203167e3cb515ef86a88424f3524eb
373;1080;mm, oom: remove unnecessary exit_state check;remove unnecessary exit_state check;unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/fb794bcbb4e5552242f9a4c5e1ffe4c6da29a968;https://github.com/torvalds/linux/commit/fb794bcbb4e5552242f9a4c5e1ffe4c6da29a968
374;1085;"Clear TIF_MEMDIE after exit_mm()'s mmput() so that an oom killed process
is no longer considered for oom kill, but only until exit_mm() has
returned";Clear TIF_MEMDIE after exit_mm()'s mmput();so that an oom killed process is no longer considered for oom kill, but only until exit_mm() has returned;https://api.github.com/repos/torvalds/linux/git/commits/fb794bcbb4e5552242f9a4c5e1ffe4c6da29a968;https://github.com/torvalds/linux/commit/fb794bcbb4e5552242f9a4c5e1ffe4c6da29a968
375;1090;"Rename try_set_zonelist_oom() to oom_zonelist_trylock() and rename
clear_zonelist_oom() to oom_zonelist_unlock() to imply there is proper
locking semantics";Rename try_set_zonelist_oom() to oom_zonelist_trylock() and rename clear_zonelist_oom() to oom_zonelist_unlock();to imply there is proper locking semantics;https://api.github.com/repos/torvalds/linux/git/commits/e972a070e2d3296cd2e2cc2fd0561ce89a1d5ebf;https://github.com/torvalds/linux/commit/e972a070e2d3296cd2e2cc2fd0561ce89a1d5ebf
376;1091;"At the same time, convert oom_zonelist_trylock() to return bool instead
of int since only success and failure are tested.";Convert oom_zonelist_trylock() to return bool instead of int;Only success and failure are tested;https://api.github.com/repos/torvalds/linux/git/commits/e972a070e2d3296cd2e2cc2fd0561ce89a1d5ebf;https://github.com/torvalds/linux/commit/e972a070e2d3296cd2e2cc2fd0561ce89a1d5ebf
377;1096;Ensure that a non-NULL zonelist is always passed to the oom killer.;Ensure that a non-NULL zonelist is always passed to the oom killer.;to always pass a non-NULL zonelist to the oom killer.;https://api.github.com/repos/torvalds/linux/git/commits/8d060bf490930f305c4efc45724e861a268f4d2f;https://github.com/torvalds/linux/commit/8d060bf490930f305c4efc45724e861a268f4d2f
378;1104;"By giving root tasks a bonus that is proportional to their actual size,
they remain comparable even when relatively small";By giving root tasks a bonus that is proportional to their actual size;they remain comparable even when relatively small;https://api.github.com/repos/torvalds/linux/git/commits/778c14affaf94a9e4953179d3e13a544ccce7707;https://github.com/torvalds/linux/commit/778c14affaf94a9e4953179d3e13a544ccce7707
379;1105;" In the example
above, the OOM killer will discount the 1M agetty's 256 badness points
down to 179, and the 10G fork bomb's 262144 points down to 183500 points
and make the right choice, instead of discounting both to 0 and killing
agetty because it's first in the task list.";The OOM killer will discount the 1M agetty's 256 badness points down to 179, and the 10G fork bomb's 262144 points down to 183500 points and make the right choice;instead of discounting both to 0 and killing agetty because it's first in the task list;https://api.github.com/repos/torvalds/linux/git/commits/778c14affaf94a9e4953179d3e13a544ccce7707;https://github.com/torvalds/linux/commit/778c14affaf94a9e4953179d3e13a544ccce7707
380;1106;mm, oom: prefer thread group leaders for display purposes;prefer thread group leaders for display purposes;for display purposes;https://api.github.com/repos/torvalds/linux/git/commits/d49ad9355420c743c736bfd1dee9eaa5b1a7722a;https://github.com/torvalds/linux/commit/d49ad9355420c743c736bfd1dee9eaa5b1a7722a
381;1107;"When two threads have the same badness score, it's preferable to kill
the thread group leader so that the actual process name is printed to
the kernel log rather than the thread group name which may be shared
amongst several processes";kill the thread group leader;the actual process name is printed to the kernel log rather than the thread group name which may be shared amongst several processes;https://api.github.com/repos/torvalds/linux/git/commits/d49ad9355420c743c736bfd1dee9eaa5b1a7722a;https://github.com/torvalds/linux/commit/d49ad9355420c743c736bfd1dee9eaa5b1a7722a
382;1108;"This was the behavior when select_bad_process() used to do
for_each_process(), but it now iterates threads instead and leads to
ambiguity.";it now iterates threads instead;leads to ambiguity;https://api.github.com/repos/torvalds/linux/git/commits/d49ad9355420c743c736bfd1dee9eaa5b1a7722a;https://github.com/torvalds/linux/commit/d49ad9355420c743c736bfd1dee9eaa5b1a7722a
383;1112;" This also allows to simplify a bit one of its
callers, oom_kill_process().";simplify a bit one of its callers, oom_kill_process();allows to simplify a bit;https://api.github.com/repos/torvalds/linux/git/commits/4d4048be8a93769350efa31d2482a038b7de73d0;https://github.com/torvalds/linux/commit/4d4048be8a93769350efa31d2482a038b7de73d0
384;1113;oom_kill: has_intersects_mems_allowed() needs rcu_read_lock();oom_kill: has_intersects_mems_allowed() needs rcu_read_lock();rcu_read_lock() is needed for has_intersects_mems_allowed();https://api.github.com/repos/torvalds/linux/git/commits/ad96244179fbd55b40c00f10f399bc04739b8e1f;https://github.com/torvalds/linux/commit/ad96244179fbd55b40c00f10f399bc04739b8e1f
385;1115;Add the necessary rcu_read_lock();Add the necessary rcu_read_lock();necessary;https://api.github.com/repos/torvalds/linux/git/commits/ad96244179fbd55b40c00f10f399bc04739b8e1f;https://github.com/torvalds/linux/commit/ad96244179fbd55b40c00f10f399bc04739b8e1f
386;1116;" This means that we can not simply
return from the loop, we need ""bool ret"" and ""break""";"we need ""bool ret"" and ""break""";we can not simply return from the loop;https://api.github.com/repos/torvalds/linux/git/commits/ad96244179fbd55b40c00f10f399bc04739b8e1f;https://github.com/torvalds/linux/commit/ad96244179fbd55b40c00f10f399bc04739b8e1f
388;1120;"Change oom_kill.c to use for_each_thread() rather than the racy
while_each_thread() which can loop forever if we race with exit";Change oom_kill.c to use for_each_thread();rather than the racy while_each_thread() which can loop forever if we race with exit;https://api.github.com/repos/torvalds/linux/git/commits/1da4db0cd5c8a31d4468ec906b413e75e604b465;https://github.com/torvalds/linux/commit/1da4db0cd5c8a31d4468ec906b413e75e604b465
389;1122;"Fortunately the new for_each_thread() only requires the stable
task_struct, so this change fixes both problems.";This change fixes both problems.;The new for_each_thread() only requires the stable task_struct;https://api.github.com/repos/torvalds/linux/git/commits/1da4db0cd5c8a31d4468ec906b413e75e604b465;https://github.com/torvalds/linux/commit/1da4db0cd5c8a31d4468ec906b413e75e604b465
390;1125;Let's convert it to atomic_long_t to avoid races.;convert it to atomic_long_t;to avoid races;https://api.github.com/repos/torvalds/linux/git/commits/e1f56c89b040134add93f686931cc266541d239a;https://github.com/torvalds/linux/commit/e1f56c89b040134add93f686931cc266541d239a
391;1139;"This patch changes the way tasks behave after detecting a memcg OOM and
makes sure nobody loops or sleeps with locks held";changes the way tasks behave after detecting a memcg OOM;makes sure nobody loops or sleeps with locks held;https://api.github.com/repos/torvalds/linux/git/commits/3812c8c8f3953921ef18544110dafc3505c1ac62;https://github.com/torvalds/linux/commit/3812c8c8f3953921ef18544110dafc3505c1ac62
392;1141;" This way, the OOM
   victim can not get stuck on locks the looping task may hold";the OOM victim can not get stuck on locks the looping task may hold;this way;https://api.github.com/repos/torvalds/linux/git/commits/3812c8c8f3953921ef18544110dafc3505c1ac62;https://github.com/torvalds/linux/commit/3812c8c8f3953921ef18544110dafc3505c1ac62
393;1145;" The OOM victim can no longer get stuck on any
   lock a sleeping task may hold";no longer get stuck on any lock;a sleeping task may hold;https://api.github.com/repos/torvalds/linux/git/commits/3812c8c8f3953921ef18544110dafc3505c1ac62;https://github.com/torvalds/linux/commit/3812c8c8f3953921ef18544110dafc3505c1ac62
396;1150;memcg, oom: provide more precise dump info while memcg oom happening;Provide more precise dump info while memcg oom happening;more precise dump info;https://api.github.com/repos/torvalds/linux/git/commits/58cf188ed649b6570dfdc9c62156cdf396c2e395;https://github.com/torvalds/linux/commit/58cf188ed649b6570dfdc9c62156cdf396c2e395
397;1152;" This patch prints
more pointed memcg page statistics for memcg-oom and take hierarchy into
consideration";None ;more pointed memcg page statistics for memcg-oom and take hierarchy into consideration;https://api.github.com/repos/torvalds/linux/git/commits/58cf188ed649b6570dfdc9c62156cdf396c2e395;https://github.com/torvalds/linux/commit/58cf188ed649b6570dfdc9c62156cdf396c2e395
398;1157;mm, oom: remove redundant sleep in pagefault oom handler;remove redundant sleep in pagefault oom handler;redundant sleep;https://api.github.com/repos/torvalds/linux/git/commits/0fa84a4bfa2aac8c04d45351b40765d61e1fd20d;https://github.com/torvalds/linux/commit/0fa84a4bfa2aac8c04d45351b40765d61e1fd20d
399;1160;mm, oom: cleanup pagefault oom handler;cleanup pagefault oom handler;mm, oom;https://api.github.com/repos/torvalds/linux/git/commits/efacd02e4f57d94e934ba5c84f10f8ce91158770;https://github.com/torvalds/linux/commit/efacd02e4f57d94e934ba5c84f10f8ce91158770
401;1166;"The code here need to handle with the nodes which have memory, we should
use N_MEMORY instead.";use N_MEMORY instead;handle with the nodes which have memory,;https://api.github.com/repos/torvalds/linux/git/commits/bd3a66c1cdf31274489cc1b5ace879695a5a1797;https://github.com/torvalds/linux/commit/bd3a66c1cdf31274489cc1b5ace879695a5a1797
403;1172;"To fix this, introduce a new oom_flags_t member in struct signal_struct
that will be used for per-thread oom killer flags";Introduce a new oom_flags_t member in struct signal_struct;To fix this, and will be used for per-thread oom killer flags;https://api.github.com/repos/torvalds/linux/git/commits/e1e12d2f3104be886073ac6c5c4678f30b1b9e51;https://github.com/torvalds/linux/commit/e1e12d2f3104be886073ac6c5c4678f30b1b9e51
406;1176;"The maximum oom_score_adj is 1000 and the minimum oom_score_adj is -1000,
so this range can be represented by the signed short type with no
functional change";The range can be represented by the signed short type;This range can be represented by the signed short type with no functional change;https://api.github.com/repos/torvalds/linux/git/commits/a9c58b907dbc6821533dfc295b63caf111ff1f16;https://github.com/torvalds/linux/commit/a9c58b907dbc6821533dfc295b63caf111ff1f16
408;1184;"Instead of special casing all the possible situations between PF_EXITING
getting set and a thread detaching its mm where it may allocate memory,
which probably wouldn't get updated when a change is made to the exit
path, the solution is to give all exiting threads access to memory
reserves if they call the oom killer";Instead of special casing all the possible situations between PF_EXITING getting set and a thread detaching its mm where it may allocate memory, the solution is to give all exiting threads access to memory reserves if they call the oom killer;which probably wouldn't get updated when a change is made to the exit path;https://api.github.com/repos/torvalds/linux/git/commits/9ff4868e3051d9128a24dd330bed32011a11421d;https://github.com/torvalds/linux/commit/9ff4868e3051d9128a24dd330bed32011a11421d
409;1185;" This allows them to quickly
allocate, detach its mm, and free the memory it represents";allocate, detach its mm, and free the memory it represents;quickly;https://api.github.com/repos/torvalds/linux/git/commits/9ff4868e3051d9128a24dd330bed32011a11421d;https://github.com/torvalds/linux/commit/9ff4868e3051d9128a24dd330bed32011a11421d
410;1189;": So instead of only deferring for PF_EXITING and !task->robust_list, it's
: better to just give them access to memory reserves to prevent a potential
: livelock so that any other faults that may be introduced in the future in
: the exit path don't cause the same problem (and hopefully we don't allow
: too many of those!).";Instead of only deferring for PF_EXITING and !task->robust_list, give them access to memory reserves;To prevent a potential livelock and avoid the same problem caused by future faults in the exit path;https://api.github.com/repos/torvalds/linux/git/commits/9ff4868e3051d9128a24dd330bed32011a11421d;https://github.com/torvalds/linux/commit/9ff4868e3051d9128a24dd330bed32011a11421d
411;1190;oom: remove deprecated oom_adj;remove deprecated oom_adj;deprecated;https://api.github.com/repos/torvalds/linux/git/commits/01dc52ebdf472f77cca623ca693ca24cfc0f1bbe;https://github.com/torvalds/linux/commit/01dc52ebdf472f77cca623ca693ca24cfc0f1bbe
415;1195;mm, oom: reduce dependency on tasklist_lock;reduce dependency on tasklist_lock;reduce dependency;https://api.github.com/repos/torvalds/linux/git/commits/6b0c81b3be114a93f79bd4c5639ade5107d77c21;https://github.com/torvalds/linux/commit/6b0c81b3be114a93f79bd4c5639ade5107d77c21
416;1196;"Since exiting tasks require write_lock_irq(&tasklist_lock) several times,
try to reduce the amount of time the readside is held for oom kills";try to reduce the amount of time the readside is held for oom kills;Since exiting tasks require write_lock_irq(&tasklist_lock) several times;https://api.github.com/repos/torvalds/linux/git/commits/6b0c81b3be114a93f79bd4c5639ade5107d77c21;https://github.com/torvalds/linux/commit/6b0c81b3be114a93f79bd4c5639ade5107d77c21
417;1209;"This patch introduces a seperate oom handler for memcgs so that they do
not require tasklist_lock for as much time";Introduces a separate oom handler for memcgs;So that they do not require tasklist_lock for as much time;https://api.github.com/repos/torvalds/linux/git/commits/9cbb78bb314360a860a8b23723971cb6fcb54176;https://github.com/torvalds/linux/commit/9cbb78bb314360a860a8b23723971cb6fcb54176
418;1212;" So while this
isn't a complete solution to tasklist_lock starvation, it significantly
reduces the amount of time that it is held.";significantly reduces the amount of time that it is held;isn't a complete solution to tasklist_lock starvation;https://api.github.com/repos/torvalds/linux/git/commits/9cbb78bb314360a860a8b23723971cb6fcb54176;https://github.com/torvalds/linux/commit/9cbb78bb314360a860a8b23723971cb6fcb54176
419;1213;mm, oom: introduce helper function to process threads during scan;introduce helper function to process threads during scan;to process threads during scan;https://api.github.com/repos/torvalds/linux/git/commits/462607ecc519b197f7b5cc6b024a1c26fa6fc0ac;https://github.com/torvalds/linux/commit/462607ecc519b197f7b5cc6b024a1c26fa6fc0ac
421;1215;" A new return type, enum oom_scan_t, is
defined to determine the future behavior of the iteration";A new return type, enum oom_scan_t, is defined;to determine the future behavior of the iteration;https://api.github.com/repos/torvalds/linux/git/commits/462607ecc519b197f7b5cc6b024a1c26fa6fc0ac;https://github.com/torvalds/linux/commit/462607ecc519b197f7b5cc6b024a1c26fa6fc0ac
423;1221;mm, oom: fix potential killing of thread that is disabled from oom killing;fix potential killing of thread that is disabled from oom killing;potential killing of thread that is disabled from oom killing;https://api.github.com/repos/torvalds/linux/git/commits/121d1ba0a019e1465a53533aea133b1b0f6b442d;https://github.com/torvalds/linux/commit/121d1ba0a019e1465a53533aea133b1b0f6b442d
424;1224;"This patch avoids killing current in such a condition and simply falls
back to the tasklist scan since memory still needs to be freed.";This patch avoids killing current in such a condition and simply falls back to the tasklist scan.;memory still needs to be freed;https://api.github.com/repos/torvalds/linux/git/commits/121d1ba0a019e1465a53533aea133b1b0f6b442d;https://github.com/torvalds/linux/commit/121d1ba0a019e1465a53533aea133b1b0f6b442d
426;1226;"Fix kernel-doc warnings such as
  Warning(../mm/page_cgroup.c:432): No description found for parameter 'id'
  Warning(../mm/page_cgroup.c:432): Excess function parameter 'mem' description in 'swap_cgroup_record'";Fix kernel-doc warnings such as;No description found for parameter 'id', Excess function parameter 'mem' description in 'swap_cgroup_record';https://api.github.com/repos/torvalds/linux/git/commits/dad7557eb705688040aac134efa5418b66d5ed92;https://github.com/torvalds/linux/commit/dad7557eb705688040aac134efa5418b66d5ed92
428;1229;"Fix this by making the type signed and return 1, meaning the thread is
still eligible for kill, if the value is negative.";Fix this by making the type signed and return 1, meaning the thread is still eligible for kill, if the value is negative.;making the type signed and return 1, meaning the thread is still eligible for kill, if the value is negative;https://api.github.com/repos/torvalds/linux/git/commits/1e11ad8dc42975d5c2bab7d478f6cd875602eda4;https://github.com/torvalds/linux/commit/1e11ad8dc42975d5c2bab7d478f6cd875602eda4
430;1240;" The rest of the users
of struct cred are left for other patches as there are too many changes to make
in one go and leave the change reviewable";The rest of the users of struct cred are left for other patches;there are too many changes to make in one go and leave the change reviewable;https://api.github.com/repos/torvalds/linux/git/commits/078de5f706ece36afd73bb4b8283314132d2dfdf;https://github.com/torvalds/linux/commit/078de5f706ece36afd73bb4b8283314132d2dfdf
431;1251;mm, oom: force oom kill on sysrq+f;force oom kill on sysrq+f;oom;https://api.github.com/repos/torvalds/linux/git/commits/08ab9b10d43aca091fdff58b69fc1ec89c5b8a83;https://github.com/torvalds/linux/commit/08ab9b10d43aca091fdff58b69fc1ec89c5b8a83
432;1257;" This
patch causes SysRq+F to always kill an eligible thread and can be used to
force a kill even if another oom killed thread has failed to exit.";This patch causes SysRq+F to always kill an eligible thread;This patch can be used to force a kill even if another oom killed thread has failed to exit.;https://api.github.com/repos/torvalds/linux/git/commits/08ab9b10d43aca091fdff58b69fc1ec89c5b8a83;https://github.com/torvalds/linux/commit/08ab9b10d43aca091fdff58b69fc1ec89c5b8a83
434;1267;"There's no need to emit any warning about the oom condition if the thread
is already exiting since it will not be killed";There's no need to emit any warning about the oom condition if the thread is already exiting;since it will not be killed;https://api.github.com/repos/torvalds/linux/git/commits/8447d950e7445cae71ad66d0e33784f8388aaf9d;https://github.com/torvalds/linux/commit/8447d950e7445cae71ad66d0e33784f8388aaf9d
435;1268;" In this condition, just
silently return the oom killer since its only giving access to memory
reserves and is otherwise a no-op.";silently return the oom killer;its only giving access to memory reserves and is otherwise a no-op;https://api.github.com/repos/torvalds/linux/git/commits/8447d950e7445cae71ad66d0e33784f8388aaf9d;https://github.com/torvalds/linux/commit/8447d950e7445cae71ad66d0e33784f8388aaf9d
436;1270;"oom_kill_task() has a single caller, so fold it into its parent function,
oom_kill_process()";fold oom_kill_task() into its parent function, oom_kill_process();oom_kill_task() has a single caller;https://api.github.com/repos/torvalds/linux/git/commits/647f2bdf4a00dbcaa8964286501d68e7d2e6da93;https://github.com/torvalds/linux/commit/647f2bdf4a00dbcaa8964286501d68e7d2e6da93
437;1272;mm, oom: avoid looping when chosen thread detaches its mm;avoid looping when chosen thread detaches its mm;mm, oom;https://api.github.com/repos/torvalds/linux/git/commits/2a1c9b1fc0a0ea2e30cdeb69062647c5c5ae661f;https://github.com/torvalds/linux/commit/2a1c9b1fc0a0ea2e30cdeb69062647c5c5ae661f
438;1274;"In such a case, it's better to just return to the page allocator and retry
the allocation because memory could have been freed in the interim and the
oom condition may no longer exist";return to the page allocator and retry the allocation;memory could have been freed in the interim and the oom condition may no longer exist;https://api.github.com/repos/torvalds/linux/git/commits/2a1c9b1fc0a0ea2e30cdeb69062647c5c5ae661f;https://github.com/torvalds/linux/commit/2a1c9b1fc0a0ea2e30cdeb69062647c5c5ae661f
440;1282;tracepoint: add tracepoints for debugging oom_score_adj;add tracepoints for debugging oom_score_adj;debugging oom_score_adj;https://api.github.com/repos/torvalds/linux/git/commits/43d2b113241d6797b890318767e0af78e313414b;https://github.com/torvalds/linux/commit/43d2b113241d6797b890318767e0af78e313414b
441;1286;This patch adds some tracepoints useful for debugging;adds some tracepoints useful for debugging;useful for debugging;https://api.github.com/repos/torvalds/linux/git/commits/43d2b113241d6797b890318767e0af78e313414b;https://github.com/torvalds/linux/commit/43d2b113241d6797b890318767e0af78e313414b
442;1290;oom: fix integer overflow of points in oom_badness;fix integer overflow of points in oom_badness;integer overflow of points in oom_badness;https://api.github.com/repos/torvalds/linux/git/commits/ff05b6f7ae762b6eb464183eec994b28ea09f6dd;https://github.com/torvalds/linux/commit/ff05b6f7ae762b6eb464183eec994b28ea09f6dd
443;1298;"The points variable should be of type long instead of int to prevent the
int overflow.";The points variable should be of type long instead of int;to prevent the int overflow;https://api.github.com/repos/torvalds/linux/git/commits/ff05b6f7ae762b6eb464183eec994b28ea09f6dd;https://github.com/torvalds/linux/commit/ff05b6f7ae762b6eb464183eec994b28ea09f6dd
445;1301;" Remove the unnecessary return value, rename, unexport and
collapse __thaw_process() into it";Remove the unnecessary return value, rename, unexport and collapse __thaw_process() into it;unnecessary return value;https://api.github.com/repos/torvalds/linux/git/commits/a5be2d0d1a8746e7be5210e3d6b904455000443c;https://github.com/torvalds/linux/commit/a5be2d0d1a8746e7be5210e3d6b904455000443c
447;1317;"To fix this, a new compare_swap_oom_score_adj() function is introduced
with the same semantics as the compare and swap CAS instruction, or
CMPXCHG on x86";A new compare_swap_oom_score_adj() function is introduced;To fix this, with the same semantics as the compare and swap CAS instruction, or CMPXCHG on x86;https://api.github.com/repos/torvalds/linux/git/commits/43362a4977e37db46f86f7e6ab935f0006956632;https://github.com/torvalds/linux/commit/43362a4977e37db46f86f7e6ab935f0006956632
448;1320;"This removes mm->oom_disable_count entirely since it's unnecessary and
currently buggy";Remove mm->oom_disable_count entirely;it's unnecessary and currently buggy;https://api.github.com/repos/torvalds/linux/git/commits/c9f01245b6a7d77d17deaa71af10f6aca14fa24e;https://github.com/torvalds/linux/commit/c9f01245b6a7d77d17deaa71af10f6aca14fa24e
449;1323;" The counter could be fixed to represent all
threads sharing the same mm, but it's better to remove the count since";Remove the count;It's better to remove the count;https://api.github.com/repos/torvalds/linux/git/commits/c9f01245b6a7d77d17deaa71af10f6aca14fa24e;https://github.com/torvalds/linux/commit/c9f01245b6a7d77d17deaa71af10f6aca14fa24e
451;1337;"Change select_bad_process() to check ->mm after TIF_MEMDIE, but skip
the tasks which have already passed exit_notify() to ensure a zombie
with TIF_MEMDIE set can't block oom-killer";Change select_bad_process() to check ->mm after TIF_MEMDIE, but skip the tasks which have already passed exit_notify();to ensure a zombie with TIF_MEMDIE set can't block oom-killer;https://api.github.com/repos/torvalds/linux/git/commits/c027a474a68065391c8773f6e83ed5412657e369;https://github.com/torvalds/linux/commit/c027a474a68065391c8773f6e83ed5412657e369
452;1341;"The prototype for the old function still existed in linux/oom.h, so remove
it";remove the prototype for the old function;the prototype still existed;https://api.github.com/repos/torvalds/linux/git/commits/11239836c04b50ba8453ec58ca7a7bd716ef02c1;https://github.com/torvalds/linux/commit/11239836c04b50ba8453ec58ca7a7bd716ef02c1
454;1346;" Kill it and directly access
->ptrace instead";Kill it and directly access;directly access;https://api.github.com/repos/torvalds/linux/git/commits/d21142ece414ce1088cfcae760689aa60d6fee80;https://github.com/torvalds/linux/commit/d21142ece414ce1088cfcae760689aa60d6fee80
455;1353;"This patch removes PF_OOM_ORIGIN since its behavior is equivalent to
setting the process's oom_score_adj to OOM_SCORE_ADJ_MAX";removes PF_OOM_ORIGIN;behavior is equivalent to setting the process's oom_score_adj to OOM_SCORE_ADJ_MAX;https://api.github.com/repos/torvalds/linux/git/commits/72788c385604523422592249c19cba0187021e9b;https://github.com/torvalds/linux/commit/72788c385604523422592249c19cba0187021e9b
457;1372;"	show_mem.c:(.text+0x1f4): multiple definition of `show_mem'
	arch/sparc/mm/built-in.o:(.text+0xd70): first defined here
The fix is to remove __show_mem() and add its argument to show_mem() in
all implementations to prevent this breakage";The fix is to remove __show_mem() and add its argument to show_mem() in all implementations;to prevent this breakage;https://api.github.com/repos/torvalds/linux/git/commits/b2b755b5f10eb32fbdc73a9907c07006b17f714b;https://github.com/torvalds/linux/commit/b2b755b5f10eb32fbdc73a9907c07006b17f714b
458;1373;"Architectures that implement their own show_mem() actually don't do
anything with the argument yet, but they could be made to filter nodes
that aren't allowed in the current context in the future just like the
generic implementation.";Architectures that implement their own show_mem() actually don't do anything with the argument yet, but they could be made to filter nodes that aren't allowed in the current context in the future just like the generic implementation.;They could be made to filter nodes that aren't allowed in the current context in the future just like the generic implementation.;https://api.github.com/repos/torvalds/linux/git/commits/b2b755b5f10eb32fbdc73a9907c07006b17f714b;https://github.com/torvalds/linux/commit/b2b755b5f10eb32fbdc73a9907c07006b17f714b
459;1375;"When a memcg is oom and current has already received a SIGKILL, then give
it access to memory reserves with a higher scheduling priority so that it
may quickly exit and free its memory";Give it access to memory reserves with a higher scheduling priority;so that it may quickly exit and free its memory;https://api.github.com/repos/torvalds/linux/git/commits/f9434ad1552427fab49336e1a6e3ef121895b9d1;https://github.com/torvalds/linux/commit/f9434ad1552427fab49336e1a6e3ef121895b9d1
460;1376;"This is identical to the global oom killer and is done even before
checking for panic_on_oom: a pending SIGKILL here while panic_on_oom is
selected is guaranteed to have come from userspace; the thread only needs
access to memory reserves to exit and thus we don't unnecessarily panic
the machine until the kernel has no last resort to free memory.";"This is identical to the global oom killer and is done even before checking for panic_on_oom: a pending SIGKILL here while panic_on_oom is selected is guaranteed to have come from userspace; the thread only needs access to memory reserves to exit and thus we don't unnecessarily panic the machine until the kernel has no last resort to free memory.";the thread only needs access to memory reserves to exit and thus we don't unnecessarily panic the machine until the kernel has no last resort to free memory;https://api.github.com/repos/torvalds/linux/git/commits/f9434ad1552427fab49336e1a6e3ef121895b9d1;https://github.com/torvalds/linux/commit/f9434ad1552427fab49336e1a6e3ef121895b9d1
461;1379;" This verbosity can often be harmful if it causes other
important messages to be scrolled from the kernel log and incurs a
signicant time delay, specifically for kernels with CONFIG_NODES_SHIFT >
This patch causes only memory information to be displayed for nodes that
are allowed by current's cpuset when dumping the VM state";This patch causes only memory information to be displayed for nodes that are allowed by current's cpuset when dumping the VM state;to prevent verbosity that can be harmful and cause other important messages to be scrolled from the kernel log and incur a significant time delay;https://api.github.com/repos/torvalds/linux/git/commits/ddd588b5dd55f14320379961e47683db4e4c1d90;https://github.com/torvalds/linux/commit/ddd588b5dd55f14320379961e47683db4e4c1d90
462;1380;" Information
for all other nodes is irrelevant to the oom condition; we don't care if
there's an abundance of memory elsewhere if we can't access it";Information for all other nodes is irrelevant to the oom condition;we don't care if there's an abundance of memory elsewhere if we can't access it;https://api.github.com/repos/torvalds/linux/git/commits/ddd588b5dd55f14320379961e47683db4e4c1d90;https://github.com/torvalds/linux/commit/ddd588b5dd55f14320379961e47683db4e4c1d90
463;1383;"Additionally, the per-cpu pageset statistics are extremely verbose in oom
killer output, so it is now suppressed";per-cpu pageset statistics are now suppressed;extremely verbose in oom killer output;https://api.github.com/repos/torvalds/linux/git/commits/ddd588b5dd55f14320379961e47683db4e4c1d90;https://github.com/torvalds/linux/commit/ddd588b5dd55f14320379961e47683db4e4c1d90
464;1391;" The oom killer does not want
to defer in this case since there is no guarantee that thread will ever
exit without intervention";The oom killer does not want to defer in this case;there is no guarantee that thread will ever exit without intervention;https://api.github.com/repos/torvalds/linux/git/commits/edd45544c6f09550df0a5491aa8a07af24767e73;https://github.com/torvalds/linux/commit/edd45544c6f09550df0a5491aa8a07af24767e73
465;1393;" It also ensures
that a child is sacrificed for the chosen parent only if it has a
different ->mm as the comment implies: this ensures that the thread group
leader is always targeted appropriately.";Sacrifice a child for the chosen parent only if it has a different mm.;This ensures that the thread group leader is always targeted appropriately.;https://api.github.com/repos/torvalds/linux/git/commits/edd45544c6f09550df0a5491aa8a07af24767e73;https://github.com/torvalds/linux/commit/edd45544c6f09550df0a5491aa8a07af24767e73
466;1394;oom: skip zombies when iterating tasklist;skip zombies when iterating tasklist;oom;https://api.github.com/repos/torvalds/linux/git/commits/30e2b41f20b6238f51e7cffb879c7a0f0073f5fe;https://github.com/torvalds/linux/commit/30e2b41f20b6238f51e7cffb879c7a0f0073f5fe
467;1396;" Memory needs to be freed, so find kill
other threads that pin the same ->mm or find another task to kill.";Find kill other threads that pin the same ->mm or find another task to kill.;Memory needs to be freed.;https://api.github.com/repos/torvalds/linux/git/commits/30e2b41f20b6238f51e7cffb879c7a0f0073f5fe;https://github.com/torvalds/linux/commit/30e2b41f20b6238f51e7cffb879c7a0f0073f5fe
468;1397;oom: prevent unnecessary oom kills or kernel panics;prevent unnecessary oom kills or kernel panics;unnecessary oom kills or kernel panics;https://api.github.com/repos/torvalds/linux/git/commits/3a5dda7a17cf3706f79b86293f29db02d61e0d48;https://github.com/torvalds/linux/commit/3a5dda7a17cf3706f79b86293f29db02d61e0d48
469;1398;"This patch prevents unnecessary oom kills or kernel panics by reverting
two commits";reverting two commits;prevents unnecessary oom kills or kernel panics;https://api.github.com/repos/torvalds/linux/git/commits/3a5dda7a17cf3706f79b86293f29db02d61e0d48;https://github.com/torvalds/linux/commit/3a5dda7a17cf3706f79b86293f29db02d61e0d48
470;1399;"	495789a5 (oom: make oom_score to per-process value)
	cef1d352 (oom: multi threaded process coredump don't make deadlock)
First, 495789a5 (oom: make oom_score to per-process value) ignores the
fact that all threads in a thread group do not necessarily exit at the
same time";Ignore the fact that all threads in a thread group do not necessarily exit at the same time;495789a5 (oom: make oom_score to per-process value);https://api.github.com/repos/torvalds/linux/git/commits/3a5dda7a17cf3706f79b86293f29db02d61e0d48;https://github.com/torvalds/linux/commit/3a5dda7a17cf3706f79b86293f29db02d61e0d48
471;1400;"It is imperative that select_bad_process() detect threads that are in the
exit path, specifically those with PF_EXITING set, to prevent needlessly
killing additional tasks";detect threads that are in the exit path, specifically those with PF_EXITING set;to prevent needlessly killing additional tasks;https://api.github.com/repos/torvalds/linux/git/commits/3a5dda7a17cf3706f79b86293f29db02d61e0d48;https://github.com/torvalds/linux/commit/3a5dda7a17cf3706f79b86293f29db02d61e0d48
476;1415;"Also, ""children has a different mm"" doesn't match the reality, we should
check child->mm != t->mm";check child->mm != t->mm;"""children has a different mm"" doesn't match the reality";https://api.github.com/repos/torvalds/linux/git/commits/dc1b83ab08f1954335692cdcd499f78c94f4c42a;https://github.com/torvalds/linux/commit/dc1b83ab08f1954335692cdcd499f78c94f4c42a
477;1416;" This check is not exactly correct if t->mm ==
NULL but this doesn't really matter, oom_kill_task() will kill them
anyway";oom_kill_task() will kill them anyway;t->mm == NULL doesn't really matter;https://api.github.com/repos/torvalds/linux/git/commits/dc1b83ab08f1954335692cdcd499f78c94f4c42a;https://github.com/torvalds/linux/commit/dc1b83ab08f1954335692cdcd499f78c94f4c42a
478;1420;"This patch reintroduces the code removed in 8c5cd6f3 (oom: oom_kill
doesn't kill vfork parent (or child)) since it is obsoleted";This patch reintroduces the code removed in 8c5cd6f3;it is obsoleted;https://api.github.com/repos/torvalds/linux/git/commits/1e99bad0d9c12a4aaa60cd812c84ef152564bcf5;https://github.com/torvalds/linux/commit/1e99bad0d9c12a4aaa60cd812c84ef152564bcf5
479;1422;" Thus, we're safe to issue a
SIGKILL to any thread sharing the same mm";Issue a SIGKILL to any thread sharing the same mm;We're safe;https://api.github.com/repos/torvalds/linux/git/commits/1e99bad0d9c12a4aaa60cd812c84ef152564bcf5;https://github.com/torvalds/linux/commit/1e99bad0d9c12a4aaa60cd812c84ef152564bcf5
481;1427;" We care more about preventing the livelock than incurring the
additional tasklist in the oom killer when a task has been killed";Preventing the livelock;caring more about preventing the livelock;https://api.github.com/repos/torvalds/linux/git/commits/1e99bad0d9c12a4aaa60cd812c84ef152564bcf5;https://github.com/torvalds/linux/commit/1e99bad0d9c12a4aaa60cd812c84ef152564bcf5
482;1430;oom: avoid killing a task if a thread sharing its mm cannot be killed;avoid killing a task if a thread sharing its mm cannot be killed;a thread sharing its mm cannot be killed;https://api.github.com/repos/torvalds/linux/git/commits/e18641e19a9204f241f04a5ac700168dcd18de4f;https://github.com/torvalds/linux/commit/e18641e19a9204f241f04a5ac700168dcd18de4f
483;1437;"The tasklist dump should be filtered to only those tasks that are eligible
for oom kill";Filter the tasklist dump to only those tasks that are eligible for oom kill.;Those tasks that are eligible for oom kill.;https://api.github.com/repos/torvalds/linux/git/commits/e85bfd3aa7a34fa963bb268a676b41694e6dcf96;https://github.com/torvalds/linux/commit/e85bfd3aa7a34fa963bb268a676b41694e6dcf96
484;1439;"In addition to suppressing irrelevant information, this also reduces
confusion since users currently don't know which tasks in the tasklist
aren't eligible for kill (such as those attached to cpusets or bound to
mempolicies with a disjoint set of mems or nodes, respectively) since that
information is not shown.";Reduces confusion;Users currently don't know which tasks in the tasklist aren't eligible for kill;https://api.github.com/repos/torvalds/linux/git/commits/e85bfd3aa7a34fa963bb268a676b41694e6dcf96;https://github.com/torvalds/linux/commit/e85bfd3aa7a34fa963bb268a676b41694e6dcf96
485;1446;"This patch ensures that the badness score of any eligible task is never 0
so the machine doesn't unnecessarily panic because it cannot find a task
to kill.";This patch ensures that the badness score of any eligible task is never 0;so the machine doesn't unnecessarily panic because it cannot find a task to kill.;https://api.github.com/repos/torvalds/linux/git/commits/f19e8aa11afa24036c6273428da51949b5acf30c;https://github.com/torvalds/linux/commit/f19e8aa11afa24036c6273428da51949b5acf30c
488;1451;oom: fix NULL pointer dereference;fix NULL pointer dereference;NULL pointer dereference;https://api.github.com/repos/torvalds/linux/git/commits/be71cf2202971e50ce4953d473649c724799eb8a;https://github.com/torvalds/linux/commit/be71cf2202971e50ce4953d473649c724799eb8a
489;1460;" The goal is to
make it as simple and predictable as possible so the results are better
understood and we end up killing the task which will lead to the most
memory freeing while still respecting the fine-tuning from userspace";make it as simple and predictable as possible;so the results are better understood and we end up killing the task which will lead to the most memory freeing while still respecting the fine-tuning from userspace;https://api.github.com/repos/torvalds/linux/git/commits/a63d83f427fbce97a6cea0db2e64b0eb8435cd10;https://github.com/torvalds/linux/commit/a63d83f427fbce97a6cea0db2e64b0eb8435cd10
491;1463;" This helps specifically in cases where KDE or
GNOME is chosen for oom kill on desktop systems instead of a memory
hogging task";KDE or GNOME is chosen for oom kill on desktop systems;help specifically in cases where;https://api.github.com/repos/torvalds/linux/git/commits/a63d83f427fbce97a6cea0db2e64b0eb8435cd10;https://github.com/torvalds/linux/commit/a63d83f427fbce97a6cea0db2e64b0eb8435cd10
492;1469;" In the event of two tasks consuming similar amounts of
memory, it is generally better to save root's task";save root's task;better to save;https://api.github.com/repos/torvalds/linux/git/commits/a63d83f427fbce97a6cea0db2e64b0eb8435cd10;https://github.com/torvalds/linux/commit/a63d83f427fbce97a6cea0db2e64b0eb8435cd10
493;1470;"Because of the change in the badness() heuristic's baseline, it is also
necessary to introduce a new user interface to tune it";introduce a new user interface to tune it;Because of the change in the badness() heuristic's baseline;https://api.github.com/repos/torvalds/linux/git/commits/a63d83f427fbce97a6cea0db2e64b0eb8435cd10;https://github.com/torvalds/linux/commit/a63d83f427fbce97a6cea0db2e64b0eb8435cd10
494;1471;" It's not possible
to redefine the meaning of /proc/pid/oom_adj with a new scale since the
ABI cannot be changed for backward compatability";Redefine the meaning of /proc/pid/oom_adj with a new scale;The ABI cannot be changed for backward compatibility;https://api.github.com/repos/torvalds/linux/git/commits/a63d83f427fbce97a6cea0db2e64b0eb8435cd10;https://github.com/torvalds/linux/commit/a63d83f427fbce97a6cea0db2e64b0eb8435cd10
495;1478;" This is required
so the ABI is not broken with userspace applications and allows oom_adj to
be deprecated for future removal.";ABI is not broken with userspace applications and allows oom_adj to be deprecated for future removal;This is required;https://api.github.com/repos/torvalds/linux/git/commits/a63d83f427fbce97a6cea0db2e64b0eb8435cd10;https://github.com/torvalds/linux/commit/a63d83f427fbce97a6cea0db2e64b0eb8435cd10
497;1487;I think we can remove this dubious PF_EXITING check;Remove this dubious PF_EXITING check;dubious;https://api.github.com/repos/torvalds/linux/git/commits/cef1d3523d33ebc35fc29e454b1f4bab953fabbf;https://github.com/torvalds/linux/commit/cef1d3523d33ebc35fc29e454b1f4bab953fabbf
498;1488;"but as first step,
This patch add the protection of multi threaded issue.";add the protection of multi threaded issue;protection of multi threaded issue;https://api.github.com/repos/torvalds/linux/git/commits/cef1d3523d33ebc35fc29e454b1f4bab953fabbf;https://github.com/torvalds/linux/commit/cef1d3523d33ebc35fc29e454b1f4bab953fabbf
499;1493;"It sounds plausible giving the dying task an even higher priority to be
sure it will be scheduled sooner and free the desired memory";giving the dying task an even higher priority;to be sure it will be scheduled sooner and free the desired memory;https://api.github.com/repos/torvalds/linux/git/commits/93b43fa55088fe977503a156d1097cc2055449a2;https://github.com/torvalds/linux/commit/93b43fa55088fe977503a156d1097cc2055449a2
500;1494;" It was
suggested on LKML using SCHED_FIFO:1, the lowest RT priority so that this
task won't interfere with any running RT task";Using SCHED_FIFO:1 with the lowest RT priority;This task won't interfere with any running RT task;https://api.github.com/repos/torvalds/linux/git/commits/93b43fa55088fe977503a156d1097cc2055449a2;https://github.com/torvalds/linux/commit/93b43fa55088fe977503a156d1097cc2055449a2
501;1496;" Another good
suggestion, implemented here, was to avoid boosting the dying task
priority in case of mem_cgroup OOM.";to avoid boosting the dying task priority in case of mem_cgroup OOM;Another good suggestion implemented here;https://api.github.com/repos/torvalds/linux/git/commits/93b43fa55088fe977503a156d1097cc2055449a2;https://github.com/torvalds/linux/commit/93b43fa55088fe977503a156d1097cc2055449a2
503;1499; But we don't have any reason to don't consider vfork();consider vfork();we don't have any reason;https://api.github.com/repos/torvalds/linux/git/commits/19b4586cd9c8ed642798902e55c6f61ed576ad93;https://github.com/torvalds/linux/commit/19b4586cd9c8ed642798902e55c6f61ed576ad93
504;1501;oom: cleanup has_intersects_mems_allowed();cleanup has_intersects_mems_allowed();oom;https://api.github.com/repos/torvalds/linux/git/commits/df1090a8dda40b6e11d8cd09e8fc900cfe913b38;https://github.com/torvalds/linux/commit/df1090a8dda40b6e11d8cd09e8fc900cfe913b38
505;1502;"presently has_intersects_mems_allowed() has own thread iterate logic, but
it should use while_each_thread()";has_intersects_mems_allowed() should use while_each_thread();has own thread iterate logic;https://api.github.com/repos/torvalds/linux/git/commits/df1090a8dda40b6e11d8cd09e8fc900cfe913b38;https://github.com/torvalds/linux/commit/df1090a8dda40b6e11d8cd09e8fc900cfe913b38
507;1507;oom: kill duplicate OOM_DISABLE check;kill duplicate OOM_DISABLE check;duplicate;https://api.github.com/repos/torvalds/linux/git/commits/113e27f36dff9895049df324f292474854750d21;https://github.com/torvalds/linux/commit/113e27f36dff9895049df324f292474854750d21
508;1510;oom: /proc/<pid>/oom_score treat kernel thread honestly;treat kernel thread honestly;/proc/<pid>/oom_score;https://api.github.com/repos/torvalds/linux/git/commits/26ebc984913b6a8d86d724b3a79d2ed4ed574612;https://github.com/torvalds/linux/commit/26ebc984913b6a8d86d724b3a79d2ed4ed574612
510;1518;oom: oom_kill_process() needs to check that p is unkillable;oom_kill_process() needs to check that p is unkillable;needs to check that p is unkillable;https://api.github.com/repos/torvalds/linux/git/commits/f88ccad5886d5a864b8b0d48c666ee9998dec53f;https://github.com/torvalds/linux/commit/f88ccad5886d5a864b8b0d48c666ee9998dec53f
513;1528;oom: don't try to kill oom_unkillable child;don't try to kill oom_unkillable child;oom_unkillable;https://api.github.com/repos/torvalds/linux/git/commits/7c59aec830c7ed6c745bd513982cee3563ed20c1;https://github.com/torvalds/linux/commit/7c59aec830c7ed6c745bd513982cee3563ed20c1
514;1531;This patch fixes it.;Fix it.;Fixes;https://api.github.com/repos/torvalds/linux/git/commits/7c59aec830c7ed6c745bd513982cee3563ed20c1;https://github.com/torvalds/linux/commit/7c59aec830c7ed6c745bd513982cee3563ed20c1
515;1533;"__out_of_memory() only has a single caller, so fold it into
out_of_memory() and add a comment about locking for its call to
oom_kill_process().";Fold __out_of_memory() into out_of_memory() and add a comment about locking for its call to oom_kill_process();__out_of_memory() only has a single caller;https://api.github.com/repos/torvalds/linux/git/commits/0aad4b3124850e85fe54e610802f0917ce46a1ae;https://github.com/torvalds/linux/commit/0aad4b3124850e85fe54e610802f0917ce46a1ae
516;1541;oom: remove unnecessary code and cleanup;remove unnecessary code and cleanup;unnecessary code and cleanup;https://api.github.com/repos/torvalds/linux/git/commits/b940fd703572f7f9e5f894c682c91c3cbd84c11e;https://github.com/torvalds/linux/commit/b940fd703572f7f9e5f894c682c91c3cbd84c11e
517;1542;Remove the redundancy in __oom_kill_task() since;Remove the redundancy in __oom_kill_task();redundancy;https://api.github.com/repos/torvalds/linux/git/commits/b940fd703572f7f9e5f894c682c91c3cbd84c11e;https://github.com/torvalds/linux/commit/b940fd703572f7f9e5f894c682c91c3cbd84c11e
518;1544;"Also moves the kernel log message to a higher level since the verbosity is
not always emitted here; we need not print an error message if an exiting
task is given a longer timeslice";moves the kernel log message to a higher level;verbosity is not always emitted here;https://api.github.com/repos/torvalds/linux/git/commits/b940fd703572f7f9e5f894c682c91c3cbd84c11e;https://github.com/torvalds/linux/commit/b940fd703572f7f9e5f894c682c91c3cbd84c11e
519;1545;"__oom_kill_task() only has a single caller, so it can be merged into that
function at the same time.";it can be merged into that function at the same time;__oom_kill_task() only has a single caller;https://api.github.com/repos/torvalds/linux/git/commits/b940fd703572f7f9e5f894c682c91c3cbd84c11e;https://github.com/torvalds/linux/commit/b940fd703572f7f9e5f894c682c91c3cbd84c11e
520;1548;" It's better to extract this to a helper function
to remove all the confusion as to its semantics";Extract this to a helper function;to remove all the confusion as to its semantics;https://api.github.com/repos/torvalds/linux/git/commits/309ed882508cc471320ff79265e7340774d6746c;https://github.com/torvalds/linux/commit/309ed882508cc471320ff79265e7340774d6746c
521;1549;"Also fix a call to dump_header() where tasklist_lock is not read- locked,
as required";fix a call to dump_header() where tasklist_lock is not read-locked;tasklist_lock is not read-locked, as required;https://api.github.com/repos/torvalds/linux/git/commits/309ed882508cc471320ff79265e7340774d6746c;https://github.com/torvalds/linux/commit/309ed882508cc471320ff79265e7340774d6746c
522;1553;"It emits useful information such as each eligible thread's memory usage
that can determine why the system is oom, so it should be enabled by
default.";It should be enabled by default;It emits useful information such as each eligible thread's memory usage that can determine why the system is oom;https://api.github.com/repos/torvalds/linux/git/commits/ad915c432eccb482427c1bbd77c74e6f7bfe60b3;https://github.com/torvalds/linux/commit/ad915c432eccb482427c1bbd77c74e6f7bfe60b3
523;1557;"In such situations, it is better to scan the tasklist for nodes that are
allowed to allocate on current's set of nodes and kill the task with the
highest badness() score";"scan the tasklist for nodes that are allowed to allocate on current's set of nodes and kill the task with the highest badness() score
";it is better to allocate resources to tasks with a lower score and remove tasks with the highest badness() score.;https://api.github.com/repos/torvalds/linux/git/commits/6f48d0ebd907ae419387f27b602ee98870cfa7bb;https://github.com/torvalds/linux/commit/6f48d0ebd907ae419387f27b602ee98870cfa7bb
524;1558;" This ensures that the most memory-hogging task,
or the one configured by the user with /proc/pid/oom_adj, is always
selected in such scenarios.";the most memory-hogging task, or the one configured by the user with /proc/pid/oom_adj, is always selected in such scenarios;This ensures;https://api.github.com/repos/torvalds/linux/git/commits/6f48d0ebd907ae419387f27b602ee98870cfa7bb;https://github.com/torvalds/linux/commit/6f48d0ebd907ae419387f27b602ee98870cfa7bb
526;1573;" To use a sane heuristic, we must ensure that killing a
task would likely free memory for current and avoid needlessly killing
others at all costs just because their potential memory freeing is
unknown";Use a sane heuristic, ensure that killing a task would likely free memory for current and avoid needlessly killing others at all costs;To use a sane heuristic, ensure that killing a task would likely free memory for current and avoid needlessly killing others at all costs because their potential memory freeing is unknown;https://api.github.com/repos/torvalds/linux/git/commits/6cf86ac6f36b638459a9a6c2576d5e655d41d451;https://github.com/torvalds/linux/commit/6cf86ac6f36b638459a9a6c2576d5e655d41d451
527;1574; It is better to kill current than another task needlessly.;Kill current;It is better than another task needlessly.;https://api.github.com/repos/torvalds/linux/git/commits/6cf86ac6f36b638459a9a6c2576d5e655d41d451;https://github.com/torvalds/linux/commit/6cf86ac6f36b638459a9a6c2576d5e655d41d451
528;1577;" Instead, simply set TIF_MEMDIE so it has access to memory
reserves and can quickly exit as the comment implies.";set TIF_MEMDIE;access to memory reserves and can quickly exit as the comment implies;https://api.github.com/repos/torvalds/linux/git/commits/4358997ae38a1901498d128d6508119d9f318b36;https://github.com/torvalds/linux/commit/4358997ae38a1901498d128d6508119d9f318b36
529;1585;" Upon returning to the page allocator, its allocation will
hopefully succeed so it can quickly exit and free its memory";"Upon returning to the page allocator, its allocation will hopefully succeed
";so it can quickly exit and free its memory;https://api.github.com/repos/torvalds/linux/git/commits/7b98c2e402eaa1f2beec18b1bde17f74948a19db;https://github.com/torvalds/linux/commit/7b98c2e402eaa1f2beec18b1bde17f74948a19db
530;1587;oom: dump_tasks use find_lock_task_mm too fix;"fix
";use find_lock_task_mm too;https://api.github.com/repos/torvalds/linux/git/commits/c81fac5cb8c92b8b4795ac250a46c7514d1fce06;https://github.com/torvalds/linux/commit/c81fac5cb8c92b8b4795ac250a46c7514d1fce06
531;1588;"When find_lock_task_mm() returns a thread other than p in dump_tasks(),
its name should be displayed instead";When find_lock_task_mm() returns a thread other than p in dump_tasks(), its name should be displayed instead;the name should be displayed instead;https://api.github.com/repos/torvalds/linux/git/commits/c81fac5cb8c92b8b4795ac250a46c7514d1fce06;https://github.com/torvalds/linux/commit/c81fac5cb8c92b8b4795ac250a46c7514d1fce06
533;1591;While we're here, remove the cast on task_cpu(task) as Andrew suggested.;remove the cast on task_cpu(task) as Andrew suggested;as Andrew suggested;https://api.github.com/repos/torvalds/linux/git/commits/c81fac5cb8c92b8b4795ac250a46c7514d1fce06;https://github.com/torvalds/linux/commit/c81fac5cb8c92b8b4795ac250a46c7514d1fce06
535;1593;"The comments in dump_tasks() should be updated to be more clear about why
tasks are filtered and how they are filtered by its argument";The comments in dump_tasks() should be updated;to be more clear about why tasks are filtered and how they are filtered by its argument;https://api.github.com/repos/torvalds/linux/git/commits/74ab7f1d3f22ccb02f8b14f1f2375416b1ab0adb;https://github.com/torvalds/linux/commit/74ab7f1d3f22ccb02f8b14f1f2375416b1ab0adb
536;1594;"An unnecessary comment concerning a check for is_global_init() is removed
since it isn't of importance.";An unnecessary comment concerning a check for is_global_init() is removed;it isn't of importance;https://api.github.com/repos/torvalds/linux/git/commits/74ab7f1d3f22ccb02f8b14f1f2375416b1ab0adb;https://github.com/torvalds/linux/commit/74ab7f1d3f22ccb02f8b14f1f2375416b1ab0adb
539;1604;"- Remove the ""if (!p->mm)"" check in select_bad_process(), it is
  just wrong";"Remove the ""if (!p->mm)"" check in select_bad_process()";it is just wrong;https://api.github.com/repos/torvalds/linux/git/commits/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03;https://github.com/torvalds/linux/commit/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03
540;1605;"- Add the new helper, find_lock_task_mm(), which finds the live
  thread which uses the memory and takes task_lock() to pin ->mm
- change oom_badness() to use this helper instead of just checking
  ->mm != NULL";Add the new helper, find_lock_task_mm();"finds the live thread which uses the memory and takes task_lock() to pin ->mm

Decision: change oom_badness()";https://api.github.com/repos/torvalds/linux/git/commits/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03;https://github.com/torvalds/linux/commit/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03
541;1609;"	- oom_badness() was fixed, but oom_kill_task() still ignores
	  the task without ->mm
	- oom_forkbomb_penalty() should use find_lock_task_mm() too,
	  and it also needs other changes to actually find the first
	  first-descendant children
This will be addressed later.";oom_badness() was fixed;"but oom_kill_task() still ignores the task without ->mm

Decision: oom_forkbomb_penalty() should use find_lock_task_mm() too and it also needs other changes";https://api.github.com/repos/torvalds/linux/git/commits/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03;https://github.com/torvalds/linux/commit/dd8e8f405ca386c7ce7cbb996ccd985d283b0e03
542;1610;oom: PF_EXITING check should take mm into account;oom: PF_EXITING check should take mm into account;take mm into account;https://api.github.com/repos/torvalds/linux/git/commits/b52279406e77be711c068f9a8e970ea6471e089c;https://github.com/torvalds/linux/commit/b52279406e77be711c068f9a8e970ea6471e089c
543;1612;"	- a single process P with the dead group leader disables
	  select_bad_process() completely, it will always return
	  ERR_PTR() while P can live forever
	- if the PF_EXITING task has already released its ->mm
	  it doesn't make sense to expect it is goiing to free
	  more memory (except task_struct/etc)
Change the code to ignore the PF_EXITING tasks without ->mm.";Change the code to ignore the PF_EXITING tasks without ->mm.;PF_EXITING tasks without ->mm should not be expected to free more memory.;https://api.github.com/repos/torvalds/linux/git/commits/b52279406e77be711c068f9a8e970ea6471e089c;https://github.com/torvalds/linux/commit/b52279406e77be711c068f9a8e970ea6471e089c
544;1618;include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h;Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h;Prepare for breaking implicit slab.h inclusion from percpu.h;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
545;1622;" Prepare for
this change by updating users of gfp and slab facilities include those
headers directly instead of assuming availability";update users of gfp and slab facilities include those headers directly;Prepare for this change;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
546;1623;" As this conversion
needs to touch large number of source files, the following script is
used as the basis of conversion";As this conversion needs to touch large number of source files;needs to touch large number of source files;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
547;1625;  only the necessary includes are there;only the necessary includes are there;necessary;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
548;1627;"  blocks and try to put the new include such that its order conforms
  to its surrounding";Put the new include;Conform to its surrounding;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
549;1629;"  because the file doesn't have fitting include block), it prints out
  an error message indicating which .h file needs to be added to the
  file";prints out an error message indicating which .h file needs to be added to the file;the file doesn't have fitting include block;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
555;1644;" CONFIG_GCOV_KERNEL was turned off for all tests (as my
   distributed build env didn't work with gcov compiles) and a few
   more options had to be turned off depending on archs to make things
   build (like ipr on powerpc/64 which failed due to missing writeq)";CONFIG_GCOV_KERNEL was turned off for all tests;"my distributed build env didn't work with gcov compiles

Decision: a few more options had to be turned off depending on archs";https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
556;1645;"percpu.h modifications were reverted so that it could be applied as
   a separate patch and serve as bisection point";percpu.h modifications were reverted;so that it could be applied as a separate patch and serve as bisection point;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
557;1646;"Given the fact that I had only a couple of failures from tests on step
6, I'm fairly confident about the coverage of this conversion patch";I'm fairly confident about the coverage of this conversion patch;Given the fact that I had only a couple of failures from tests on step 6;https://api.github.com/repos/torvalds/linux/git/commits/5a0e3ad6af8660be21ca98a971cd00f331318c05;https://github.com/torvalds/linux/commit/5a0e3ad6af8660be21ca98a971cd00f331318c05
561;1675;"This patch is for reducing patch size in future patch to modify
implementation of per-mm counter.";modify implementation of per-mm counter;reducing patch size in future patch;https://api.github.com/repos/torvalds/linux/git/commits/d559db086ff5be9bcc259e5aa50bf3d881eaf1d1;https://github.com/torvalds/linux/commit/d559db086ff5be9bcc259e5aa50bf3d881eaf1d1
562;1676;memcg: fix oom killing a child process in an other cgroup;fix oom killing a child process in an other cgroup;memcg, oom killing, child process, other cgroup;https://api.github.com/repos/torvalds/linux/git/commits/5a2d41961dd6815b874b5c0afec0ac96cd90eea4;https://github.com/torvalds/linux/commit/5a2d41961dd6815b874b5c0afec0ac96cd90eea4
565;1686;" This patch is a fix for
this bug";fix for this bug;fix;https://api.github.com/repos/torvalds/linux/git/commits/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed;https://github.com/torvalds/linux/commit/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed
566;1687;" And this patch also fixes the arg for
mem_cgroup_print_oom_info()";fixes the arg for mem_cgroup_print_oom_info();fixes;https://api.github.com/repos/torvalds/linux/git/commits/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed;https://github.com/torvalds/linux/commit/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed
567;1688;" We should print information of mem_cgroup
which the task being killed, not current, belongs to.";Print information of mem_cgroup;The task being killed, not current, belongs to mem_cgroup;https://api.github.com/repos/torvalds/linux/git/commits/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed;https://github.com/torvalds/linux/commit/d31f56dbf8bafaacb0c617f9a6f137498d5c7aed
568;1689;oom-kill: fix NUMA constraint check with nodemask;fix NUMA constraint check with nodemask;NUMA constraint check with nodemask;https://api.github.com/repos/torvalds/linux/git/commits/4365a5676fa3aa1d5ae6c90c22a0044f09ba584e;https://github.com/torvalds/linux/commit/4365a5676fa3aa1d5ae6c90c22a0044f09ba584e
569;1690;"Fix node-oriented allocation handling in oom-kill.c I myself think of this
as a bugfix not as an ehnancement";Fix node-oriented allocation handling in oom-kill.c;bugfix;https://api.github.com/repos/torvalds/linux/git/commits/4365a5676fa3aa1d5ae6c90c22a0044f09ba584e;https://github.com/torvalds/linux/commit/4365a5676fa3aa1d5ae6c90c22a0044f09ba584e
570;1703;" This patch
adds vsz and rss information to the oom log to help this analysis";adds vsz and rss information to the oom log;to help this analysis;https://api.github.com/repos/torvalds/linux/git/commits/3b4798cbc13dd8d1150aa6377f97f0e11450a67d;https://github.com/torvalds/linux/commit/3b4798cbc13dd8d1150aa6377f97f0e11450a67d
571;1710;"This patch displays the oom killer header whenever it panics so that bug
reports can include pertinent information to debug the issue, if possible.";This patch displays the oom killer header whenever it panics;bug reports can include pertinent information to debug the issue, if possible;https://api.github.com/repos/torvalds/linux/git/commits/1b604d75bbb6e28628c5a95a433432973c33d581;https://github.com/torvalds/linux/commit/1b604d75bbb6e28628c5a95a433432973c33d581
574;1723;" it makes consistency more and makes speed up
select_bad_process().";select_bad_process();it makes consistency more and makes speed up;https://api.github.com/repos/torvalds/linux/git/commits/495789a51a91cb8c015d8d77fecbac1caf20b186;https://github.com/torvalds/linux/commit/495789a51a91cb8c015d8d77fecbac1caf20b186
575;1731;The fact is, select_bad_process() must select killable task;select_bad_process() must select killable task;killable task;https://api.github.com/repos/torvalds/linux/git/commits/28b83c5193e7ab951e402252278f2cc79dc4d298;https://github.com/torvalds/linux/commit/28b83c5193e7ab951e402252278f2cc79dc4d298
576;1734;" it should be
per-process value because OOM-killer kill a process, not thread";it should be per-process value;OOM-killer kill a process, not thread;https://api.github.com/repos/torvalds/linux/git/commits/28b83c5193e7ab951e402252278f2cc79dc4d298;https://github.com/torvalds/linux/commit/28b83c5193e7ab951e402252278f2cc79dc4d298
577;1735;" Thus
This patch moves oomkilladj (now more appropriately named oom_adj) from
struct task_struct to struct signal_struct";moves oomkilladj (now more appropriately named oom_adj) from struct task_struct to struct signal_struct;more appropriately named;https://api.github.com/repos/torvalds/linux/git/commits/28b83c5193e7ab951e402252278f2cc79dc4d298;https://github.com/torvalds/linux/commit/28b83c5193e7ab951e402252278f2cc79dc4d298
579;1739;"So treat unmerge_and_remove_all_rmap_items() in the same way that we treat
try_to_unuse(): generalize PF_SWAPOFF to PF_OOM_ORIGIN, and bracket both
with that, to ask the OOM killer to kill them first, to prevent them from
spawning more and more OOM kills.";"treat unmerge_and_remove_all_rmap_items() in the same way that we treat try_to_unuse()
";generalize PF_SWAPOFF to PF_OOM_ORIGIN, and bracket both with that, to ask the OOM killer to kill them first, to prevent them from spawning more and more OOM kills.;https://api.github.com/repos/torvalds/linux/git/commits/35451beecbd7c86ce3249d543594517a5fe9a0cd;https://github.com/torvalds/linux/commit/35451beecbd7c86ce3249d543594517a5fe9a0cd
581;1753;oom: only oom kill exiting tasks with attached memory;Only oom kill exiting tasks with attached memory;oom;https://api.github.com/repos/torvalds/linux/git/commits/81236810226f71bd9ff77321c8e8276dae7efc61;https://github.com/torvalds/linux/commit/81236810226f71bd9ff77321c8e8276dae7efc61
582;1756;" Although its possible for the mm to become detached later since
task_lock() is not held, __oom_kill_task() will simply be a no-op in such
circumstances";__oom_kill_task() will simply be a no-op in such circumstances;mm can become detached later since task_lock() is not held;https://api.github.com/repos/torvalds/linux/git/commits/81236810226f71bd9ff77321c8e8276dae7efc61;https://github.com/torvalds/linux/commit/81236810226f71bd9ff77321c8e8276dae7efc61
583;1757;"Subsequently, it is no longer necessary to warn about killing mm-less
tasks since it is a no-op.";it is no longer necessary to warn about killing mm-less tasks;it is a no-op;https://api.github.com/repos/torvalds/linux/git/commits/81236810226f71bd9ff77321c8e8276dae7efc61;https://github.com/torvalds/linux/commit/81236810226f71bd9ff77321c8e8276dae7efc61
584;1758;oom: avoid unnecessary mm locking and scanning for OOM_DISABLE;avoid unnecessary mm locking and scanning for OOM_DISABLE;unnecessary mm locking and scanning for OOM_DISABLE;https://api.github.com/repos/torvalds/linux/git/commits/4d8b9135c30ccbe46e621fefd862969819003fd6;https://github.com/torvalds/linux/commit/4d8b9135c30ccbe46e621fefd862969819003fd6
585;1759;"This moves the check for OOM_DISABLE to the badness heuristic so it is
only necessary to hold task_lock() once";Move the check for OOM_DISABLE to the badness heuristic;Reduce the number of times task_lock() needs to be held;https://api.github.com/repos/torvalds/linux/git/commits/4d8b9135c30ccbe46e621fefd862969819003fd6;https://github.com/torvalds/linux/commit/4d8b9135c30ccbe46e621fefd862969819003fd6
587;1761;"This requires that tasks with badness scores of 0 are prohibited from
being oom killed, which makes sense since they would not allow for future
memory freeing anyway";tasks with badness scores of 0 are prohibited from being oom killed;they would not allow for future memory freeing anyway;https://api.github.com/repos/torvalds/linux/git/commits/4d8b9135c30ccbe46e621fefd862969819003fd6;https://github.com/torvalds/linux/commit/4d8b9135c30ccbe46e621fefd862969819003fd6
588;1762;"Since the oom_adj value is a characteristic of an mm and not a task, it is
no longer necessary to check the oom_adj value for threads sharing the
same memory (except when simply issuing SIGKILLs for threads in other
thread groups).";it is no longer necessary to check the oom_adj value for threads sharing the same memory (except when simply issuing SIGKILLs for threads in other thread groups);the oom_adj value is a characteristic of an mm and not a task;https://api.github.com/repos/torvalds/linux/git/commits/4d8b9135c30ccbe46e621fefd862969819003fd6;https://github.com/torvalds/linux/commit/4d8b9135c30ccbe46e621fefd862969819003fd6
589;1766;"This patch moves oomkilladj (now more appropriately named oom_adj) from
struct task_struct to struct mm_struct";Move oomkilladj (now more appropriately named oom_adj) from struct task_struct to struct mm_struct;more appropriately named;https://api.github.com/repos/torvalds/linux/git/commits/2ff05b2b4eac2e63d345fc731ea151a060247f53;https://github.com/torvalds/linux/commit/2ff05b2b4eac2e63d345fc731ea151a060247f53
593;1770;"Taking task_lock() in select_bad_process() to check for OOM_DISABLE and in
oom_kill_task() to check for threads sharing the same memory will be
removed in the next patch in this series where it will no longer be
necessary";Taking task_lock() in select_bad_process() to check for OOM_DISABLE and in oom_kill_task() to check for threads sharing the same memory will be removed in the next patch in this series ;it will no longer be necessary;https://api.github.com/repos/torvalds/linux/git/commits/2ff05b2b4eac2e63d345fc731ea151a060247f53;https://github.com/torvalds/linux/commit/2ff05b2b4eac2e63d345fc731ea151a060247f53
594;1771;"Writing to /proc/pid/oom_adj for a kthread will now return -EINVAL since
these threads are immune from oom killing already";Writing to /proc/pid/oom_adj for a kthread will now return -EINVAL;these threads are immune from oom killing already;https://api.github.com/repos/torvalds/linux/git/commits/2ff05b2b4eac2e63d345fc731ea151a060247f53;https://github.com/torvalds/linux/commit/2ff05b2b4eac2e63d345fc731ea151a060247f53
595;1773;oom: fix possible oom_dump_tasks NULL pointer;fix possible oom_dump_tasks NULL pointer;possible oom_dump_tasks NULL pointer;https://api.github.com/repos/torvalds/linux/git/commits/6d2661ede5f20f968422e790af3334908c3bc857;https://github.com/torvalds/linux/commit/6d2661ede5f20f968422e790af3334908c3bc857
597;1785;There is no need to call for int_sqrt if argument is 0.;There is no need to call for int_sqrt;if argument is 0;https://api.github.com/repos/torvalds/linux/git/commits/a12888f772dab4bf5e6f73668dc4f5f6026a7014;https://github.com/torvalds/linux/commit/a12888f772dab4bf5e6f73668dc4f5f6026a7014
598;1786;memcg: avoid deadlock caused by race between oom and cpuset_attach;avoid deadlock caused by race between oom and cpuset_attach;race between oom and cpuset_attach;https://api.github.com/repos/torvalds/linux/git/commits/7f4d454dee2e0bdd21bafd413d1c53e443a26540;https://github.com/torvalds/linux/commit/7f4d454dee2e0bdd21bafd413d1c53e443a26540
599;1793;This patch avoid this deadlock by;avoid this deadlock;This patch;https://api.github.com/repos/torvalds/linux/git/commits/7f4d454dee2e0bdd21bafd413d1c53e443a26540;https://github.com/torvalds/linux/commit/7f4d454dee2e0bdd21bafd413d1c53e443a26540
600;1796;memcg: avoid unnecessary system-wide-oom-killer;avoid unnecessary system-wide-oom-killer;unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/a636b327f731143ccc544b966cfd8de6cb6d72c6;https://github.com/torvalds/linux/commit/a636b327f731143ccc544b966cfd8de6cb6d72c6
604;1805;We also print the task's cpuset name for informational purposes.;Print the task's cpuset name for informational purposes;for informational purposes;https://api.github.com/repos/torvalds/linux/git/commits/75aa199410359dc5fbcf9025ff7af98a9d20f0d5;https://github.com/torvalds/linux/commit/75aa199410359dc5fbcf9025ff7af98a9d20f0d5
606;1807;zone_scan_mutex is actually a spinlock, so name it appropriately.;name it appropriately;zone_scan_mutex is actually a spinlock;https://api.github.com/repos/torvalds/linux/git/commits/c7d4caeb1d68d07f77cc09fc20b7759d6d7aa3b1;https://github.com/torvalds/linux/commit/c7d4caeb1d68d07f77cc09fc20b7759d6d7aa3b1
607;1810;"With increasingly sophisticated oom behaviour (cpusets, memory cgroups,
oom killing throttling, oom priority adjustment or selective disabling,
panic on oom, etc), it's silly to unconditionally kill the faulting
process at page fault time";it's silly to unconditionally kill the faulting process at page fault time;With increasingly sophisticated oom behaviour;https://api.github.com/repos/torvalds/linux/git/commits/1c0fe6e3bda0464728c23c8d84aa47567e8b716c;https://github.com/torvalds/linux/commit/1c0fe6e3bda0464728c23c8d84aa47567e8b716c
611;1822;"these are not security decisions and LSMs should not record if they fall
the request they should use the new has_capability_noaudit() interface so
the denials will not be recorded.";LSMs should use the new has_capability_noaudit() interface;The denials will not be recorded;https://api.github.com/repos/torvalds/linux/git/commits/a2f2945a99057c7d44043465906c6bb63c3368a0;https://github.com/torvalds/linux/commit/a2f2945a99057c7d44043465906c6bb63c3368a0
613;1824;Paramter @mem has been removed since v2.6.26, now delete it's comment.;Remove the parameter @mem;removed since v2.6.26;https://api.github.com/repos/torvalds/linux/git/commits/fbdd12676c83df77480f00ebd32fc98fbe3bf836;https://github.com/torvalds/linux/commit/fbdd12676c83df77480f00ebd32fc98fbe3bf836
614;1826;"When /proc/sys/vm/oom_dump_tasks is enabled, it's only necessary to dump
task state information for thread group leaders";dump task state information for thread group leaders;When /proc/sys/vm/oom_dump_tasks is enabled, it's only necessary;https://api.github.com/repos/torvalds/linux/git/commits/b4416d2bea007f07f2e74cdc4cb64042ec996c83;https://github.com/torvalds/linux/commit/b4416d2bea007f07f2e74cdc4cb64042ec996c83
616;1829;"Fix the setting of PF_SUPERPRIV by __capable() as it could corrupt the flags
the target process if that is not the current process and it is trying to
change its own flags in a different way at the same time";Fix the setting of PF_SUPERPRIV by __capable();it could corrupt the flags of the target process if that is not the current process and it is trying to change its own flags in a different way at the same time;https://api.github.com/repos/torvalds/linux/git/commits/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40;https://github.com/torvalds/linux/commit/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40
617;1841;"Two of the instances of __capable() actually only act on current, and so have
been changed to calls to capable()";Two of the instances of __capable() actually only act on current, and so have been changed to calls to capable();only act on current;https://api.github.com/repos/torvalds/linux/git/commits/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40;https://github.com/torvalds/linux/commit/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40
618;1848; (3) cap_safe_nice() only ever saw current, so now uses capable();cap_safe_nice() only ever saw current, so now uses capable();only ever saw current, capable();https://api.github.com/repos/torvalds/linux/git/commits/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40;https://github.com/torvalds/linux/commit/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40
619;1849;" (4) smack_setprocattr() rejected accesses to tasks other than current just
     after calling __capable(), so the order of these two tests have been
     switched and capable() is used instead";The order of the tests have been switched and capable() is used instead;smack_setprocattr() rejected accesses to tasks other than current just after calling __capable();https://api.github.com/repos/torvalds/linux/git/commits/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40;https://github.com/torvalds/linux/commit/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40
620;1850;" (5) In smack_file_send_sigiotask(), we need to allow privileged processes to
     receive SIGIO on files they're manipulating";allow privileged processes to receive SIGIO on files they're manipulating;privileged processes;https://api.github.com/repos/torvalds/linux/git/commits/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40;https://github.com/torvalds/linux/commit/5cd9c58fbe9ec92b45b27e131719af4f2bd9eb40
621;1853;oom_kill: remove unused parameter in badness();remove unused parameter in badness();unused;https://api.github.com/repos/torvalds/linux/git/commits/97d87c9710bc6c5f2585fb9dc58f5bedbe996f10;https://github.com/torvalds/linux/commit/97d87c9710bc6c5f2585fb9dc58f5bedbe996f10
623;1860;"This patch introduces a struct zoneref to store a zone pointer and a zone
index";Introduce a struct zoneref to store a zone pointer and a zone index;Store a zone pointer and a zone index;https://api.github.com/repos/torvalds/linux/git/commits/dd1a239f6f2d4d3eedd318583ec319aa145b324c;https://github.com/torvalds/linux/commit/dd1a239f6f2d4d3eedd318583ec319aa145b324c
625;1868;" The
first contains all populated zones in the system, ordered by distance, for
fallback allocations when the target/preferred node has no free pages";fallback allocations when the target/preferred node has no free pages;target/preferred node has no free pages;https://api.github.com/repos/torvalds/linux/git/commits/54a6eb5c4765aa573a030ceeba2c14e3d2ea5706;https://github.com/torvalds/linux/commit/54a6eb5c4765aa573a030ceeba2c14e3d2ea5706
627;1873;"This is because tsk->sighand is not guarded by RCU, so we have to
hold tasklist_lock, just as what out_of_memory() does.";hold tasklist_lock;tsk->sighand is not guarded by RCU, just as what out_of_memory() does.;https://api.github.com/repos/torvalds/linux/git/commits/e115f2d89253490fb2dbf304b627f8d908df26f1;https://github.com/torvalds/linux/commit/e115f2d89253490fb2dbf304b627f8d908df26f1
629;1875;Fix kernel-doc notation in oom_kill.c.;Fix kernel-doc notation in oom_kill.c;kernel-doc notation needs to be fixed;https://api.github.com/repos/torvalds/linux/git/commits/1b578df02207a67a29e8ced4db3b36d89df52fef;https://github.com/torvalds/linux/commit/1b578df02207a67a29e8ced4db3b36d89df52fef
631;1880;oom: add sysctl to enable task memory dump;add sysctl to enable task memory dump;enable task memory dump;https://api.github.com/repos/torvalds/linux/git/commits/fef1bdd68c81b71882ccb6f47c70980a03182063;https://github.com/torvalds/linux/commit/fef1bdd68c81b71882ccb6f47c70980a03182063
632;1881;"Adds a new sysctl, 'oom_dump_tasks', that enables the kernel to produce a
dump of all system tasks (excluding kernel threads) when performing an
OOM-killing";Adds a new sysctl, 'oom_dump_tasks';enables the kernel to produce a dump of all system tasks;https://api.github.com/repos/torvalds/linux/git/commits/fef1bdd68c81b71882ccb6f47c70980a03182063;https://github.com/torvalds/linux/commit/fef1bdd68c81b71882ccb6f47c70980a03182063
633;1884;"It is configurable so that large systems, such as those with several
thousand tasks, do not incur a performance penalty associated with dumping
data they may not desire";It is configurable;so that large systems, such as those with several thousand tasks, do not incur a performance penalty associated with dumping data they may not desire;https://api.github.com/repos/torvalds/linux/git/commits/fef1bdd68c81b71882ccb6f47c70980a03182063;https://github.com/torvalds/linux/commit/fef1bdd68c81b71882ccb6f47c70980a03182063
634;1885;"If an OOM was triggered as a result of a memory controller, the tasklist
shall be filtered to exclude tasks that are not a member of the same
cgroup.";The tasklist shall be filtered to exclude tasks that are not a member of the same cgroup.;to exclude tasks that are not a member of the same cgroup.;https://api.github.com/repos/torvalds/linux/git/commits/fef1bdd68c81b71882ccb6f47c70980a03182063;https://github.com/torvalds/linux/commit/fef1bdd68c81b71882ccb6f47c70980a03182063
635;1900;"uid comparisons are unnecessary, trust CAP_SYS_ADMIN
	   alone";Trust CAP_SYS_ADMIN;uid comparisons are unnecessary;https://api.github.com/repos/torvalds/linux/git/commits/97829955ad291acec1d8b94e9911b3ceb1118bb1;https://github.com/torvalds/linux/commit/97829955ad291acec1d8b94e9911b3ceb1118bb1
636;1901;" However CAP_SYS_RESOURCE is the one that really
	   means ""give me extra resources"" so allow for that as
	   well";allow for CAP_SYS_RESOURCE as well;"CAP_SYS_RESOURCE means ""give me extra resources""";https://api.github.com/repos/torvalds/linux/git/commits/97829955ad291acec1d8b94e9911b3ceb1118bb1;https://github.com/torvalds/linux/commit/97829955ad291acec1d8b94e9911b3ceb1118bb1
638;1904;"uid==0 makes processes on the host as well as in containers
	   more important, so we should keep the existing checks";keep the existing checks;uid==0 makes processes on the host as well as in containers more important;https://api.github.com/repos/torvalds/linux/git/commits/97829955ad291acec1d8b94e9911b3ceb1118bb1;https://github.com/torvalds/linux/commit/97829955ad291acec1d8b94e9911b3ceb1118bb1
639;1905;"uid==0 makes processes only on the host more important,
	   even without any capabilities";uid==0 makes processes only on the host more important;even without any capabilities;https://api.github.com/repos/torvalds/linux/git/commits/97829955ad291acec1d8b94e9911b3ceb1118bb1;https://github.com/torvalds/linux/commit/97829955ad291acec1d8b94e9911b3ceb1118bb1
640;1909;"The patch supports legacy (32-bit) capability userspace, and where possible
translates 32-bit capabilities to/from userspace and the VFS to 64-bit
kernel space capabilities";The patch supports legacy (32-bit) capability userspace and translates 32-bit capabilities to/from userspace and the VFS to 64-bit kernel space capabilities.;Supports legacy (32-bit) capability userspace and translates 32-bit capabilities.;https://api.github.com/repos/torvalds/linux/git/commits/e338d263a76af78fe8f38a72131188b58fceb591;https://github.com/torvalds/linux/commit/e338d263a76af78fe8f38a72131188b58fceb591
641;1913;Move the task_struct members specific to rt scheduling together;Move the task_struct members specific to rt scheduling together;specific to rt scheduling;https://api.github.com/repos/torvalds/linux/git/commits/fa717060f1ab7eb6570f2fb49136f838fc9195a9;https://github.com/torvalds/linux/commit/fa717060f1ab7eb6570f2fb49136f838fc9195a9
642;1917;Use helpers to obtain task pid in printks;Use helpers to obtain task pid in printks;to obtain task pid in printks;https://api.github.com/repos/torvalds/linux/git/commits/ba25f9dcc4ea6e30839fcab5a5516f2176d5bfed;https://github.com/torvalds/linux/commit/ba25f9dcc4ea6e30839fcab5a5516f2176d5bfed
643;1918;"The task_struct->pid member is going to be deprecated, so start
using the helpers (task_pid_nr/task_pid_vnr/task_pid_nr_ns) in
the kernel";start using the helpers (task_pid_nr/task_pid_vnr/task_pid_nr_ns) in the kernel;The task_struct->pid member is going to be deprecated;https://api.github.com/repos/torvalds/linux/git/commits/ba25f9dcc4ea6e30839fcab5a5516f2176d5bfed;https://github.com/torvalds/linux/commit/ba25f9dcc4ea6e30839fcab5a5516f2176d5bfed
644;1919;"The first thing to start with is the pid, printed to dmesg - in
this case we may safely use task_pid_nr()";start with the pid, printed to dmesg ;safely use task_pid_nr() in this case;https://api.github.com/repos/torvalds/linux/git/commits/ba25f9dcc4ea6e30839fcab5a5516f2176d5bfed;https://github.com/torvalds/linux/commit/ba25f9dcc4ea6e30839fcab5a5516f2176d5bfed
646;1922;"With pid namespaces this field is now dangerous to use explicitly, so hide
it behind the helpers";hide it behind the helpers;With pid namespaces this field is now dangerous to use explicitly;https://api.github.com/repos/torvalds/linux/git/commits/bac0abd6174e427404dd197cdbefece31e97329b;https://github.com/torvalds/linux/commit/bac0abd6174e427404dd197cdbefece31e97329b
647;1924;" Unfortunately this patch cannot be sent right now as this
leads to tons of warnings, so start isolating them, and deprecate later";start isolating the tons of warnings;cannot be sent right now as this leads to tons of warnings;https://api.github.com/repos/torvalds/linux/git/commits/bac0abd6174e427404dd197cdbefece31e97329b;https://github.com/torvalds/linux/commit/bac0abd6174e427404dd197cdbefece31e97329b
648;1925;"Actually the p->tgid == pid has to be changed to has_group_leader_pid(),
but Oleg pointed out that in case of posix cpu timers this is the same, and
thread_group_leader() is more preferable.";p->tgid == pid has to be changed to has_group_leader_pid();Oleg pointed out that in case of posix cpu timers this is the same, and thread_group_leader() is more preferable.;https://api.github.com/repos/torvalds/linux/git/commits/bac0abd6174e427404dd197cdbefece31e97329b;https://github.com/torvalds/linux/commit/bac0abd6174e427404dd197cdbefece31e97329b
649;1938;"	  This way, we kill only the cgroup if the cgroup's init has a
	  bug rather than force a kernel panic.";kill only the cgroup if the cgroup's init has a bug;rather than force a kernel panic;https://api.github.com/repos/torvalds/linux/git/commits/b460cbc581a53cc088ceba80608021dd49c63c43;https://github.com/torvalds/linux/commit/b460cbc581a53cc088ceba80608021dd49c63c43
651;1945;"Instead of testing for overlap in the memory nodes of the the nearest
exclusive ancestor of both current and the candidate task, it is better to
simply test for intersection between the task's mems_allowed in their task
descriptors";It is better to simply test for intersection between the task's mems_allowed in their task descriptors;It is better;https://api.github.com/repos/torvalds/linux/git/commits/bbe373f2c60b2aa36c3231734a5afc5271a06718;https://github.com/torvalds/linux/commit/bbe373f2c60b2aa36c3231734a5afc5271a06718
653;1947;"Tasks that do not have an intersection in their mems_allowed with the current
task are not explicitly restricted from being OOM killed because it is quite
possible that the candidate task has allocated memory there before and has
since changed its mems_allowed.";Tasks that do not have an intersection in their mems_allowed with the current task are not explicitly restricted from being OOM killed;it is quite possible that the candidate task has allocated memory there before and has since changed its mems_allowed.;https://api.github.com/repos/torvalds/linux/git/commits/bbe373f2c60b2aa36c3231734a5afc5271a06718;https://github.com/torvalds/linux/commit/bbe373f2c60b2aa36c3231734a5afc5271a06718
654;1948;oom: suppress extraneous stack and memory dump;suppress extraneous stack and memory dump;oom;https://api.github.com/repos/torvalds/linux/git/commits/7213f5066fc8a17c78389fe245de522b5cf0648a;https://github.com/torvalds/linux/commit/7213f5066fc8a17c78389fe245de522b5cf0648a
656;1950;" There's no need to fill the ring buffer with this information
if its already been printed and the condition that triggered the previous OOM
killer has not yet been alleviated.";There's no need to fill the ring buffer with this information;if its already been printed and the condition that triggered the previous OOM killer has not yet been alleviated.;https://api.github.com/repos/torvalds/linux/git/commits/7213f5066fc8a17c78389fe245de522b5cf0648a;https://github.com/torvalds/linux/commit/7213f5066fc8a17c78389fe245de522b5cf0648a
657;1952;"Adds a new sysctl, 'oom_kill_allocating_task', which will automatically kill
the OOM-triggering task instead of scanning through the tasklist to find a
memory-hogging target";Adds a new sysctl, 'oom_kill_allocating_task';which will automatically kill the OOM-triggering task instead of scanning through the tasklist to find a memory-hogging target;https://api.github.com/repos/torvalds/linux/git/commits/fe071d7e8aae5745c009c808bb8933f22a9e305a;https://github.com/torvalds/linux/commit/fe071d7e8aae5745c009c808bb8933f22a9e305a
658;1955;"OOM killer synchronization should be done with zone granularity so that memory
policy and cpuset allocations may have their corresponding zones locked and
allow parallel kills for other OOM conditions that may exist elsewhere in the
system";OOM killer synchronization should be done with zone granularity;so that memory policy and cpuset allocations may have their corresponding zones locked and allow parallel kills for other OOM conditions that may exist elsewhere in the system;https://api.github.com/repos/torvalds/linux/git/commits/098d7f128a4e53cb64930628915ac767785e0e60;https://github.com/torvalds/linux/commit/098d7f128a4e53cb64930628915ac767785e0e60
659;1956;" DMA allocations can be targeted at the zone level, which would not be
possible if locking was done in nodes or globally";DMA allocations can be targeted at the zone level;locking was done in nodes or globally;https://api.github.com/repos/torvalds/linux/git/commits/098d7f128a4e53cb64930628915ac767785e0e60;https://github.com/torvalds/linux/commit/098d7f128a4e53cb64930628915ac767785e0e60
660;1957;"Synchronization shall be done with a variation of ""trylocks."" The goal is to
put the current task to sleep and restart the failed allocation attempt later
if the trylock fails";"Synchronization shall be done with a variation of ""trylocks.""";The goal is to put the current task to sleep and restart the failed allocation attempt later if the trylock fails.;https://api.github.com/repos/torvalds/linux/git/commits/098d7f128a4e53cb64930628915ac767785e0e60;https://github.com/torvalds/linux/commit/098d7f128a4e53cb64930628915ac767785e0e60
661;1963;"The OOM killer's CONSTRAINT definitions are really more appropriate in an
enum, so define them in include/linux/oom.h.";Define the OOM killer's CONSTRAINT definitions in include/linux/oom.h  ;The OOM killer's CONSTRAINT definitions are more appropriate in an enum;https://api.github.com/repos/torvalds/linux/git/commits/70e24bdf6d2fead14631e72a07fba012400c521e;https://github.com/torvalds/linux/commit/70e24bdf6d2fead14631e72a07fba012400c521e
664;1975; 2) Add back fs.h or less bloated headers (err.h) to files that need it;Add back fs.h or less bloated headers (err.h) to files that need it;to files that need it;https://api.github.com/repos/torvalds/linux/git/commits/4e950f6f0189f65f8bf069cf2272649ef418f5e4;https://github.com/torvalds/linux/commit/4e950f6f0189f65f8bf069cf2272649ef418f5e4
666;1978;oom: fix constraint deadlock;fix constraint deadlock;constraint deadlock;https://api.github.com/repos/torvalds/linux/git/commits/2b45ab3398a0ba119b1f672c7c56fd5a431b7f0a;https://github.com/torvalds/linux/commit/2b45ab3398a0ba119b1f672c7c56fd5a431b7f0a
667;1979;"Fixes a deadlock in the OOM killer for allocations that are not
__GFP_HARDWALL";Fixes a deadlock in the OOM killer for allocations that are not __GFP_HARDWALL;deadlock in the OOM killer for allocations that are not __GFP_HARDWALL;https://api.github.com/repos/torvalds/linux/git/commits/2b45ab3398a0ba119b1f672c7c56fd5a431b7f0a;https://github.com/torvalds/linux/commit/2b45ab3398a0ba119b1f672c7c56fd5a431b7f0a
668;1984;"We now take callback_mutex after iterating through the zonelist since we
don't need it yet.";We now take callback_mutex after iterating through the zonelist;we don't need it yet;https://api.github.com/repos/torvalds/linux/git/commits/2b45ab3398a0ba119b1f672c7c56fd5a431b7f0a;https://github.com/torvalds/linux/commit/2b45ab3398a0ba119b1f672c7c56fd5a431b7f0a
670;1987;" But some people
want failover by panic ASAP even if they are used";panic ASAP;want failover;https://api.github.com/repos/torvalds/linux/git/commits/2b744c01a54fe0c9974ff1b29522f25f07084053;https://github.com/torvalds/linux/commit/2b744c01a54fe0c9974ff1b29522f25f07084053
672;1993;fix OOM killing processes wrongly thought MPOL_BIND;fix OOM killing processes wrongly thought MPOL_BIND;wrongly thought MPOL_BIND;https://api.github.com/repos/torvalds/linux/git/commits/3d124cbba316737af8f3a6959edb95bbd130a4d8;https://github.com/torvalds/linux/commit/3d124cbba316737af8f3a6959edb95bbd130a4d8
673;1998;"When finding other threads that share an mm with that task, we need to
kill those individual threads and not the same one";kill those individual threads;When finding other threads that share an mm with that task;https://api.github.com/repos/torvalds/linux/git/commits/650a7c974f1b91de9732c0f720e792837f8abfd6;https://github.com/torvalds/linux/commit/650a7c974f1b91de9732c0f720e792837f8abfd6
674;2000;[PATCH] oom fix: prevent oom from killing a process with children/sibling unkillable;prevent oom from killing a process with children/sibling unkillable;fix oom issue;https://api.github.com/repos/torvalds/linux/git/commits/35ae834fa02ba89cfbd4a80892c0e458fd6d5c0b;https://github.com/torvalds/linux/commit/35ae834fa02ba89cfbd4a80892c0e458fd6d5c0b
676;2003;"These days, if you swapoff when there isn't enough memory, OOM killer gives
""BUG: scheduling while atomic"" and the machine hangs: badness() needs to do
its PF_SWAPOFF return after the task_unlock (tasklist_lock is also held
here, so p isn't going to be freed: PF_SWAPOFF might get turned off at any
moment, but that doesn't really matter).";"OOM killer gives ""BUG: scheduling while atomic"" and the machine hangs";there isn't enough memory, badness() needs to do its PF_SWAPOFF return after the task_unlock;https://api.github.com/repos/torvalds/linux/git/commits/7ba3485947ee7bc89a17f86250fe9b692a615dff;https://github.com/torvalds/linux/commit/7ba3485947ee7bc89a17f86250fe9b692a615dff
678;2009;contstrained_alloc() should get memory_less_node into count;contstrained_alloc() should get memory_less_node into count;memory_less_node into count;https://api.github.com/repos/torvalds/linux/git/commits/96ac5913f4e45c6a1b98350f2c0a8bb3abe2646a;https://github.com/torvalds/linux/commit/96ac5913f4e45c6a1b98350f2c0a8bb3abe2646a
679;2012; This patch fix it.;fix it;fix;https://api.github.com/repos/torvalds/linux/git/commits/96ac5913f4e45c6a1b98350f2c0a8bb3abe2646a;https://github.com/torvalds/linux/commit/96ac5913f4e45c6a1b98350f2c0a8bb3abe2646a
680;2014;"Elaborate the API for calling cpuset_zone_allowed(), so that users have to
explicitly choose between the two variants";Elaborate the API for calling cpuset_zone_allowed();users have to explicitly choose between the two variants;https://api.github.com/repos/torvalds/linux/git/commits/02a0e53d8227aff5e62e0433f82c12c1c2805fd6;https://github.com/torvalds/linux/commit/02a0e53d8227aff5e62e0433f82c12c1c2805fd6
681;2019;"The hardwall version requires that the current tasks mems_allowed allows
the node of the specified zone (or that you're in interrupt or that
__GFP_THISNODE is set or that you're on a one cpuset system.)
The softwall version, depending on the gfp_mask, might allow a node if it
was allowed in the nearest enclusing cpuset marked mem_exclusive (which
requires taking the cpuset lock 'callback_mutex' to evaluate.)
This patch removes the cpuset_zone_allowed() call, and forces the caller to
explicitly choose between the hardwall and the softwall case";This patch removes the cpuset_zone_allowed() call;to force the caller to explicitly choose between the hardwall and the softwall case;https://api.github.com/repos/torvalds/linux/git/commits/02a0e53d8227aff5e62e0433f82c12c1c2805fd6;https://github.com/torvalds/linux/commit/02a0e53d8227aff5e62e0433f82c12c1c2805fd6
682;2022;" It should save a few instructions executed for the calls that
turned into calls of cpuset_zone_allowed_hardwall, thanks to not having to
set (before the call) then check (within the call) the __GFP_HARDWALL flag";It should save a few instructions executed for the calls that turned into calls of cpuset_zone_allowed_hardwall;thanks to not having to set (before the call) then check (within the call) the __GFP_HARDWALL flag;https://api.github.com/repos/torvalds/linux/git/commits/02a0e53d8227aff5e62e0433f82c12c1c2805fd6;https://github.com/torvalds/linux/commit/02a0e53d8227aff5e62e0433f82c12c1c2805fd6
683;2024;"Not a perfect win, but seems worth it, to reduce this chance of hitting a
sleeping with irq off complaint again.";reduce this chance of hitting a sleeping with irq off complaint again;Not a perfect win, but seems worth it;https://api.github.com/repos/torvalds/linux/git/commits/02a0e53d8227aff5e62e0433f82c12c1c2805fd6;https://github.com/torvalds/linux/commit/02a0e53d8227aff5e62e0433f82c12c1c2805fd6
684;2026;"Don't cause all threads in all other thread groups to gain TIF_MEMDIE
otherwise we'll get a thundering herd eating our memory reserve";Don't cause all threads in all other thread groups to gain TIF_MEMDIE;otherwise we'll get a thundering herd eating our memory reserve;https://api.github.com/repos/torvalds/linux/git/commits/f2a2a7108aa0039ba7a5fe7a0d2ecef2219a7584;https://github.com/torvalds/linux/commit/f2a2a7108aa0039ba7a5fe7a0d2ecef2219a7584
686;2028;[PATCH] oom: cleanup messages;cleanup messages;oom;https://api.github.com/repos/torvalds/linux/git/commits/f3af38d30c18538d069a95e624a3db7c3d486a1e;https://github.com/torvalds/linux/commit/f3af38d30c18538d069a95e624a3db7c3d486a1e
687;2029;Clean up the OOM killer messages to be more consistent.;Clean up the OOM killer messages;to be more consistent;https://api.github.com/repos/torvalds/linux/git/commits/f3af38d30c18538d069a95e624a3db7c3d486a1e;https://github.com/torvalds/linux/commit/f3af38d30c18538d069a95e624a3db7c3d486a1e
689;2032;" Having this
test here also prevents any OOM_DISABLE child of the ""selected"" process
from being killed.";Having this test here;"prevents any OOM_DISABLE child of the ""selected"" process from being killed.";https://api.github.com/repos/torvalds/linux/git/commits/c33e0fca3508f0aa387b1c10d0ef158102deb140;https://github.com/torvalds/linux/commit/c33e0fca3508f0aa387b1c10d0ef158102deb140
694;2046;No logic changes, but imho easier to read.;No logic changes, but imho easier to read.;easier to read;https://api.github.com/repos/torvalds/linux/git/commits/972c4ea59c9dbf82647ee9665d9e945241911a51;https://github.com/torvalds/linux/commit/972c4ea59c9dbf82647ee9665d9e945241911a51
695;2047;[PATCH] select_bad_process(): kill a bogus PF_DEAD/TASK_DEAD check;kill a bogus PF_DEAD/TASK_DEAD check;bogus PF_DEAD/TASK_DEAD check;https://api.github.com/repos/torvalds/linux/git/commits/28324d1df646521256e83389244adcce98e89ff2;https://github.com/torvalds/linux/commit/28324d1df646521256e83389244adcce98e89ff2
696;2054;"task_struct->state == EXIT_DEAD is a very special case, to avoid a confusion
it makes sense to introduce a new state, TASK_DEAD, while EXIT_DEAD should
live only in ->exit_state as documented in sched.h";Introduce a new state, TASK_DEAD;to avoid a confusion;https://api.github.com/repos/torvalds/linux/git/commits/c394cc9fbb367f87faa2228ec2eabacd2d4701c6;https://github.com/torvalds/linux/commit/c394cc9fbb367f87faa2228ec2eabacd2d4701c6
699;2061;"Further, is_init() checks pid and thus removes dependency on Eric's other
patches for now";removes dependency on Eric's other patches for now;checks pid and thus;https://api.github.com/repos/torvalds/linux/git/commits/f400e198b2ed26ce55b22a1412ded0896e7516ac;https://github.com/torvalds/linux/commit/f400e198b2ed26ce55b22a1412ded0896e7516ac
700;2066;	Introduce is_init to capture this case;Introduce is_init;to capture this case;https://api.github.com/repos/torvalds/linux/git/commits/f400e198b2ed26ce55b22a1412ded0896e7516ac;https://github.com/torvalds/linux/commit/f400e198b2ed26ce55b22a1412ded0896e7516ac
702;2073;[PATCH] oom-kill: update comments to reflect current code;update comments to reflect current code;reflect current code;https://api.github.com/repos/torvalds/linux/git/commits/5a291b98b2116d669449885abef3000f747504b3;https://github.com/torvalds/linux/commit/5a291b98b2116d669449885abef3000f747504b3
703;2074;Update the comments for __oom_kill_task() to reflect the code changes.;Update the comments for __oom_kill_task();to reflect the code changes;https://api.github.com/repos/torvalds/linux/git/commits/5a291b98b2116d669449885abef3000f747504b3;https://github.com/torvalds/linux/commit/5a291b98b2116d669449885abef3000f747504b3
709;2086;Moving the test down will give the desired behaviour;Moving the test down;will give the desired behaviour;https://api.github.com/repos/torvalds/linux/git/commits/4a3ede107e422a0c53d28024b0aa902ca22a8768;https://github.com/torvalds/linux/commit/4a3ede107e422a0c53d28024b0aa902ca22a8768
711;2088;" As per the previous patch,
this is required to prevent OOM killer deadlocks (and they don't actually get
killed, because they're already exiting -- they're simply allowed access to
memory reserves).";This is required to prevent OOM killer deadlocks;they don't actually get killed, because they're already exiting -- they're simply allowed access to memory reserves;https://api.github.com/repos/torvalds/linux/git/commits/4a3ede107e422a0c53d28024b0aa902ca22a8768;https://github.com/torvalds/linux/commit/4a3ede107e422a0c53d28024b0aa902ca22a8768
713;2090;"If current *is* exiting, it should actually be allowed to access reserved
memory rather than OOM kill something else";it should actually be allowed to access reserved memory;current is exiting and it should not OOM kill something else;https://api.github.com/repos/torvalds/linux/git/commits/50ec3bbffbe8a96347c54832d48110a5bc9e9ff8;https://github.com/torvalds/linux/commit/50ec3bbffbe8a96347c54832d48110a5bc9e9ff8
714;2091;" Can't do this via a straight
check in page_alloc.c because that would allow multiple tasks to use up
reserves";Can't do this via a straight check in page_alloc.c ;that would allow multiple tasks to use up reserves;https://api.github.com/repos/torvalds/linux/git/commits/50ec3bbffbe8a96347c54832d48110a5bc9e9ff8;https://github.com/torvalds/linux/commit/50ec3bbffbe8a96347c54832d48110a5bc9e9ff8
716;2099;" Fix this by just causing
cpuset_excl_nodes_overlap to reduce the badness rather than disallow it.";Reduce the badness rather than disallow cpuset_excl_nodes_overlap.;Just causing.;https://api.github.com/repos/torvalds/linux/git/commits/7887a3da753e1ba8244556cc9a2b38c815bfe256;https://github.com/torvalds/linux/commit/7887a3da753e1ba8244556cc9a2b38c815bfe256
718;2104;" If the resource manager inflated the balloon to a size
where memory allocations can not be satisfied anymore, it is better to
deflate the balloon a bit instead of killing processes";Deflate the balloon a bit instead of killing processes;If the resource manager inflated the balloon to a size where memory allocations can not be satisfied anymore, it is better to deflate the balloon a bit;https://api.github.com/repos/torvalds/linux/git/commits/8bc719d3cab8414938f9ea6e33b58d8810d18068;https://github.com/torvalds/linux/commit/8bc719d3cab8414938f9ea6e33b58d8810d18068
719;2106;[PATCH] sched: cleanup, remove task_t, convert to struct task_struct;remove task_t, convert to struct task_struct;cleanup, remove;https://api.github.com/repos/torvalds/linux/git/commits/36c8b586896f60cb91a4fd526233190b34316baf;https://github.com/torvalds/linux/commit/36c8b586896f60cb91a4fd526233190b34316baf
720;2107;cleanup: remove task_t and convert all the uses to struct task_struct;cleanup: remove task_t and convert all the uses to struct task_struct;remove task_t and convert all the uses to struct task_struct;https://api.github.com/repos/torvalds/linux/git/commits/36c8b586896f60cb91a4fd526233190b34316baf;https://github.com/torvalds/linux/commit/36c8b586896f60cb91a4fd526233190b34316baf
722;2111;This fixes a few typos in the comments in mm/oom_kill.c.;fixes a few typos;in the comments in mm/oom_kill.c;https://api.github.com/repos/torvalds/linux/git/commits/6937a25cff818d32d0f9ff58a518c9ab96760aeb;https://github.com/torvalds/linux/commit/6937a25cff818d32d0f9ff58a518c9ab96760aeb
723;2119;" But there are environments where panic is preferable
rather than kill some processes.";panic is preferable rather than kill some processes;there are environments where panic is preferable;https://api.github.com/repos/torvalds/linux/git/commits/fadd8fbd153c12963f8fe3c9ef7f8967f286f98b;https://github.com/torvalds/linux/commit/fadd8fbd153c12963f8fe3c9ef7f8967f286f98b
724;2120;[PATCH] mm: fix mm_struct reference counting bugs in mm/oom_kill.c;fix mm_struct reference counting bugs in mm/oom_kill.c;reference counting bugs;https://api.github.com/repos/torvalds/linux/git/commits/013159227b840dfd441bd2e4c8b4d77ffb3cc42e;https://github.com/torvalds/linux/commit/013159227b840dfd441bd2e4c8b4d77ffb3cc42e
725;2121;"Fix oom_kill_task() so it doesn't call mmput() (which may sleep) while
holding tasklist_lock.";Fix oom_kill_task() so it doesn't call mmput();holding tasklist_lock;https://api.github.com/repos/torvalds/linux/git/commits/013159227b840dfd441bd2e4c8b4d77ffb3cc42e;https://github.com/torvalds/linux/commit/013159227b840dfd441bd2e4c8b4d77ffb3cc42e
726;2122;[PATCH] oom-kill: mm locking fix;mm locking fix;oom-kill;https://api.github.com/repos/torvalds/linux/git/commits/97c2c9b84d0c1edf4926b13661d5af3f0edccbce;https://github.com/torvalds/linux/commit/97c2c9b84d0c1edf4926b13661d5af3f0edccbce
727;2125; Fix it up via task_lock() instead.;Fix it up via task_lock();instead;https://api.github.com/repos/torvalds/linux/git/commits/97c2c9b84d0c1edf4926b13661d5af3f0edccbce;https://github.com/torvalds/linux/commit/97c2c9b84d0c1edf4926b13661d5af3f0edccbce
728;2126;[PATCH] out_of_memory() locking fix;out_of_memory() locking fix;locking fix;https://api.github.com/repos/torvalds/linux/git/commits/140ffcec4def3ee3af7565b2cf1d3b2580f7e180;https://github.com/torvalds/linux/commit/140ffcec4def3ee3af7565b2cf1d3b2580f7e180
730;2128;"While we're there, let's turn that interruptible sleep unto uninterruptible,
so we don't get a busywait if signal_pending()";Turn that interruptible sleep unto uninterruptible;so we don't get a busywait if signal_pending();https://api.github.com/repos/torvalds/linux/git/commits/140ffcec4def3ee3af7565b2cf1d3b2580f7e180;https://github.com/torvalds/linux/commit/140ffcec4def3ee3af7565b2cf1d3b2580f7e180
731;2138;"It is better to signal to the process that no memory exists given the
constraints that the process (or the configuration of the process) has
placed on the allocation behavior";signal to the process that no memory exists;given the constraints that the process (or the configuration of the process) has placed on the allocation behavior;https://api.github.com/repos/torvalds/linux/git/commits/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc;https://github.com/torvalds/linux/commit/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc
732;2140;" The solution is
similar to what we do when running out of hugepages";The solution is similar to what we do when running out of hugepages;similar to what we do when running out of hugepages;https://api.github.com/repos/torvalds/linux/git/commits/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc;https://github.com/torvalds/linux/commit/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc
734;2142;" At that point
performance considerations do not matter much so we just scan the zonelist
and reconstruct a list of nodes";reconstruct a list of nodes;performance considerations do not matter much;https://api.github.com/repos/torvalds/linux/git/commits/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc;https://github.com/torvalds/linux/commit/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc
735;2143;" If the list of nodes does not contain all
online nodes then this is a constrained allocation and we should kill the
current process.";kill the current process;this is a constrained allocation and we should (kill the current process);https://api.github.com/repos/torvalds/linux/git/commits/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc;https://github.com/torvalds/linux/commit/9b0f8b040acd8dfd23860754c0d09ff4f44e2cbc
736;2151;"The idea in attached patch is that we do want to account the memory
consumption of the (direct) children to the father -- however not fully";account the memory consumption of the (direct) children to the father;we do want to;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
737;2152;"This maintains the property that fathers with too many children will still
very likely be picked, whereas a single misbehaving child has the chance to
be picked by the OOM killer";This maintains the property that fathers with too many children will still very likely be picked;whereas a single misbehaving child has the chance to be picked by the OOM killer;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
738;2154;" This means that if one child eats more mem than the rest of
the family, it will be picked, otherwise it's still the father and thus the
whole family that gets selected";If one child eats more mem than the rest of the family, it will be picked;Otherwise it's still the father and thus the whole family that gets selected;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
739;2155;"This is heuristics -- we could debate whether accounting for a fourth would
be better than for half of it";accounting for a fourth would be better than for half of it;we could debate;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
740;2157;" For now I sticked to accounting for half,
which should IMHO be a significant improvement";Stick to accounting for half;Significant improvement;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
741;2158;"The patch does one more thing: As users tend to be irritated by the choice
of killed processes (mainly because the children are killed first, despite
some of them having a very low OOM score), I added some more output: The
selected (father) process will be reported first and it's oom_score printed
to syslog";I added some more output;Users tend to be irritated by the choice of killed processes;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
742;2160;"Only account for half of children's vm size in oom score calculation
This should still give the parent enough point in case of fork bombs";Only account for half of children's vm size in oom score calculation;This should still give the parent enough point in case of fork bombs;https://api.github.com/repos/torvalds/linux/git/commits/9827b781f20828e5ceb911b879f268f78fe90815;https://github.com/torvalds/linux/commit/9827b781f20828e5ceb911b879f268f78fe90815
745;2169;"The fix seems easy enough - move the cpuset semaphore region outside the
tasklist_lock region";move the cpuset semaphore region outside the tasklist_lock region;The fix seems easy enough;https://api.github.com/repos/torvalds/linux/git/commits/505970b96e3b7d22177c38e03435a68376628e7a;https://github.com/torvalds/linux/commit/505970b96e3b7d22177c38e03435a68376628e7a
746;2171;" The oom code where
the locking needs to be changed does not have access to the cpuset locks,
which are internal to kernel/cpuset.c only";The locking needs to be changed;The oom code where the locking needs to be changed does not have access to the cpuset locks, which are internal to kernel/cpuset.c only;https://api.github.com/repos/torvalds/linux/git/commits/505970b96e3b7d22177c38e03435a68376628e7a;https://github.com/torvalds/linux/commit/505970b96e3b7d22177c38e03435a68376628e7a
747;2172;" So I provided a couple more
cpuset interface routines, available to the rest of the kernel, which
simple take and drop the lock needed here (cpusets callback_sem).";Provide a couple more cpuset interface routines, available to the rest of the kernel;Take and drop the lock needed here (cpusets callback_sem);https://api.github.com/repos/torvalds/linux/git/commits/505970b96e3b7d22177c38e03435a68376628e7a;https://github.com/torvalds/linux/commit/505970b96e3b7d22177c38e03435a68376628e7a
749;2174;"When oom_killer kills current there's no need to call
schedule_timeout_interruptible() since task must die ASAP.";There's no need to call schedule_timeout_interruptible();task must die ASAP;https://api.github.com/repos/torvalds/linux/git/commits/2f659f462d2ab519068d0e2bb677d7a700decb8d;https://github.com/torvalds/linux/commit/2f659f462d2ab519068d0e2bb677d7a700decb8d
750;2176;" - replaced __nocast uses for gfp flags with gfp_t - it gives exactly
   the same warnings as far as sparse is concerned, doesn't change
   generated code (from gcc point of view we replaced unsigned int with
   typedef) and documents what's going on far better.";replaced __nocast uses for gfp flags with gfp_t;it gives exactly the same warnings as far as sparse is concerned, doesn't change generated code (from gcc point of view we replaced unsigned int with typedef) and documents what's going on far better.;https://api.github.com/repos/torvalds/linux/git/commits/dd0fc66fb33cd610bc1a5db8a5e232d34879b4d7;https://github.com/torvalds/linux/commit/dd0fc66fb33cd610bc1a5db8a5e232d34879b4d7
751;2177;[PATCH] mm: fix-up schedule_timeout() usage;fix-up schedule_timeout() usage;fix-up;https://api.github.com/repos/torvalds/linux/git/commits/13e4b57f6a4e23ceb99794a650d777e74831f4a6;https://github.com/torvalds/linux/commit/13e4b57f6a4e23ceb99794a650d777e74831f4a6
752;2178;set_current_state()/schedule_timeout() to reduce kernel size.;set_current_state()/schedule_timeout();to reduce kernel size;https://api.github.com/repos/torvalds/linux/git/commits/13e4b57f6a4e23ceb99794a650d777e74831f4a6;https://github.com/torvalds/linux/commit/13e4b57f6a4e23ceb99794a650d777e74831f4a6
753;2181;"This patch keeps a task in or under one mem_exclusive cpuset from provoking an
oom kill of a task under a non-overlapping mem_exclusive cpuset";keeps a task in or under one mem_exclusive cpuset;from provoking an oom kill of a task under a non-overlapping mem_exclusive cpuset;https://api.github.com/repos/torvalds/linux/git/commits/ef08e3b4981aebf2ba9bd7025ef7210e8eec07ce;https://github.com/torvalds/linux/commit/ef08e3b4981aebf2ba9bd7025ef7210e8eec07ce
754;2183;"This patch enables configuring a system so that a runaway job under one
mem_exclusive cpuset cannot cause the killing of a job in another such cpuset
that might be using very high compute and memory resources for a prolonged
time.";This patch enables configuring a system so that a runaway job under one mem_exclusive cpuset cannot cause the killing of a job in another such cpuset that might be using very high compute and memory resources for a prolonged time.;prevent a runaway job in one cpuset from killing a job in another cpuset that is using high compute and memory resources for a prolonged time.;https://api.github.com/repos/torvalds/linux/git/commits/ef08e3b4981aebf2ba9bd7025ef7210e8eec07ce;https://github.com/torvalds/linux/commit/ef08e3b4981aebf2ba9bd7025ef7210e8eec07ce
755;2194;"Tweaking /proc/<pid>/oom_adj is not ideal -- if the big research project
really does run amuck allocating memory, it should be shot, not some other
task outside the research projects mem_exclusive cpuset";Tweaking /proc/<pid>/oom_adj is not ideal;if the big research project really does run amuck allocating memory, it should be shot, not some other task outside the research projects mem_exclusive cpuset;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
756;2195;"I propose to extend the use of the 'mem_exclusive' flag of cpusets to manage
such scenarios";extend the use of the 'mem_exclusive' flag of cpusets to manage such scenarios;manage such scenarios;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
757;2196;" Let memory allocations for user space (GFP_USER) be
constrained by a tasks current cpuset, but memory allocations for kernel space
(GFP_KERNEL) by constrained by the nearest mem_exclusive ancestor of the
current cpuset, even though kernel space allocations will still _prefer_ to
remain within the current tasks cpuset, if memory is easily available";Let memory allocations for user space (GFP_USER) be constrained by a tasks current cpuset, but memory allocations for kernel space (GFP_KERNEL) be constrained by the nearest mem_exclusive ancestor of the current cpuset, even though kernel space allocations will still _prefer_ to remain within the current tasks cpuset;even though kernel space allocations will still _prefer_ to remain within the current tasks cpuset, if memory is easily available;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
758;2197;"Let the oom killer be constrained to consider only tasks that are in
overlapping mem_exclusive cpusets (it won't help much to kill a task that
normally cannot allocate memory on any of the same nodes as the ones on which
the current task can allocate.)
The current constraints imposed on setting mem_exclusive are unchanged";Let the oom killer be constrained to consider only tasks that are in overlapping mem_exclusive cpusets;it won't help much to kill a task that normally cannot allocate memory on any of the same nodes as the ones on which the current task can allocate.;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
759;2202;"  1) Some minor cleanup, and some improvements to the code layout
     of one routine to make subsequent patches cleaner";Some minor cleanup, and some improvements to the code layout;to make subsequent patches cleaner;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
761;2207;"Patch (1), the one time I looked on an SN2 (ia64) build, actually saved 32
bytes of kernel text space";Patch (1), the one time I looked on an SN2 (ia64) build, actually saved 32 bytes of kernel text space;actually saved 32 bytes of kernel text space;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
762;2209;" Patches (3) and (4) added
about 600 bytes each of kernel text space, mostly in kernel/cpuset.c, which
matters only if CONFIG_CPUSET is enabled";Patches (3) and (4) added;about 600 bytes each of kernel text space, mostly in kernel/cpuset.c, which matters only if CONFIG_CPUSET is enabled;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
763;2211;"This patch applies a few comment and code cleanups to mm/oom_kill.c prior to
applying a few small patches to improve cpuset management of memory placement";applies a few comment and code cleanups to mm/oom_kill.c prior to applying a few small patches to improve cpuset management of memory placement;to improve cpuset management of memory placement;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
764;2212;The comment changed in oom_kill.c was seriously misleading;The comment changed in oom_kill.c was seriously misleading;seriously misleading;https://api.github.com/repos/torvalds/linux/git/commits/a49335cceab8afb6603152fcc3f7d3b6677366ca;https://github.com/torvalds/linux/commit/a49335cceab8afb6603152fcc3f7d3b6677366ca
768;2220;Use printk_ratelimit() to quieten it.;Use printk_ratelimit();to quieten it;https://api.github.com/repos/torvalds/linux/git/commits/42639269f9ce4aac2e6c20bcbca30b5da8b9a899;https://github.com/torvalds/linux/commit/42639269f9ce4aac2e6c20bcbca30b5da8b9a899
771;2224;This patch provides more debug info when the system is OOM;Provides more debug info when the system is OOM;More debug info, system is OOM;https://api.github.com/repos/torvalds/linux/git/commits/578c2fd6a7f378434655e5c480e23152a3994404;https://github.com/torvalds/linux/commit/578c2fd6a7f378434655e5c480e23152a3994404
773;2228;"iscsi/lvm2/multipath needs guaranteed protection from the oom-killer, so
make the magical value of -17 in /proc/<pid>/oom_adj defeat the oom-killer
altogether";make the magical value of -17 in /proc/<pid>/oom_adj defeat the oom-killer altogether;iscsi/lvm2/multipath needs guaranteed protection from the oom-killer;https://api.github.com/repos/torvalds/linux/git/commits/79befd0c08c4766f8fa27e37ac2a70e40840a56a;https://github.com/torvalds/linux/commit/79befd0c08c4766f8fa27e37ac2a70e40840a56a
775;2232;"We can create a separate ""historical"" git
archive of that later if we want to, and in the meantime it's about
3.2GB when imported into git - space that would just make the early
git days unnecessarily complicated, when we don't have a lot of good
infrastructure for it";"create a separate ""historical"" git archive of that later";if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it;https://api.github.com/repos/torvalds/linux/git/commits/1da177e4c3f41524e886b7f1b8a0c1fc7321cac2;https://github.com/torvalds/linux/commit/1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
